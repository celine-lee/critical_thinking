[
    {
        "code": "def f(array):\n    s = ' '\n    s += ''.join(array)\n    return s",
        "input": "[' ', '  ', '    ', '   ']",
        "output": "'           '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_4",
        "straightlined_code": "array = [' ', '  ', '    ', '   ']\ns = ' '\ns += ''.join(array)\nanswer = s"
    },
    {
        "code": "def f(t):\n    for c in t:\n        if not c.isnumeric():\n            return False\n    return True",
        "input": "'#284376598'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_9",
        "straightlined_code": "t = '#284376598'\nfor c in t:\n    if not c.isnumeric():\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(d):\n    d = d.copy()\n    d.popitem()\n    return d",
        "input": "{\"l\": 1, \"t\": 2, \"x:\": 3}",
        "output": "{'l': 1, 't': 2}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_25",
        "straightlined_code": "d = {\"l\": 1, \"t\": 2, \"x:\": 3}\nd = d.copy()\nd.popitem()\nanswer = d"
    },
    {
        "code": "def f(doc):\n    for x in doc:\n        if x.isalpha():\n            return x.capitalize()\n    return '-'",
        "input": "'raruwa'",
        "output": "'R'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_60",
        "straightlined_code": "doc = 'raruwa'\nfor x in doc:\n    if x.isalpha():\n        answer = x.capitalize()\nanswer = '-'"
    },
    {
        "code": "def f(s):\n    return sum([s.istitle() for s in s.split()])",
        "input": "'SOME OF THIS Is uknowN!'",
        "output": "1",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_98",
        "straightlined_code": "s = 'SOME OF THIS Is uknowN!'\nanswer = sum([s.istitle() for s in s.split()])"
    },
    {
        "code": "def f(dic):\n    return sorted(dic.items(), key=lambda x: x[0])",
        "input": "{'b': 1, 'a': 2}",
        "output": "[('a', 2), ('b', 1)]",
        "line_execution_counts": {
            "1": 3
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_182",
        "straightlined_code": "dic = {'b': 1, 'a': 2}\nanswer = sorted(dic.items(), key=lambda x: x[0])"
    },
    {
        "code": "def f(commands):\n    d = {}\n    for c in commands:\n        d.update(c)\n    return d",
        "input": "[{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]",
        "output": "{'brown': 2, 'blue': 5, 'bright': 4}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_207",
        "straightlined_code": "commands = [{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]\nd = {}\nfor c in commands:\n    d.update(c)\nanswer = d"
    },
    {
        "code": "def f(text):    \n    try:\n        while 'nnet lloP' in text:\n            text = text.replace('nnet lloP', 'nnet loLp')\n    finally:\n        return text",
        "input": "'a_A_b_B3 '",
        "output": "'a_A_b_B3 '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_351",
        "straightlined_code": "text = 'a_A_b_B3 '\ntry:\n    while 'nnet lloP' in text:\n        text = text.replace('nnet lloP', 'nnet loLp')\nfinally:\n    answer = text"
    },
    {
        "code": "def f(arr1, arr2):\n    new_arr = arr1.copy()\n    new_arr.extend(arr2)\n    return new_arr",
        "input": "[5, 1, 3, 7, 8], ['', 0, -1, []]",
        "output": "[5, 1, 3, 7, 8, '', 0, -1, []]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_430",
        "straightlined_code": "arr1, arr2 = [5, 1, 3, 7, 8], ['', 0, -1, []]\nnew_arr = arr1.copy()\nnew_arr.extend(arr2)\nanswer = new_arr"
    },
    {
        "code": "def f(s, characters):\n    return [s[i:i+1] for i in characters]",
        "input": "'s7 6s 1ss', [1, 3, 6, 1, 2]",
        "output": "['7', '6', '1', '7', ' ']",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_436",
        "straightlined_code": "s, characters = 's7 6s 1ss', [1, 3, 6, 1, 2]\nanswer = [s[i:i+1] for i in characters]"
    },
    {
        "code": "def f(d):\n    d['luck'] = 42\n    d.clear()\n    return {1: False, 2 :0}",
        "input": "{}",
        "output": "{1: False, 2: 0}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_519",
        "straightlined_code": "d = {}\nd['luck'] = 42\nd.clear()\nanswer = {1: False, 2 :0}"
    },
    {
        "code": "def f(text):\n    return max(text.find(ch) for ch in 'aeiou')",
        "input": "\"qsqgijwmmhbchoj\"",
        "output": "13",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 20,
        "error": null,
        "id": "sample_565",
        "straightlined_code": "text = \"qsqgijwmmhbchoj\"\nanswer = max(text.find(ch) for ch in 'aeiou')"
    },
    {
        "code": "def f(text):\n    for i in ['.', '!', '?']:\n        if text.endswith(i):\n            return True\n    return False",
        "input": "'. C.'",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_607",
        "straightlined_code": "text = '. C.'\nfor i in ['.', '!', '?']:\n    if text.endswith(i):\n        answer = True\nanswer = False"
    },
    {
        "code": "def f(aDict):\n    # transpose the keys and values into a new dict\n    return dict([v for v in aDict.items()])",
        "input": "{1:1, 2:2, 3:3}",
        "output": "{1: 1, 2: 2, 3: 3}",
        "line_execution_counts": {
            "2": 4
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_608",
        "straightlined_code": "aDict = {1:1, 2:2, 3:3}\n# transpose the keys and values into a new dict\nanswer = dict([v for v in aDict.items()])"
    },
    {
        "code": "def f(text):\n    return sum(1 for c in text if c.isdigit())",
        "input": "'so456'",
        "output": "3",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 20,
        "error": null,
        "id": "sample_765",
        "straightlined_code": "text = 'so456'\nanswer = sum(1 for c in text if c.isdigit())"
    },
    {
        "code": "def f(d):\n    for ch in d:\n        if ch in 'aeiou':\n            return ''.join(ch)",
        "input": "'a_A_b_B3 '",
        "output": "'a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_813",
        "straightlined_code": "d = 'a_A_b_B3 '\nfor ch in d:\n    if ch in 'aeiou':\n        answer = ''.join(ch)"
    },
    {
        "code": "def f(aList):\n    return sum(len(aString) for aString in aList)",
        "input": "['abcd', 'ABC']",
        "output": "7",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_814",
        "straightlined_code": "aList = ['abcd', 'ABC']\nanswer = sum(len(aString) for aString in aList)"
    },
    {
        "code": "def f(c):\n    if c == '(':\n        return 1\n    elif c == ')':\n        return -1\n    else:\n        return 0",
        "input": "')('",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_815",
        "straightlined_code": "c = ')('\nif c == '(':\n    answer = 1\nelif c == ')':\n    answer = -1\nelse:\n    answer = 0"
    },
    {
        "code": "def f(d):\n    return sorted(d.items(), key=lambda x: x[1])",
        "input": "{1: 1, 2: 0, 3: 1, 4: 2}",
        "output": "[(2, 0), (1, 1), (3, 1), (4, 2)]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_819",
        "straightlined_code": "d = {1: 1, 2: 0, 3: 1, 4: 2}\nanswer = sorted(d.items(), key=lambda x: x[1])"
    },
    {
        "code": "def f(text):\n    return ' '.join([s.capitalize() for s in text.split()])",
        "input": "'the world and everything'",
        "output": "'The World And Everything'",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_820",
        "straightlined_code": "text = 'the world and everything'\nanswer = ' '.join([s.capitalize() for s in text.split()])"
    },
    {
        "code": "def f(c):\n    if c == \"a\":\n        return 1\n    if c == \"b\":\n        return 2\n    return 0",
        "input": "'x'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_821",
        "straightlined_code": "c = 'x'\nif c == \"a\":\n    answer = 1\nif c == \"b\":\n    answer = 2\nanswer = 0"
    },
    {
        "code": "def f(a):\n    return sum(1 for c in a if c.isdigit())",
        "input": "'$35.89'",
        "output": "4",
        "line_execution_counts": {
            "1": 8
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_822",
        "straightlined_code": "a = '$35.89'\nanswer = sum(1 for c in a if c.isdigit())"
    },
    {
        "code": "def f(L):\n    return L + [1 for i in L if i % 2 == 0]",
        "input": "[1, 2, 4, 6]",
        "output": "[1, 2, 4, 6, 1, 1, 1]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_823",
        "straightlined_code": "L = [1, 2, 4, 6]\nanswer = L + [1 for i in L if i % 2 == 0]"
    },
    {
        "code": "def f(text):\n    return ''.join(c for c in reversed(text))",
        "input": "'pqrst'",
        "output": "'tsrqp'",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_826",
        "straightlined_code": "text = 'pqrst'\nanswer = ''.join(c for c in reversed(text))"
    },
    {
        "code": "def f(L):\n    return list(map(lambda x: x ** 2, L))",
        "input": "[1, 2, 4, 6]",
        "output": "[1, 4, 16, 36]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_827",
        "straightlined_code": "L = [1, 2, 4, 6]\nanswer = list(map(lambda x: x ** 2, L))"
    },
    {
        "code": "def f(a):\n    return sum(1 for c in a if c.isdigit())",
        "input": "'$35.89'",
        "output": "4",
        "line_execution_counts": {
            "1": 8
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_832",
        "straightlined_code": "a = '$35.89'\nanswer = sum(1 for c in a if c.isdigit())"
    },
    {
        "code": "def f(d):\n    # return an array with values for all the given keys\n    return [d[k] for k in d.keys()]",
        "input": "{1:1, 2:2, 3:3}",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "2": 4
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_839",
        "straightlined_code": "d = {1:1, 2:2, 3:3}\n# answer = an array with values for all the given keys\nanswer = [d[k] for k in d.keys()]"
    },
    {
        "code": "def f(s):\n    return \"\".join(c for c in s if c in \"aeiouAEIOU\")",
        "input": "'bob'",
        "output": "'o'",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_840",
        "straightlined_code": "s = 'bob'\nanswer = \"\".join(c for c in s if c in \"aeiouAEIOU\")"
    },
    {
        "code": "def f(d):\n    for ch in d:\n        if ch in 'aeiou':\n            return ''.join(ch)",
        "input": "'a_A_b_B3 '",
        "output": "'a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_841",
        "straightlined_code": "d = 'a_A_b_B3 '\nfor ch in d:\n    if ch in 'aeiou':\n        answer = ''.join(ch)"
    },
    {
        "code": "def f(s):\n    # return number of vowels in a given string\n    return sum(c.lower() in 'aeiou' for c in s)",
        "input": "\"hello\"",
        "output": "2",
        "line_execution_counts": {
            "2": 7
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_844",
        "straightlined_code": "s = \"hello\"\n# answer = number of vowels in a given string\nanswer = sum(c.lower() in 'aeiou' for c in s)"
    },
    {
        "code": "def f(d):\n    # return an array with values for all the given keys\n    return [d[k] for k in d.keys()]",
        "input": "{1:1, 2:2, 3:3}",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "2": 4
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_846",
        "straightlined_code": "d = {1:1, 2:2, 3:3}\n# answer = an array with values for all the given keys\nanswer = [d[k] for k in d.keys()]"
    },
    {
        "code": "def f(d):\n    # return all values\n    return [v for v in d.values()]",
        "input": "{1:1, 2:2, 3:3}",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "2": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_847",
        "straightlined_code": "d = {1:1, 2:2, 3:3}\n# answer = all values\nanswer = [v for v in d.values()]"
    },
    {
        "code": "def f(l):\n    return [v for v in l if v]",
        "input": "[1, None, 'a', False]",
        "output": "[1, 'a']",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 15,
        "error": null,
        "id": "new_synth_848",
        "straightlined_code": "l = [1, None, 'a', False]\nanswer = [v for v in l if v]"
    },
    {
        "code": "def f(a):\n    for i in a:\n        if i != 0:\n            return 1\n    return 0",
        "input": "[0,0,0]",
        "output": "0",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "4": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_849",
        "straightlined_code": "a = [0,0,0]\nfor i in a:\n    if i != 0:\n        answer = 1\nanswer = 0"
    },
    {
        "code": "def f(a):\n    # sum all numbers\n    n = 0\n    for i in a:\n        n += i\n    return n",
        "input": "[1,2,3]",
        "output": "6",
        "line_execution_counts": {
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_851",
        "straightlined_code": "a = [1,2,3]\n# sum all numbers\nn = 0\nfor i in a:\n    n += i\nanswer = n"
    },
    {
        "code": "def f(s):\n    for c in s:\n        if c == '!':\n            return False\n    return True",
        "input": "'!'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_852",
        "straightlined_code": "s = '!'\nfor c in s:\n    if c == '!':\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(L):\n    # return an array with all elements of L that are less than 5\n    return list(filter(lambda x: x < 5, L))",
        "input": "[1, 2, 4, 6, 1]",
        "output": "[1, 2, 4, 1]",
        "line_execution_counts": {
            "2": 6
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_855",
        "straightlined_code": "L = [1, 2, 4, 6, 1]\n# answer = an array with all elements of L that are less than 5\nanswer = list(filter(lambda x: x < 5, L))"
    },
    {
        "code": "def f(L):\n    return [x for x in L if x % 2 == 0]",
        "input": "[1, 2, 4, 5]",
        "output": "[2, 4]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_856",
        "straightlined_code": "L = [1, 2, 4, 5]\nanswer = [x for x in L if x % 2 == 0]"
    },
    {
        "code": "def f(l):\n    return len([v for v in l if v > 1])",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "5",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_857",
        "straightlined_code": "l = [1, 2, 3, 4, 5, 6]\nanswer = len([v for v in l if v > 1])"
    },
    {
        "code": "def f(d):\n    # check all keys exist\n    return all(k in d for k in d.keys())",
        "input": "{1:1, 2:2, 3:3}",
        "output": "True",
        "line_execution_counts": {
            "2": 5
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_858",
        "straightlined_code": "d = {1:1, 2:2, 3:3}\n# check all keys exist\nanswer = all(k in d for k in d.keys())"
    },
    {
        "code": "def f(commands):\n    d = {}\n    for c in commands:\n        d.update(c)\n    return d",
        "input": "[{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]",
        "output": "{'brown': 2, 'blue': 5, 'bright': 4}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_859",
        "straightlined_code": "commands = [{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]\nd = {}\nfor c in commands:\n    d.update(c)\nanswer = d"
    },
    {
        "code": "def f(l):\n    return [v for v in l if v]",
        "input": "[1, None, 'a', False]",
        "output": "[1, 'a']",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 15,
        "error": null,
        "id": "new_synth_860",
        "straightlined_code": "l = [1, None, 'a', False]\nanswer = [v for v in l if v]"
    },
    {
        "code": "def f(s, d):\n    s.clear()\n    s.update(d)\n    return s",
        "input": "{\"a\": 1, \"b\": 2, \"c\": 3}, {\"d\": 4, \"e\": 5, \"f\": 6}",
        "output": "{'d': 4, 'e': 5, 'f': 6}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_861",
        "straightlined_code": "s, d = {\"a\": 1, \"b\": 2, \"c\": 3}, {\"d\": 4, \"e\": 5, \"f\": 6}\ns.clear()\ns.update(d)\nanswer = s"
    },
    {
        "code": "def f(x):\n    return sum([i%2 for i in range(x)])",
        "input": "5",
        "output": "2",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_862",
        "straightlined_code": "x = 5\nanswer = sum([i%2 for i in range(x)])"
    },
    {
        "code": "def f(text):\n    return sum(ord(ch) for ch in text)",
        "input": "'hello'",
        "output": "532",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_863",
        "straightlined_code": "text = 'hello'\nanswer = sum(ord(ch) for ch in text)"
    },
    {
        "code": "def f(string):\n    return [ord(c) for c in string]",
        "input": "'hello'",
        "output": "[104, 101, 108, 108, 111]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_864",
        "straightlined_code": "string = 'hello'\nanswer = [ord(c) for c in string]"
    },
    {
        "code": "def f(text):\n    return [s.capitalize() for s in text.split()]",
        "input": "'the world and everything'",
        "output": "['The', 'World', 'And', 'Everything']",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_865",
        "straightlined_code": "text = 'the world and everything'\nanswer = [s.capitalize() for s in text.split()]"
    },
    {
        "code": "def f(t):\n    return [i[0] for i in t]",
        "input": "[('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9')]",
        "output": "['1', '4', '7']",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_866",
        "straightlined_code": "t = [('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9')]\nanswer = [i[0] for i in t]"
    },
    {
        "code": "def f(L):\n    for n in L:\n        if n > 2:\n            return True\n    return False",
        "input": "[-1, 3, 7, -2]",
        "output": "True",
        "line_execution_counts": {
            "1": 2,
            "2": 2,
            "3": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_867",
        "straightlined_code": "L = [-1, 3, 7, -2]\nfor n in L:\n    if n > 2:\n        answer = True\nanswer = False"
    },
    {
        "code": "def f(l):\n    return sum([v for v in l if v > 1])",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "20",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_868",
        "straightlined_code": "l = [1, 2, 3, 4, 5, 6]\nanswer = sum([v for v in l if v > 1])"
    },
    {
        "code": "def f(t):\n    try:\n        return t[2:]\n    finally:\n        pass",
        "input": "'a_A_b_B3 '",
        "output": "'A_b_B3 '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "new_synth_869",
        "straightlined_code": "t = 'a_A_b_B3 '\ntry:\n    answer = t[2:]\nfinally:\n    pass"
    },
    {
        "code": "def f(d):\n    # return all keys of d\n    return [k for k in d.keys()]",
        "input": "{1:1, 2:2, 3:3}",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "2": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_870",
        "straightlined_code": "d = {1:1, 2:2, 3:3}\n# answer = all keys of d\nanswer = [k for k in d.keys()]"
    },
    {
        "code": "def f(t):\n    return [i[2] for i in t]",
        "input": "[('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9')]",
        "output": "['3', '6', '9']",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_871",
        "straightlined_code": "t = [('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9')]\nanswer = [i[2] for i in t]"
    },
    {
        "code": "def f(dic):\n    return sorted(dic.items(), key=lambda x: x[1])",
        "input": "{'a': 3, 'c': 1, 'd': 5}",
        "output": "[('c', 1), ('a', 3), ('d', 5)]",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_872",
        "straightlined_code": "dic = {'a': 3, 'c': 1, 'd': 5}\nanswer = sorted(dic.items(), key=lambda x: x[1])"
    },
    {
        "code": "def f(L):\n    return [x * 2 for x in L]",
        "input": "[1, 2, 4, 5]",
        "output": "[2, 4, 8, 10]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_873",
        "straightlined_code": "L = [1, 2, 4, 5]\nanswer = [x * 2 for x in L]"
    },
    {
        "code": "def f(l):\n    return sorted([abs(i) for i in l if i > 0])",
        "input": "[-2, -3, -6, 7, 10, 15, 0]",
        "output": "[7, 10, 15]",
        "line_execution_counts": {
            "1": 8
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_875",
        "straightlined_code": "l = [-2, -3, -6, 7, 10, 15, 0]\nanswer = sorted([abs(i) for i in l if i > 0])"
    },
    {
        "code": "def f(l):\n    return len([v for v in l if v > 1])",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "5",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_876",
        "straightlined_code": "l = [1, 2, 3, 4, 5, 6]\nanswer = len([v for v in l if v > 1])"
    },
    {
        "code": "def f(numbers):\n    # find the first even number in numbers\n    return [n for n in numbers if n % 2 == 0][0]",
        "input": "[2, 1, 6, 4]",
        "output": "2",
        "line_execution_counts": {
            "2": 5
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_877",
        "straightlined_code": "numbers = [2, 1, 6, 4]\n# find the first even number in numbers\nanswer = [n for n in numbers if n % 2 == 0][0]"
    },
    {
        "code": "def f(aDict):\n    return {v:k for k, v in aDict.items()}",
        "input": "{1: 3.14, 2: 2.78}",
        "output": "{3.14: 1, 2.78: 2}",
        "line_execution_counts": {
            "1": 3
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_878",
        "straightlined_code": "aDict = {1: 3.14, 2: 2.78}\nanswer = {v:k for k, v in aDict.items()}"
    },
    {
        "code": "def f(L):\n    return sum(1 for x in L if x == 1)",
        "input": "[0,1,2,1]",
        "output": "2",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_879",
        "straightlined_code": "L = [0,1,2,1]\nanswer = sum(1 for x in L if x == 1)"
    },
    {
        "code": "def f(aDict):\n    return {aValue: aKey for aKey, aValue in aDict.items()}",
        "input": "{\"a\": 1, \"b\": 2, \"c\": 3}",
        "output": "{1: 'a', 2: 'b', 3: 'c'}",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_880",
        "straightlined_code": "aDict = {\"a\": 1, \"b\": 2, \"c\": 3}\nanswer = {aValue: aKey for aKey, aValue in aDict.items()}"
    },
    {
        "code": "def f(d):\n    for ch in d:\n        if ch in 'aeiou':\n            return ''.join(ch)",
        "input": "'a_A_b_B3 '",
        "output": "'a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_881",
        "straightlined_code": "d = 'a_A_b_B3 '\nfor ch in d:\n    if ch in 'aeiou':\n        answer = ''.join(ch)"
    },
    {
        "code": "def f(s, x):\n    return list(map(lambda y: x + y, s))",
        "input": "'0 1 2', '0'",
        "output": "['00', '0 ', '01', '0 ', '02']",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_882",
        "straightlined_code": "s, x = '0 1 2', '0'\nanswer = list(map(lambda y: x + y, s))"
    },
    {
        "code": "def f(p):\n    # check all values are between 0 and 10\n    return all(0 <= v < 10 for v in p.values())",
        "input": "{'A' : 3, 'B' : 9, 'C' : 5}",
        "output": "True",
        "line_execution_counts": {
            "2": 5
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_883",
        "straightlined_code": "p = {'A' : 3, 'B' : 9, 'C' : 5}\n# check all values are between 0 and 10\nanswer = all(0 <= v < 10 for v in p.values())"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda x: not (x % 2), L))",
        "input": "[3, 2, 8, 4, 6]",
        "output": "[2, 8, 4, 6]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_884",
        "straightlined_code": "L = [3, 2, 8, 4, 6]\nanswer = list(filter(lambda x: not (x % 2), L))"
    },
    {
        "code": "def f(l):\n    return [i[2] for i in l]",
        "input": "[(1, 2, 'a'), (3, 4, 'b'), (5, 6, 'c')]",
        "output": "['a', 'b', 'c']",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_886",
        "straightlined_code": "l = [(1, 2, 'a'), (3, 4, 'b'), (5, 6, 'c')]\nanswer = [i[2] for i in l]"
    },
    {
        "code": "def f(string):\n    return [ord(c) for c in string]",
        "input": "'hello'",
        "output": "[104, 101, 108, 108, 111]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_887",
        "straightlined_code": "string = 'hello'\nanswer = [ord(c) for c in string]"
    },
    {
        "code": "def f(s):\n    # find all indices of s in [0, 1, 2, 3]\n    return [i for i in range(4) if s[i] == 'a']",
        "input": "'aabb'",
        "output": "[0, 1]",
        "line_execution_counts": {
            "2": 5
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_888",
        "straightlined_code": "s = 'aabb'\n# find all indices of s in [0, 1, 2, 3]\nanswer = [i for i in range(4) if s[i] == 'a']"
    },
    {
        "code": "def f(aDict):\n    aDict['one'] = 'one'\n    aDict['two'] = 'two'\n    return aDict",
        "input": "{}",
        "output": "{'one': 'one', 'two': 'two'}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_889",
        "straightlined_code": "aDict = {}\naDict['one'] = 'one'\naDict['two'] = 'two'\nanswer = aDict"
    },
    {
        "code": "def f(lst):\n    # Return only the even numbers in the list\n    return [v for v in lst if v % 2 == 0]",
        "input": "[1,2,3,4]",
        "output": "[2, 4]",
        "line_execution_counts": {
            "2": 5
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_890",
        "straightlined_code": "lst = [1,2,3,4]\n# Return only the even numbers in the list\nanswer = [v for v in lst if v % 2 == 0]"
    },
    {
        "code": "def f(a):\n    return [i**2 for i in a]",
        "input": "[1,2,3]",
        "output": "[1, 4, 9]",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_891",
        "straightlined_code": "a = [1,2,3]\nanswer = [i**2 for i in a]"
    },
    {
        "code": "def f(L):\n    # return an array with all elements of L that are less than 5\n    return list(filter(lambda x: x < 5, L))",
        "input": "[1, 2, 4, 6, 1]",
        "output": "[1, 2, 4, 1]",
        "line_execution_counts": {
            "2": 6
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_892",
        "straightlined_code": "L = [1, 2, 4, 6, 1]\n# answer = an array with all elements of L that are less than 5\nanswer = list(filter(lambda x: x < 5, L))"
    },
    {
        "code": "def f(text):\n    for c in text:\n        if c == '!':\n            return False\n    return True",
        "input": "'!'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_893",
        "straightlined_code": "text = '!'\nfor c in text:\n    if c == '!':\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(d):\n    # return a list of keys sorted by their corresponding value\n    return sorted(d.keys(), key=lambda k: d[k])",
        "input": "{1: 1, 2: 2, 3: 3}",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "2": 4
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_894",
        "straightlined_code": "d = {1: 1, 2: 2, 3: 3}\n# answer = a list of keys sorted by their corresponding value\nanswer = sorted(d.keys(), key=lambda k: d[k])"
    },
    {
        "code": "def f(a):\n    return list(map(lambda i: i + 1, a))",
        "input": "[1, 2, 3, 4]",
        "output": "[2, 3, 4, 5]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_895",
        "straightlined_code": "a = [1, 2, 3, 4]\nanswer = list(map(lambda i: i + 1, a))"
    },
    {
        "code": "def f(l):\n    return {x: x for x in l}",
        "input": "[1, 1]",
        "output": "{1: 1}",
        "line_execution_counts": {
            "1": 3
        },
        "ast_size": 15,
        "error": null,
        "id": "new_synth_896",
        "straightlined_code": "l = [1, 1]\nanswer = {x: x for x in l}"
    },
    {
        "code": "def f(d):\n    # return all values\n    return [v for v in d.values()]",
        "input": "{1:1, 2:2, 3:3}",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "2": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_898",
        "straightlined_code": "d = {1:1, 2:2, 3:3}\n# answer = all values\nanswer = [v for v in d.values()]"
    },
    {
        "code": "def f(L):\n    return [x + 1 for x in L]",
        "input": "[1, 2, 3]",
        "output": "[2, 3, 4]",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_899",
        "straightlined_code": "L = [1, 2, 3]\nanswer = [x + 1 for x in L]"
    },
    {
        "code": "def f(L):\n    L.append('c')\n    L.append('d')\n    return L",
        "input": "['a', 'b']",
        "output": "['a', 'b', 'c', 'd']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_901",
        "straightlined_code": "L = ['a', 'b']\nL.append('c')\nL.append('d')\nanswer = L"
    },
    {
        "code": "def f(a):\n    return [i*2 for i in a]",
        "input": "[1,2,3]",
        "output": "[2, 4, 6]",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_903",
        "straightlined_code": "a = [1,2,3]\nanswer = [i*2 for i in a]"
    },
    {
        "code": "def f(n):\n    # find the first positive number in n\n    for i in n:\n        if i > 0:\n            return i\n    return None",
        "input": "[1,2,3,4]",
        "output": "1",
        "line_execution_counts": {
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_904",
        "straightlined_code": "n = [1,2,3,4]\n# find the first positive number in n\nfor i in n:\n    if i > 0:\n        answer = i\nanswer = None"
    },
    {
        "code": "def f(a):\n    # sum all numbers\n    n = 0\n    for i in a:\n        n += i\n    return n",
        "input": "[1,2,3]",
        "output": "6",
        "line_execution_counts": {
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_905",
        "straightlined_code": "a = [1,2,3]\n# sum all numbers\nn = 0\nfor i in a:\n    n += i\nanswer = n"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda x: x > 10, L))",
        "input": "[1, 10, 3, 4, 15]",
        "output": "[15]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_906",
        "straightlined_code": "L = [1, 10, 3, 4, 15]\nanswer = list(filter(lambda x: x > 10, L))"
    },
    {
        "code": "def f(L):\n    # return an array with all elements of L that are not 0\n    return list(filter(lambda x: x != 0, L))",
        "input": "[1, 2, 4, 0, 1, 0, 3, 0]",
        "output": "[1, 2, 4, 1, 3]",
        "line_execution_counts": {
            "2": 9
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_907",
        "straightlined_code": "L = [1, 2, 4, 0, 1, 0, 3, 0]\n# answer = an array with all elements of L that are not 0\nanswer = list(filter(lambda x: x != 0, L))"
    },
    {
        "code": "def f(l):\n    return list(filter(lambda x: x % 2 == 0, l))",
        "input": "[1, 2, 3, 4, 5]",
        "output": "[2, 4]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_908",
        "straightlined_code": "l = [1, 2, 3, 4, 5]\nanswer = list(filter(lambda x: x % 2 == 0, l))"
    },
    {
        "code": "def f(n):\n    # return the first number that is not positive\n    for i in n:\n        if i <= 0:\n            return i\n    return None",
        "input": "[-1,2,3,4]",
        "output": "-1",
        "line_execution_counts": {
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_909",
        "straightlined_code": "n = [-1,2,3,4]\n# answer = the first number that is not positive\nfor i in n:\n    if i <= 0:\n        answer = i\nanswer = None"
    },
    {
        "code": "def f(n):\n    # find the first positive number in n\n    for i in n:\n        if i > 0:\n            return i\n    return None",
        "input": "[1,2,3,4]",
        "output": "1",
        "line_execution_counts": {
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_910",
        "straightlined_code": "n = [1,2,3,4]\n# find the first positive number in n\nfor i in n:\n    if i > 0:\n        answer = i\nanswer = None"
    },
    {
        "code": "def f(a, b):\n    # find a,b\n    for i in a:\n        if i == b:\n            return i\n    return None",
        "input": "[1,2,3], 1",
        "output": "1",
        "line_execution_counts": {
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_911",
        "straightlined_code": "a, b = [1,2,3], 1\n# find a,b\nfor i in a:\n    if i == b:\n        answer = i\nanswer = None"
    },
    {
        "code": "def f(L):\n    # return an array with all elements of L that are less than 5\n    return [x for x in L if x < 5]",
        "input": "[1, 2, 4, 6, 1]",
        "output": "[1, 2, 4, 1]",
        "line_execution_counts": {
            "2": 6
        },
        "ast_size": 18,
        "error": null,
        "id": "new_synth_913",
        "straightlined_code": "L = [1, 2, 4, 6, 1]\n# answer = an array with all elements of L that are less than 5\nanswer = [x for x in L if x < 5]"
    },
    {
        "code": "def f(L):\n    # remove all even numbers from L\n    return [x for x in L if x % 2 == 1]",
        "input": "[1, 2, 4, 6]",
        "output": "[1]",
        "line_execution_counts": {
            "2": 5
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_914",
        "straightlined_code": "L = [1, 2, 4, 6]\n# remove all even numbers from L\nanswer = [x for x in L if x % 2 == 1]"
    },
    {
        "code": "def f(L):\n    res = 0\n    for e in L:\n        res += e\n    return res",
        "input": "[0,1,2]",
        "output": "3",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_915",
        "straightlined_code": "L = [0,1,2]\nres = 0\nfor e in L:\n    res += e\nanswer = res"
    },
    {
        "code": "def f(c):\n    if c == \"a\":\n        return 1\n    if c == \"b\":\n        return 2\n    return 0",
        "input": "'x'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_916",
        "straightlined_code": "c = 'x'\nif c == \"a\":\n    answer = 1\nif c == \"b\":\n    answer = 2\nanswer = 0"
    },
    {
        "code": "def f(s):\n    return sum(c in 'aeiouy' for c in s)",
        "input": "'hello'",
        "output": "2",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_917",
        "straightlined_code": "s = 'hello'\nanswer = sum(c in 'aeiouy' for c in s)"
    },
    {
        "code": "def f(l):\n    # count the number of even numbers in l\n    return sum(1 for n in l if n % 2 == 0)",
        "input": "[1, 2, 3, 4]",
        "output": "2",
        "line_execution_counts": {
            "2": 6
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_918",
        "straightlined_code": "l = [1, 2, 3, 4]\n# count the number of even numbers in l\nanswer = sum(1 for n in l if n % 2 == 0)"
    },
    {
        "code": "def f(a, b):\n    return [x for x in a if x not in b]",
        "input": "[1, 2, 3], [1, 2]",
        "output": "[3]",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_919",
        "straightlined_code": "a, b = [1, 2, 3], [1, 2]\nanswer = [x for x in a if x not in b]"
    },
    {
        "code": "def f(d):\n    return [v + 1 for v in d.values() if v > 10]",
        "input": "{1: 11, 2: 12}",
        "output": "[12, 13]",
        "line_execution_counts": {
            "1": 3
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_920",
        "straightlined_code": "d = {1: 11, 2: 12}\nanswer = [v + 1 for v in d.values() if v > 10]"
    },
    {
        "code": "def f(text):\n    # return the first non-zero number in text\n    for i in text:\n        if i != 0:\n            return i\n    return None",
        "input": "[0,0,0,1,2,3,4]",
        "output": "1",
        "line_execution_counts": {
            "2": 4,
            "3": 4,
            "4": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_921",
        "straightlined_code": "text = [0,0,0,1,2,3,4]\n# answer = the first non-zero number in text\nfor i in text:\n    if i != 0:\n        answer = i\nanswer = None"
    },
    {
        "code": "def f(n):\n    # find the first positive number in n\n    for i in n:\n        if i > 0:\n            return i\n    return None",
        "input": "[-1, 0, -3]",
        "output": "None",
        "line_execution_counts": {
            "2": 4,
            "3": 3,
            "5": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_925",
        "straightlined_code": "n = [-1, 0, -3]\n# find the first positive number in n\nfor i in n:\n    if i > 0:\n        answer = i\nanswer = None"
    },
    {
        "code": "def f(L):\n    # sum the elements of L\n    x = 0\n    for i in L:\n        x += i\n    return x",
        "input": "[1,2,3]",
        "output": "6",
        "line_execution_counts": {
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_926",
        "straightlined_code": "L = [1,2,3]\n# sum the elements of L\nx = 0\nfor i in L:\n    x += i\nanswer = x"
    },
    {
        "code": "def f(L):\n    return [x * 2 for x in L if x != 5]",
        "input": "[1, 2, 5, 4, 5, 1]",
        "output": "[2, 4, 8, 2]",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_928",
        "straightlined_code": "L = [1, 2, 5, 4, 5, 1]\nanswer = [x * 2 for x in L if x != 5]"
    },
    {
        "code": "def f(d):\n    return ''.join(d[i] for i in range(1, 4))",
        "input": "{1: 'a', 2: 'b', 3: 'c'}",
        "output": "'abc'",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_929",
        "straightlined_code": "d = {1: 'a', 2: 'b', 3: 'c'}\nanswer = ''.join(d[i] for i in range(1, 4))"
    },
    {
        "code": "def f(n):\n    return [c for c in str(n)]",
        "input": "123",
        "output": "['1', '2', '3']",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_930",
        "straightlined_code": "n = 123\nanswer = [c for c in str(n)]"
    },
    {
        "code": "def f(l):\n    return [i*i for i in l]",
        "input": "[1,2,3,4,5]",
        "output": "[1, 4, 9, 16, 25]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 17,
        "error": null,
        "id": "new_synth_932",
        "straightlined_code": "l = [1,2,3,4,5]\nanswer = [i*i for i in l]"
    },
    {
        "code": "def f(L):\n    L.append('END')\n    L.insert(0, 'BEGIN')\n    return L",
        "input": "['a', 'b', 'c']",
        "output": "['BEGIN', 'a', 'b', 'c', 'END']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_938",
        "straightlined_code": "L = ['a', 'b', 'c']\nL.append('END')\nL.insert(0, 'BEGIN')\nanswer = L"
    },
    {
        "code": "def f(i):\n    # print an integer, i\n    for c in str(i):\n        print(c, end='')",
        "input": "123",
        "output": "None",
        "line_execution_counts": {
            "2": 4,
            "3": 3
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_940",
        "straightlined_code": "i = 123\n# print an integer, i\nfor c in str(i):\n    print(c, end='')"
    },
    {
        "code": "def f(seq):\n    return list(filter(lambda x: x % 5 == 0, seq))",
        "input": "[5, 10, 15, 20, 25]",
        "output": "[5, 10, 15, 20, 25]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_946",
        "straightlined_code": "seq = [5, 10, 15, 20, 25]\nanswer = list(filter(lambda x: x % 5 == 0, seq))"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 3 != 0]",
        "input": "[1, 3, 5, 6, 9, 12, 18, 21]",
        "output": "[1, 5]",
        "line_execution_counts": {
            "1": 9
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_948",
        "straightlined_code": "seq = [1, 3, 5, 6, 9, 12, 18, 21]\nanswer = [x for x in seq if x % 3 != 0]"
    },
    {
        "code": "def f(seq):\n    return [num % 4 for num in seq]",
        "input": "[2, 3, 4, 5, 6]",
        "output": "[2, 3, 0, 1, 2]",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_949",
        "straightlined_code": "seq = [2, 3, 4, 5, 6]\nanswer = [num % 4 for num in seq]"
    },
    {
        "code": "def f(s):\n    return \"\".join(x for x in s if x in 'aeiou')",
        "input": "'hello'",
        "output": "'eo'",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_950",
        "straightlined_code": "s = 'hello'\nanswer = \"\".join(x for x in s if x in 'aeiou')"
    },
    {
        "code": "def f(s):\n    return [c for c in s if c.isspace()]",
        "input": "'  \\n \\t \\r '",
        "output": "[' ', ' ', '\\n', ' ', '\\t', ' ', '\\r', ' ']",
        "line_execution_counts": {
            "1": 9
        },
        "ast_size": 18,
        "error": null,
        "id": "new_synth_951",
        "straightlined_code": "s = '  \\n \\t \\r '\nanswer = [c for c in s if c.isspace()]"
    },
    {
        "code": "def f(L):\n    L = L[:]\n    L.reverse()\n    return L",
        "input": "['a', 'b', 'c', 'd', 'e', 'f', 'g']",
        "output": "['g', 'f', 'e', 'd', 'c', 'b', 'a']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_953",
        "straightlined_code": "L = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nL = L[:]\nL.reverse()\nanswer = L"
    },
    {
        "code": "def f(L):\n    return [x*x for x in L]",
        "input": "[1, 2, 3, 4]",
        "output": "[1, 4, 9, 16]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 17,
        "error": null,
        "id": "new_synth_955",
        "straightlined_code": "L = [1, 2, 3, 4]\nanswer = [x*x for x in L]"
    },
    {
        "code": "def f(L):\n    return [x + 1 for x in L]",
        "input": "[1, 2, 3]",
        "output": "[2, 3, 4]",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_959",
        "straightlined_code": "L = [1, 2, 3]\nanswer = [x + 1 for x in L]"
    },
    {
        "code": "def f(s):\n    return ''.join([c for c in s if not c in \"aeiouAEIOU\"])",
        "input": "'Hey!'",
        "output": "'Hy!'",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_961",
        "straightlined_code": "s = 'Hey!'\nanswer = ''.join([c for c in s if not c in \"aeiouAEIOU\"])"
    },
    {
        "code": "def f(money):\n    return [x.isascii() for x in money]",
        "input": "'$%&123'",
        "output": "[True, True, True, True, True, True]",
        "line_execution_counts": {
            "1": 7
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_964",
        "straightlined_code": "money = '$%&123'\nanswer = [x.isascii() for x in money]"
    },
    {
        "code": "def f(x):\n    return {k: v for (k, v) in enumerate(x)}",
        "input": "'19273'",
        "output": "{0: '1', 1: '9', 2: '2', 3: '7', 4: '3'}",
        "line_execution_counts": {
            "1": 6
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_965",
        "straightlined_code": "x = '19273'\nanswer = {k: v for (k, v) in enumerate(x)}"
    },
    {
        "code": "def f(s):\n    return ''.join([c for c in s if c.islower()])",
        "input": "'AbCdEfGH'",
        "output": "'bdf'",
        "line_execution_counts": {
            "1": 9
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_966",
        "straightlined_code": "s = 'AbCdEfGH'\nanswer = ''.join([c for c in s if c.islower()])"
    },
    {
        "code": "def f(nums):\n    return [n for n in nums if 4 <= n <= 11]",
        "input": "[0, 5, 7, 12, 2, 8, 6]",
        "output": "[5, 7, 8, 6]",
        "line_execution_counts": {
            "1": 8
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_967",
        "straightlined_code": "nums = [0, 5, 7, 12, 2, 8, 6]\nanswer = [n for n in nums if 4 <= n <= 11]"
    },
    {
        "code": "def f(seq):\n    return list(map(lambda i: i*2, seq))",
        "input": "[1, 2, 3, 4]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 5
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_968",
        "straightlined_code": "seq = [1, 2, 3, 4]\nanswer = list(map(lambda i: i*2, seq))"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x not in [1,2,3,4]]",
        "input": "[4,5,6]",
        "output": "[5, 6]",
        "line_execution_counts": {
            "1": 4
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_974",
        "straightlined_code": "seq = [4,5,6]\nanswer = [x for x in seq if x not in [1,2,3,4]]"
    },
    {
        "code": "def f(sentence):\n    for c in sentence:\n        if c.isascii() is False:\n            return False\n        else:\n            continue\n    return True",
        "input": "'1z1z1'",
        "output": "True",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "5": 5,
            "6": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_56",
        "straightlined_code": "sentence = '1z1z1'\nfor c in sentence:\n    if c.isascii() is False:\n        answer = False\n    else:\n        continue\nanswer = True"
    },
    {
        "code": "def f(text):\n    return not any([c.isupper() for c in text])",
        "input": "'lunabotics'",
        "output": "True",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_96",
        "straightlined_code": "text = 'lunabotics'\nanswer = not any([c.isupper() for c in text])"
    },
    {
        "code": "def f(s):\n    return ''.join((c.casefold() for c in s))",
        "input": "'abcDEFGhIJ'",
        "output": "'abcdefghij'",
        "line_execution_counts": {
            "1": 12
        },
        "ast_size": 20,
        "error": null,
        "id": "sample_103",
        "straightlined_code": "s = 'abcDEFGhIJ'\nanswer = ''.join((c.casefold() for c in s))"
    },
    {
        "code": "def f(li):\n    return [li.count(i) for i in li]",
        "input": "['k', 'x', 'c', 'x', 'x', 'b', 'l', 'f', 'r', 'n', 'g']",
        "output": "[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]",
        "line_execution_counts": {
            "1": 12
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_141",
        "straightlined_code": "li = ['k', 'x', 'c', 'x', 'x', 'b', 'l', 'f', 'r', 'n', 'g']\nanswer = [li.count(i) for i in li]"
    },
    {
        "code": "def f(text):\n    for char in text:\n        if not char.isspace():\n            return False\n    return True",
        "input": "'     i'",
        "output": "False",
        "line_execution_counts": {
            "1": 6,
            "2": 6,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_370",
        "straightlined_code": "text = '     i'\nfor char in text:\n    if not char.isspace():\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(s):\n    return ''.join([c for c in s if c.isspace()])",
        "input": " '\\ngiyixjkvu\\n\\r\\r \\frgjuo'",
        "output": "'\n\n\r\r \f'",
        "line_execution_counts": {
            "1": 21
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_490",
        "straightlined_code": "s =  '\\ngiyixjkvu\\n\\r\\r \\frgjuo'\nanswer = ''.join([c for c in s if c.isspace()])"
    },
    {
        "code": "def f(text):\n    return ''.join(x for x in text if x != ')')",
        "input": "('(((((((((((d))))))))).))))(((((')",
        "output": "'(((((((((((d.((((('",
        "line_execution_counts": {
            "1": 33
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_698",
        "straightlined_code": "text = ('(((((((((((d))))))))).))))(((((')\nanswer = ''.join(x for x in text if x != ')')"
    },
    {
        "code": "def f(stg, tabs):\n    for tab in tabs:\n        stg = stg.rstrip(tab)\n    return stg",
        "input": "'31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')",
        "output": "'31849 let it!31849 pass!'",
        "line_execution_counts": {
            "1": 9,
            "2": 8,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_701",
        "straightlined_code": "stg, tabs = '31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')\nfor tab in tabs:\n    stg = stg.rstrip(tab)\nanswer = stg"
    },
    {
        "code": "def f(input):\n    for char in input:\n        if char.isupper():\n            return False\n    return True",
        "input": "\"a j c n x X k\"",
        "output": "False",
        "line_execution_counts": {
            "1": 11,
            "2": 11,
            "3": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_782",
        "straightlined_code": "input = \"a j c n x X k\"\nfor char in input:\n    if char.isupper():\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(doc):\n    for ch in doc:\n        if ch in 'aeiou':\n            return ch.capitalize()\n    return ''",
        "input": "'jnkp'",
        "output": "''",
        "line_execution_counts": {
            "1": 5,
            "2": 4,
            "4": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_843",
        "straightlined_code": "doc = 'jnkp'\nfor ch in doc:\n    if ch in 'aeiou':\n        answer = ch.capitalize()\nanswer = ''"
    },
    {
        "code": "def f(a):\n    b = 1\n    for c in a:\n        b *= c\n    return b",
        "input": "[1,2,3,4]",
        "output": "24",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_850",
        "straightlined_code": "a = [1,2,3,4]\nb = 1\nfor c in a:\n    b *= c\nanswer = b"
    },
    {
        "code": "def f(s):\n    return [ch for ch in s if ch in 'aeiou']",
        "input": "'aeiouaeiouaeiouaeiou'",
        "output": "['a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u']",
        "line_execution_counts": {
            "1": 21
        },
        "ast_size": 18,
        "error": null,
        "id": "new_synth_854",
        "straightlined_code": "s = 'aeiouaeiouaeiouaeiou'\nanswer = [ch for ch in s if ch in 'aeiou']"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda x: x % 2 == 0, L))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_885",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = list(filter(lambda x: x % 2 == 0, L))"
    },
    {
        "code": "def f(L):\n    for ch in 'aeiou':\n        if ch in L:\n            return False\n    return True",
        "input": "['y', 'w', 'r']",
        "output": "True",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "4": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_897",
        "straightlined_code": "L = ['y', 'w', 'r']\nfor ch in 'aeiou':\n    if ch in L:\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(t):\n    return sum(1 for x in t)",
        "input": "range(10)",
        "output": "10",
        "line_execution_counts": {
            "1": 12
        },
        "ast_size": 15,
        "error": null,
        "id": "new_synth_900",
        "straightlined_code": "t = range(10)\nanswer = sum(1 for x in t)"
    },
    {
        "code": "def f(s):\n    # return a string with only lowercase letters\n    return \"\".join(c for c in s if c.islower())",
        "input": "'Hello123'",
        "output": "'ello'",
        "line_execution_counts": {
            "2": 10
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_912",
        "straightlined_code": "s = 'Hello123'\n# answer = a string with only lowercase letters\nanswer = \"\".join(c for c in s if c.islower())"
    },
    {
        "code": "def f(data):\n    return ''.join([c for c in data if not c in \"aeiouAEIOU\"])",
        "input": "'I am the one'",
        "output": "' m th n'",
        "line_execution_counts": {
            "1": 13
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_922",
        "straightlined_code": "data = 'I am the one'\nanswer = ''.join([c for c in data if not c in \"aeiouAEIOU\"])"
    },
    {
        "code": "def f(text):    \n    # print it\n    for c in text:\n        print(c, end='')",
        "input": "'Hello world!'",
        "output": "None",
        "line_execution_counts": {
            "2": 13,
            "3": 12
        },
        "ast_size": 17,
        "error": null,
        "id": "new_synth_924",
        "straightlined_code": "text = 'Hello world!'\n# print it\nfor c in text:\n    print(c, end='')"
    },
    {
        "code": "def f(m):\n    s = 0\n    for i in m:\n        s += i\n    return s",
        "input": "[1,2,3,4,5,6]",
        "output": "21",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_927",
        "straightlined_code": "m = [1,2,3,4,5,6]\ns = 0\nfor i in m:\n    s += i\nanswer = s"
    },
    {
        "code": "def f(a):\n    b = 1\n    while b < 10:\n        b += 1\n    return b",
        "input": "0",
        "output": "10",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_931",
        "straightlined_code": "a = 0\nb = 1\nwhile b < 10:\n    b += 1\nanswer = b"
    },
    {
        "code": "def f(L):\n    return list(map(lambda i: i % 2 == 0, L))",
        "input": "[1,2,3,4,5,6,7,8,9,10]",
        "output": "[False, True, False, True, False, True, False, True, False, True]",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_933",
        "straightlined_code": "L = [1,2,3,4,5,6,7,8,9,10]\nanswer = list(map(lambda i: i % 2 == 0, L))"
    },
    {
        "code": "def f(t):\n    s = sum(1 for x in t)\n    return s",
        "input": "range(10)",
        "output": "10",
        "line_execution_counts": {
            "1": 12,
            "2": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_934",
        "straightlined_code": "t = range(10)\ns = sum(1 for x in t)\nanswer = s"
    },
    {
        "code": "def f(seq):\n    return list(filter(lambda x: x % 3 == 0, seq))",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[3, 6, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_935",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = list(filter(lambda x: x % 3 == 0, seq))"
    },
    {
        "code": "def f(L):\n    return [x for x in L if x % 2 == 0]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_936",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in L if x % 2 == 0]"
    },
    {
        "code": "def f(li):\n    return [[x for x in s.split()] for s in li]",
        "input": "['This is a text', 'of multiple', 'lines']",
        "output": "[['This', 'is', 'a', 'text'], ['of', 'multiple'], ['lines']]",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_939",
        "straightlined_code": "li = ['This is a text', 'of multiple', 'lines']\nanswer = [[x for x in s.split()] for s in li]"
    },
    {
        "code": "def f(stg, tabs):\n    for tab in tabs:\n        stg = stg.rstrip(tab)\n    return stg",
        "input": "'31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')",
        "output": "'31849 let it!31849 pass!'",
        "line_execution_counts": {
            "1": 9,
            "2": 8,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_941",
        "straightlined_code": "stg, tabs = '31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')\nfor tab in tabs:\n    stg = stg.rstrip(tab)\nanswer = stg"
    },
    {
        "code": "def f(a):\n    b = 1\n    while b < 10:\n        b += 1\n    return b",
        "input": "0",
        "output": "10",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_943",
        "straightlined_code": "a = 0\nb = 1\nwhile b < 10:\n    b += 1\nanswer = b"
    },
    {
        "code": "def f(stg, tabs):\n    for tab in tabs:\n        stg = stg.rstrip(tab)\n    return stg",
        "input": "'31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')",
        "output": "'31849 let it!31849 pass!'",
        "line_execution_counts": {
            "1": 9,
            "2": 8,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_944",
        "straightlined_code": "stg, tabs = '31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')\nfor tab in tabs:\n    stg = stg.rstrip(tab)\nanswer = stg"
    },
    {
        "code": "def f(seq):\n    return [2 * x for x in seq if x % 3 == 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 12, 18]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_945",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [2 * x for x in seq if x % 3 == 0]"
    },
    {
        "code": "def f(a):\n    return list(filter(lambda x: 5 <= x < 12, a))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[5, 6, 7, 8, 9, 10]",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_947",
        "straightlined_code": "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nanswer = list(filter(lambda x: 5 <= x < 12, a))"
    },
    {
        "code": "def f(L):\n    return [x for x in L if not x % 2]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_952",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in L if not x % 2]"
    },
    {
        "code": "def f(L):\n    return [x for x in L if not x % 2]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_954",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in L if not x % 2]"
    },
    {
        "code": "def f(L):\n    return [x for x in L if not x % 2]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_956",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in L if not x % 2]"
    },
    {
        "code": "def f(a):\n    b = 1\n    while b < 20:\n        b += 1\n    return b",
        "input": "0",
        "output": "20",
        "line_execution_counts": {
            "1": 1,
            "2": 20,
            "3": 19,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_957",
        "straightlined_code": "a = 0\nb = 1\nwhile b < 20:\n    b += 1\nanswer = b"
    },
    {
        "code": "def f(li):\n    s = 0\n    for c in li:\n        s += c\n    return s",
        "input": "range(10)",
        "output": "45",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 10,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_958",
        "straightlined_code": "li = range(10)\ns = 0\nfor c in li:\n    s += c\nanswer = s"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda i: i % 2 == 0, L))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_962",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = list(filter(lambda i: i % 2 == 0, L))"
    },
    {
        "code": "def f(seq):\n    return [2 * x for x in seq if x % 3 == 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 12, 18]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_963",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [2 * x for x in seq if x % 3 == 0]"
    },
    {
        "code": "def f(li):\n    return [i for i in li if i % 2 == 0]",
        "input": "range(10)",
        "output": "[0, 2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_969",
        "straightlined_code": "li = range(10)\nanswer = [i for i in li if i % 2 == 0]"
    },
    {
        "code": "def f(seq):\n    return [x * 2 for x in seq if x % 2 == 1]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 18, 2, 10, 14]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_970",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [x * 2 for x in seq if x % 2 == 1]"
    },
    {
        "code": "def f(seq):\n    return [2 * x for x in seq if x % 3 == 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 12, 18]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_971",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [2 * x for x in seq if x % 3 == 0]"
    },
    {
        "code": "def f(seq):\n    return list(filter(lambda x: x % 2 == 0, seq))",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 2, 4, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_972",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = list(filter(lambda x: x % 2 == 0, seq))"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda i: i % 7 == 0, L))",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[7]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_973",
        "straightlined_code": "L = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = list(filter(lambda i: i % 7 == 0, L))"
    },
    {
        "code": "def f(data):\n    return ''.join([c for c in data if not c in \"aeiou\"])",
        "input": "'hello world!'",
        "output": "'hll wrld!'",
        "line_execution_counts": {
            "1": 13
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_975",
        "straightlined_code": "data = 'hello world!'\nanswer = ''.join([c for c in data if not c in \"aeiou\"])"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda i: i % 3 == 0, L))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[3, 6, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_976",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = list(filter(lambda i: i % 3 == 0, L))"
    },
    {
        "code": "def f(li):\n    for n in li:\n        if n % 2 != 0:\n            print(n)",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "None",
        "line_execution_counts": {
            "1": 7,
            "2": 6,
            "3": 3
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_977",
        "straightlined_code": "li = [1, 2, 3, 4, 5, 6]\nfor n in li:\n    if n % 2 != 0:\n        print(n)"
    },
    {
        "code": "def f(s):\n    return [s.index(i) for i in s]",
        "input": "'dYLgdGgVo'",
        "output": "[0, 1, 2, 3, 0, 5, 3, 7, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 18,
        "error": null,
        "id": "new_synth_978",
        "straightlined_code": "s = 'dYLgdGgVo'\nanswer = [s.index(i) for i in s]"
    },
    {
        "code": "def f(seq):\n    return [x * 2 for x in seq if x % 2 == 1]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 18, 2, 10, 14]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_979",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [x * 2 for x in seq if x % 2 == 1]"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 3 != 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[1, 2, 4, 5, 7, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_981",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [x for x in seq if x % 3 != 0]"
    },
    {
        "code": "def f(a):\n    for _ in range(5):\n        a += 1\n    return a",
        "input": "1",
        "output": "6",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "3": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_982",
        "straightlined_code": "a = 1\nfor _ in range(5):\n    a += 1\nanswer = a"
    },
    {
        "code": "def f(a, b):\n    for i in range(a):\n        b.append(a)\n    return b",
        "input": "5, []",
        "output": "[5, 5, 5, 5, 5]",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "3": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_983",
        "straightlined_code": "a, b = 5, []\nfor i in range(a):\n    b.append(a)\nanswer = b"
    },
    {
        "code": "def f(L):\n    return [x for x in L if x in [1, 3, 5, 7]]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[3, 1, 5, 7]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_984",
        "straightlined_code": "L = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [x for x in L if x in [1, 3, 5, 7]]"
    },
    {
        "code": "def f(stg, tabs):\n    for tab in tabs:\n        stg = stg.replace(tab, '')\n    return stg",
        "input": "'31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')",
        "output": "'4letit!4pass!'",
        "line_execution_counts": {
            "1": 9,
            "2": 8,
            "3": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_985",
        "straightlined_code": "stg, tabs = '31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')\nfor tab in tabs:\n    stg = stg.replace(tab, '')\nanswer = stg"
    },
    {
        "code": "def f(a):\n    for i in a:\n        print(i)",
        "input": "'Hello world!'",
        "output": "None",
        "line_execution_counts": {
            "1": 13,
            "2": 12
        },
        "ast_size": 15,
        "error": null,
        "id": "new_synth_986",
        "straightlined_code": "a = 'Hello world!'\nfor i in a:\n    print(i)"
    },
    {
        "code": "def f(text):\n    for c in text:\n        if not c.isalnum():\n            return False\n    return True",
        "input": "'abc012def'",
        "output": "True",
        "line_execution_counts": {
            "1": 10,
            "2": 9,
            "4": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_987",
        "straightlined_code": "text = 'abc012def'\nfor c in text:\n    if not c.isalnum():\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(seq):\n    return [2 * x for x in seq if x % 3 == 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 12, 18]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_988",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [2 * x for x in seq if x % 3 == 0]"
    },
    {
        "code": "def f(seq):\n    return [i for i in seq if i % 3 == 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[3, 6, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_989",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [i for i in seq if i % 3 == 0]"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda i: i % 2 == 0, L))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_992",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = list(filter(lambda i: i % 2 == 0, L))"
    },
    {
        "code": "def f(a):\n    for i in a:\n        print(i)",
        "input": "'Hello world!'",
        "output": "None",
        "line_execution_counts": {
            "1": 13,
            "2": 12
        },
        "ast_size": 15,
        "error": null,
        "id": "new_synth_993",
        "straightlined_code": "a = 'Hello world!'\nfor i in a:\n    print(i)"
    },
    {
        "code": "def f(s):\n    return list(filter(lambda c: c in 'aeiou', s))",
        "input": "'Hey look Words!'",
        "output": "['e', 'o', 'o', 'o']",
        "line_execution_counts": {
            "1": 16
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_994",
        "straightlined_code": "s = 'Hey look Words!'\nanswer = list(filter(lambda c: c in 'aeiou', s))"
    },
    {
        "code": "def f(x, y):\n    for i in range(y):\n        x += i\n    return x",
        "input": "1, 5",
        "output": "11",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "3": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_995",
        "straightlined_code": "x, y = 1, 5\nfor i in range(y):\n    x += i\nanswer = x"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda i: i % 7 == 0, L))",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[7]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_997",
        "straightlined_code": "L = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = list(filter(lambda i: i % 7 == 0, L))"
    },
    {
        "code": "def f(a, b):\n    for _ in range(a):\n        b += 1\n    return b",
        "input": "10, 1",
        "output": "11",
        "line_execution_counts": {
            "1": 11,
            "2": 10,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_998",
        "straightlined_code": "a, b = 10, 1\nfor _ in range(a):\n    b += 1\nanswer = b"
    },
    {
        "code": "def f(a, b, c):\n    for i in range(a):\n        b += c\n    return b",
        "input": "10, 1, 2",
        "output": "21",
        "line_execution_counts": {
            "1": 11,
            "2": 10,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_1002",
        "straightlined_code": "a, b, c = 10, 1, 2\nfor i in range(a):\n    b += c\nanswer = b"
    },
    {
        "code": "def f(a, b):\n    for i in range(a, b):\n        print(i)",
        "input": "2, 10",
        "output": "None",
        "line_execution_counts": {
            "1": 9,
            "2": 8
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1003",
        "straightlined_code": "a, b = 2, 10\nfor i in range(a, b):\n    print(i)"
    },
    {
        "code": "def f(L):\n    return [i for i in L if 4 < i < 7]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[5, 6]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_1004",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [i for i in L if 4 < i < 7]"
    },
    {
        "code": "def f(a):\n    return list(filter(lambda x: x >= 0, a))",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1005",
        "straightlined_code": "a = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = list(filter(lambda x: x >= 0, a))"
    },
    {
        "code": "def f(li):\n    return len([x for x in li if x % 2 == 0])",
        "input": "range(10)",
        "output": "5",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1006",
        "straightlined_code": "li = range(10)\nanswer = len([x for x in li if x % 2 == 0])"
    },
    {
        "code": "def f(L):\n    return [x for x in L if x % 2]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[1, 3, 5, 7, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 18,
        "error": null,
        "id": "new_synth_1007",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in L if x % 2]"
    },
    {
        "code": "def f(a, b, c):\n    for i in range(a):\n        b += c\n    return b",
        "input": "10, 1, 2",
        "output": "21",
        "line_execution_counts": {
            "1": 11,
            "2": 10,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_1008",
        "straightlined_code": "a, b, c = 10, 1, 2\nfor i in range(a):\n    b += c\nanswer = b"
    },
    {
        "code": "def f(seq):\n    return list(filter(lambda x: x % 2 != 0, seq))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[1, 3, 5, 7, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1011",
        "straightlined_code": "seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = list(filter(lambda x: x % 2 != 0, seq))"
    },
    {
        "code": "def f(a):\n    return sum(x*x for x in a)",
        "input": "range(10)",
        "output": "285",
        "line_execution_counts": {
            "1": 12
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_1012",
        "straightlined_code": "a = range(10)\nanswer = sum(x*x for x in a)"
    },
    {
        "code": "def f(seq):\n    return sum(x % 2 for x in seq)",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "5",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_1013",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = sum(x % 2 for x in seq)"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 2 == 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 2, 4, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1014",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [x for x in seq if x % 2 == 0]"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 3 == 0]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[3, 6, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1015",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [x for x in seq if x % 3 == 0]"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda i: i % 2 == 0, L))",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[6, 2, 4, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1016",
        "straightlined_code": "L = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = list(filter(lambda i: i % 2 == 0, L))"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda i: not i % 5, L))",
        "input": "[1,2,3,4,5,6,7,8,9,10]",
        "output": "[5, 10]",
        "line_execution_counts": {
            "1": 11
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_1017",
        "straightlined_code": "L = [1,2,3,4,5,6,7,8,9,10]\nanswer = list(filter(lambda i: not i % 5, L))"
    },
    {
        "code": "def f(stg, tabs):\n    for tab in tabs:\n        stg = stg.replace(tab, '')\n    return stg",
        "input": "'31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')",
        "output": "'4letit!4pass!'",
        "line_execution_counts": {
            "1": 9,
            "2": 8,
            "3": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1018",
        "straightlined_code": "stg, tabs = '31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')\nfor tab in tabs:\n    stg = stg.replace(tab, '')\nanswer = stg"
    },
    {
        "code": "def f(seq):\n    return [e for e in seq if seq.count(e) == 1]",
        "input": "[1, 2, 3, 2, 1, 1, 1, 2, 3, 3, 2, 1, 1, 2]",
        "output": "[]",
        "line_execution_counts": {
            "1": 15
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_1019",
        "straightlined_code": "seq = [1, 2, 3, 2, 1, 1, 1, 2, 3, 3, 2, 1, 1, 2]\nanswer = [e for e in seq if seq.count(e) == 1]"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 2 == 0]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1020",
        "straightlined_code": "seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in seq if x % 2 == 0]"
    },
    {
        "code": "def f(L):\n    return list(filter(lambda x: x % 2 == 0, L))",
        "input": "[1,2,3,4,5,6,7,8,9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1021",
        "straightlined_code": "L = [1,2,3,4,5,6,7,8,9]\nanswer = list(filter(lambda x: x % 2 == 0, L))"
    },
    {
        "code": "def f(seq):\n    return list(filter(lambda x: x % 2 == 0, seq))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1022",
        "straightlined_code": "seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = list(filter(lambda x: x % 2 == 0, seq))"
    },
    {
        "code": "def f(seq):\n    return [(i, el) for i, el in enumerate(seq)]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[(0, 3), (1, 6), (2, 9), (3, 1), (4, 2), (5, 4), (6, 5), (7, 7), (8, 8)]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1023",
        "straightlined_code": "seq = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [(i, el) for i, el in enumerate(seq)]"
    },
    {
        "code": "def f(seq):\n    return sorted(seq, key=lambda x: x % 2)",
        "input": "[1, 2, 3, 2, 1, 1, 1, 2, 3, 3, 2, 1, 1, 2]",
        "output": "[2, 2, 2, 2, 2, 1, 3, 1, 1, 1, 3, 3, 1, 1]",
        "line_execution_counts": {
            "1": 15
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_1024",
        "straightlined_code": "seq = [1, 2, 3, 2, 1, 1, 1, 2, 3, 3, 2, 1, 1, 2]\nanswer = sorted(seq, key=lambda x: x % 2)"
    },
    {
        "code": "def f(s):\n    return ''.join([c for c in s if c.isalnum()])",
        "input": "'T0s.is&*aT3xt!'",
        "output": "'T0sisaT3xt'",
        "line_execution_counts": {
            "1": 15
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_1025",
        "straightlined_code": "s = 'T0s.is&*aT3xt!'\nanswer = ''.join([c for c in s if c.isalnum()])"
    },
    {
        "code": "def f(li):\n    s = 0\n    for e in li:\n        s += e\n    return s",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "45",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_1026",
        "straightlined_code": "li = [3, 6, 9, 1, 2, 4, 5, 7, 8]\ns = 0\nfor e in li:\n    s += e\nanswer = s"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 2 == 0]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1027",
        "straightlined_code": "seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in seq if x % 2 == 0]"
    },
    {
        "code": "def f(L):\n    return [x for x in L if 0 <= x <= 100]",
        "input": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "output": "[3, 6, 9, 1, 2, 4, 5, 7, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_1028",
        "straightlined_code": "L = [3, 6, 9, 1, 2, 4, 5, 7, 8]\nanswer = [x for x in L if 0 <= x <= 100]"
    },
    {
        "code": "def f(a):\n    return list(filter(lambda x: x > 5, a))",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[6, 7, 8, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1029",
        "straightlined_code": "a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = list(filter(lambda x: x > 5, a))"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 3 != 0]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[1, 2, 4, 5, 7, 8]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1030",
        "straightlined_code": "seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in seq if x % 3 != 0]"
    },
    {
        "code": "def f(x, y, z):\n    for i in range(z):\n        x += y\n    return x",
        "input": "2, 5, 10",
        "output": "52",
        "line_execution_counts": {
            "1": 11,
            "2": 10,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_1031",
        "straightlined_code": "x, y, z = 2, 5, 10\nfor i in range(z):\n    x += y\nanswer = x"
    },
    {
        "code": "def f(a, b):\n    return [x for x in a if x != b]",
        "input": "'abcabcabc', 'c'",
        "output": "['a', 'b', 'a', 'b', 'a', 'b']",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 20,
        "error": null,
        "id": "new_synth_1032",
        "straightlined_code": "a, b = 'abcabcabc', 'c'\nanswer = [x for x in a if x != b]"
    },
    {
        "code": "def f(seq):\n    return list(filter(lambda x: x % 3 == 0, seq))",
        "input": "range(30)",
        "output": "[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]",
        "line_execution_counts": {
            "1": 31
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1033",
        "straightlined_code": "seq = range(30)\nanswer = list(filter(lambda x: x % 3 == 0, seq))"
    },
    {
        "code": "def f(a, b):\n    for i in range(b):\n        a.append(b)\n    return a",
        "input": "[], 5",
        "output": "[5, 5, 5, 5, 5]",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "3": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1034",
        "straightlined_code": "a, b = [], 5\nfor i in range(b):\n    a.append(b)\nanswer = a"
    },
    {
        "code": "def f(x, y):\n    for i in range(x):\n        y -= 1\n    return y",
        "input": "5, 1",
        "output": "-4",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1035",
        "straightlined_code": "x, y = 5, 1\nfor i in range(x):\n    y -= 1\nanswer = y"
    },
    {
        "code": "def f(seq):\n    return [x for x in seq if x % 2 != 0]",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[1, 3, 5, 7, 9]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_1036",
        "straightlined_code": "seq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nanswer = [x for x in seq if x % 2 != 0]"
    },
    {
        "code": "def f(l):\n    return [item for item in l if item > 0]",
        "input": "[-1, 0, 1, 2, 3, 4, 5, 6, 7]",
        "output": "[1, 2, 3, 4, 5, 6, 7]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 18,
        "error": null,
        "id": "new_synth_1037",
        "straightlined_code": "l = [-1, 0, 1, 2, 3, 4, 5, 6, 7]\nanswer = [item for item in l if item > 0]"
    },
    {
        "code": "def f(text):\n    return ''.join(x for x in text if x not in '()')",
        "input": "('(((((((((((d))))))))).))))(((((')",
        "output": "'d.'",
        "line_execution_counts": {
            "1": 33
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_1038",
        "straightlined_code": "text = ('(((((((((((d))))))))).))))(((((')\nanswer = ''.join(x for x in text if x not in '()')"
    },
    {
        "code": "def f(seq, pred):\n    return [x for x in seq if pred(x)]",
        "input": "[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], lambda x: x % 2 != 0",
        "output": "[3, 1, 1, 5, 9, 5, 3, 5]",
        "line_execution_counts": {
            "1": 12
        },
        "ast_size": 19,
        "error": null,
        "id": "new_synth_1039",
        "straightlined_code": "seq, pred = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], lambda x: x % 2 != 0\nanswer = [x for x in seq if pred(x)]"
    },
    {
        "code": "def f(n):\n    r = 1\n    for _ in range(n):\n        r *= 3\n    return r",
        "input": "5",
        "output": "243",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_1040",
        "straightlined_code": "n = 5\nr = 1\nfor _ in range(n):\n    r *= 3\nanswer = r"
    },
    {
        "code": "def f(a):\n    b = 1\n    while b < 10:\n        b += 1\n    return b",
        "input": "0",
        "output": "10",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_1042",
        "straightlined_code": "a = 0\nb = 1\nwhile b < 10:\n    b += 1\nanswer = b"
    },
    {
        "code": "def f(li):\n    return [y for x in li for y in x]",
        "input": "[[1, 2], [3, 4], [5, 6]]",
        "output": "[1, 2, 3, 4, 5, 6]",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 18,
        "error": null,
        "id": "new_synth_1043",
        "straightlined_code": "li = [[1, 2], [3, 4], [5, 6]]\nanswer = [y for x in li for y in x]"
    },
    {
        "code": "def f(s):\n    for ch in s:\n        if ch != s[0]:\n            return 'no'\n    return 'yes'",
        "input": "'xxxxx'",
        "output": "'yes'",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "4": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "new_synth_1060",
        "straightlined_code": "s = 'xxxxx'\nfor ch in s:\n    if ch != s[0]:\n        answer = 'no'\nanswer = 'yes'"
    },
    {
        "code": "def f(string, encryption):\n    if encryption == 0:\n        return string\n    else:\n        return string.upper().encode('rot13')",
        "input": "'UppEr', 0",
        "output": "'UppEr'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_8",
        "straightlined_code": "string, encryption = 'UppEr', 0\nif encryption == 0:\n    answer = string\nelse:\n    answer = string.upper().encode('rot13')"
    },
    {
        "code": "def f(text, wrong, right):\n    new_text = text.replace(wrong, right)\n    return new_text.upper()",
        "input": "\"zn kgd jw lnt\", \"h\", \"u\"",
        "output": "'ZN KGD JW LNT'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_15",
        "straightlined_code": "text, wrong, right = \"zn kgd jw lnt\", \"h\", \"u\"\nnew_text = text.replace(wrong, right)\nanswer = new_text.upper()"
    },
    {
        "code": "def f(text):\n    return text.find(\",\")",
        "input": "\"There are, no, commas, in this text\"",
        "output": "9",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 11,
        "error": null,
        "id": "sample_17",
        "straightlined_code": "text = \"There are, no, commas, in this text\"\nanswer = text.find(\",\")"
    },
    {
        "code": "def f(nums, i):\n    nums.pop(i)\n    return nums",
        "input": "[35, 45, 3, 61, 39, 27, 47], 0",
        "output": "[45, 3, 61, 39, 27, 47]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_24",
        "straightlined_code": "nums, i = [35, 45, 3, 61, 39, 27, 47], 0\nnums.pop(i)\nanswer = nums"
    },
    {
        "code": "def f(text, chars):\n    return text.rstrip(chars) if text else text",
        "input": "'ha', ''",
        "output": "'ha'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_36",
        "straightlined_code": "text, chars = 'ha', ''\nanswer = text.rstrip(chars) if text else text"
    },
    {
        "code": "def f(string):\n    return string.title().replace(' ', '')",
        "input": "'1oE-err bzz-bmm'",
        "output": "'1Oe-ErrBzz-Bmm'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "sample_38",
        "straightlined_code": "string = '1oE-err bzz-bmm'\nanswer = string.title().replace(' ', '')"
    },
    {
        "code": "def f(array, elem):\n    if elem in array:\n        return array.index(elem)\n    return -1",
        "input": "[6, 2, 7, 1], 6",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_39",
        "straightlined_code": "array, elem = [6, 2, 7, 1], 6\nif elem in array:\n    answer = array.index(elem)\nanswer = -1"
    },
    {
        "code": "def f(text):\n    return text.ljust(len(text) + 1, \"#\")",
        "input": "\"the cow goes moo\"",
        "output": "'the cow goes moo#'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_40",
        "straightlined_code": "text = \"the cow goes moo\"\nanswer = text.ljust(len(text) + 1, \"#\")"
    },
    {
        "code": "def f(l, c):\n    return c.join(l)",
        "input": "['many', 'letters', 'asvsz', 'hello', 'man'], ''",
        "output": "'manylettersasvszhelloman'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_46",
        "straightlined_code": "l, c = ['many', 'letters', 'asvsz', 'hello', 'man'], ''\nanswer = c.join(l)"
    },
    {
        "code": "def f(row):\n    return (row.count('1'), row.count('0'))",
        "input": "\"100010010\"",
        "output": "(3, 6)",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_73",
        "straightlined_code": "row = \"100010010\"\nanswer = (row.count('1'), row.count('0'))"
    },
    {
        "code": "def f(lst, i, n):\n    lst.insert(i, n)\n    return lst",
        "input": "[44, 34, 23, 82, 24, 11, 63, 99], 4, 15",
        "output": "[44, 34, 23, 82, 15, 24, 11, 63, 99]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_74",
        "straightlined_code": "lst, i, n = [44, 34, 23, 82, 24, 11, 63, 99], 4, 15\nlst.insert(i, n)\nanswer = lst"
    },
    {
        "code": "def f(s):\n    return ''.join(reversed(s.rstrip()))",
        "input": "'ab        '",
        "output": "'ba'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_80",
        "straightlined_code": "s = 'ab        '\nanswer = ''.join(reversed(s.rstrip()))"
    },
    {
        "code": "def f(a, b, c, d):\n    return a and b or c and d",
        "input": "'CJU', 'BFS', 'WBYDZPVES', 'Y'",
        "output": "'BFS'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_82",
        "straightlined_code": "a, b, c, d = 'CJU', 'BFS', 'WBYDZPVES', 'Y'\nanswer = a and b or c and d"
    },
    {
        "code": "def f(nums):\n    nums.reverse()\n    return ''.join(map(str, nums))",
        "input": "[-1, 9, 3, 1, -2]",
        "output": "'-2139-1'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_87",
        "straightlined_code": "nums = [-1, 9, 3, 1, -2]\nnums.reverse()\nanswer = ''.join(map(str, nums))"
    },
    {
        "code": "def f(s):\n    d = dict.fromkeys(s, 0)\n    return list(d.keys())",
        "input": "\"12ab23xy\"",
        "output": "['1', '2', 'a', 'b', '3', 'x', 'y']",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_91",
        "straightlined_code": "s = \"12ab23xy\"\nd = dict.fromkeys(s, 0)\nanswer = list(d.keys())"
    },
    {
        "code": "def f(text):\n    return text.isascii()",
        "input": "'wW\uc758IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct'",
        "output": "False",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 10,
        "error": null,
        "id": "sample_92",
        "straightlined_code": "text = 'wW\uc758IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct'\nanswer = text.isascii()"
    },
    {
        "code": "def f(a, b):\n    return {**a, **b}",
        "input": "{'w': 5, 'wi': 10}, {'w': 3}",
        "output": "{'w': 3, 'wi': 10}",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 11,
        "error": null,
        "id": "sample_94",
        "straightlined_code": "a, b = {'w': 5, 'wi': 10}, {'w': 3}\nanswer = {**a, **b}"
    },
    {
        "code": "def f(text, sep, num):\n    return '___'.join(text.rsplit(sep, num))",
        "input": "'aa+++bb', '+', 1",
        "output": "'aa++___bb'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "sample_99",
        "straightlined_code": "text, sep, num = 'aa+++bb', '+', 1\nanswer = '___'.join(text.rsplit(sep, num))"
    },
    {
        "code": "def f(array, i_num, elem):\n    array.insert(i_num, elem)\n    return array",
        "input": "[ -4,   1,  0], 1, 4",
        "output": "[-4, 4, 1, 0]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_101",
        "straightlined_code": "array, i_num, elem = [ -4,   1,  0], 1, 4\narray.insert(i_num, elem)\nanswer = array"
    },
    {
        "code": "def f(text):\n    if not text.istitle():\n        return text.title()\n    return text.lower()",
        "input": "\"PermissioN is GRANTed\"",
        "output": "'Permission Is Granted'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_105",
        "straightlined_code": "text = \"PermissioN is GRANTed\"\nif not text.istitle():\n    answer = text.title()\nanswer = text.lower()"
    },
    {
        "code": "def f(nums, spot, idx):\n    nums.insert(spot, idx)\n    return nums",
        "input": "[1, 0, 1, 1], 0, 9",
        "output": "[9, 1, 0, 1, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_109",
        "straightlined_code": "nums, spot, idx = [1, 0, 1, 1], 0, 9\nnums.insert(spot, idx)\nanswer = nums"
    },
    {
        "code": "def f(text, sep):\n    return text.rsplit(sep, maxsplit=2)",
        "input": "\"a-.-.b\", \"-.\"",
        "output": "['a', '', 'b']",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "sample_114",
        "straightlined_code": "text, sep = \"a-.-.b\", \"-.\"\nanswer = text.rsplit(sep, maxsplit=2)"
    },
    {
        "code": "def f(string):\n    if string[:4] != 'Nuva':\n        return 'no'\n    else:\n        return string.rstrip()",
        "input": "'Nuva?dlfuyjys'",
        "output": "'Nuva?dlfuyjys'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_122",
        "straightlined_code": "string = 'Nuva?dlfuyjys'\nif string[:4] != 'Nuva':\n    answer = 'no'\nelse:\n    answer = string.rstrip()"
    },
    {
        "code": "def f(text):\n    s = text.splitlines()\n    return len(s)",
        "input": "\"145\\n\\n12fjkjg\"",
        "output": "3",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_127",
        "straightlined_code": "text = \"145\\n\\n12fjkjg\"\ns = text.splitlines()\nanswer = len(s)"
    },
    {
        "code": "def f(a_str, prefix):\n    if a_str.removeprefix(prefix):\n        return a_str\n    else:\n        return prefix + a_str",
        "input": "'abc', 'abcd'",
        "output": "'abc'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_132",
        "straightlined_code": "a_str, prefix = 'abc', 'abcd'\nif a_str.removeprefix(prefix):\n    answer = a_str\nelse:\n    answer = prefix + a_str"
    },
    {
        "code": "def f(x):\n    if x.islower():\n        return x\n    else:\n        return x[::-1]",
        "input": "'ykdfhp'",
        "output": "'ykdfhp'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_142",
        "straightlined_code": "x = 'ykdfhp'\nif x.islower():\n    answer = x\nelse:\n    answer = x[::-1]"
    },
    {
        "code": "def f(s, n):\n    return s.casefold() == n.casefold()",
        "input": "\"daaX\", \"daaX\"",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_143",
        "straightlined_code": "s, n = \"daaX\", \"daaX\"\nanswer = s.casefold() == n.casefold()"
    },
    {
        "code": "def f(lst):\n    lst.sort()\n    return lst[0:3]",
        "input": "[5, 8, 1, 3, 0]",
        "output": "[0, 1, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_164",
        "straightlined_code": "lst = [5, 8, 1, 3, 0]\nlst.sort()\nanswer = lst[0:3]"
    },
    {
        "code": "def f(text, lower, upper):\n    return text[lower:upper].isascii()",
        "input": "'=xtanp|sugv?z', 3, 6",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_165",
        "straightlined_code": "text, lower, upper = '=xtanp|sugv?z', 3, 6\nanswer = text[lower:upper].isascii()"
    },
    {
        "code": "def f(nums, number):\n    return nums.count(number)",
        "input": "[12, 0, 13, 4, 12], 12",
        "output": "2",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_170",
        "straightlined_code": "nums, number = [12, 0, 13, 4, 12], 12\nanswer = nums.count(number)"
    },
    {
        "code": "def f(array, n):\n    return array[n:]",
        "input": "[0, 0, 1, 2, 2, 2, 2], 4",
        "output": "[2, 2, 2]",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_178",
        "straightlined_code": "array, n = [0, 0, 1, 2, 2, 2, 2], 4\nanswer = array[n:]"
    },
    {
        "code": "def f(text):\n    return ' '.join(map(str.lstrip, text.split()))",
        "input": "'pvtso'",
        "output": "'pvtso'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_186",
        "straightlined_code": "text = 'pvtso'\nanswer = ' '.join(map(str.lstrip, text.split()))"
    },
    {
        "code": "def f(string):\n    if string.isupper():\n        return True\n    else:\n        return False",
        "input": "'Ohno'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_191",
        "straightlined_code": "string = 'Ohno'\nif string.isupper():\n    answer = True\nelse:\n    answer = False"
    },
    {
        "code": "def f(matr, insert_loc):\n    matr.insert(insert_loc, [])\n    return matr",
        "input": "[[5, 6, 2, 3], [1, 9, 5, 6]], 0",
        "output": "[[], [5, 6, 2, 3], [1, 9, 5, 6]]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_194",
        "straightlined_code": "matr, insert_loc = [[5, 6, 2, 3], [1, 9, 5, 6]], 0\nmatr.insert(insert_loc, [])\nanswer = matr"
    },
    {
        "code": "def f(d):\n    d.clear()\n    return d",
        "input": "{'a': 3, 'b': -1, 'c': 'Dum'}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_203",
        "straightlined_code": "d = {'a': 3, 'b': -1, 'c': 'Dum'}\nd.clear()\nanswer = d"
    },
    {
        "code": "def f(a):\n    return ' '.join(a.split())",
        "input": "' h e l l o   w o r l d! '",
        "output": "'h e l l o w o r l d!'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_206",
        "straightlined_code": "a = ' h e l l o   w o r l d! '\nanswer = ' '.join(a.split())"
    },
    {
        "code": "def f(prefix, s):\n    return str.removeprefix(prefix, s)",
        "input": "'hymi', 'hymifulhxhzpnyihyf'",
        "output": "'hymi'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "sample_209",
        "straightlined_code": "prefix, s = 'hymi', 'hymifulhxhzpnyihyf'\nanswer = str.removeprefix(prefix, s)"
    },
    {
        "code": "def f(s):\n    return s.replace('(', '[').replace(')', ']')",
        "input": "\"(ac)\"",
        "output": "'[ac]'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_213",
        "straightlined_code": "s = \"(ac)\"\nanswer = s.replace('(', '[').replace(')', ']')"
    },
    {
        "code": "def f(string):\n    if string.isalnum():\n        return \"ascii encoded is allowed for this language\"\n    return \"more than ASCII\"",
        "input": "'Str zahrnuje anglo-ameri\u00e6ske vasi piscina and kuca!'",
        "output": "'more than ASCII'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_217",
        "straightlined_code": "string = 'Str zahrnuje anglo-ameri\u00e6ske vasi piscina and kuca!'\nif string.isalnum():\n    answer = \"ascii encoded is allowed for this language\"\nanswer = \"more than ASCII\""
    },
    {
        "code": "def f(text):\n    if text.islower():\n        return True\n    return False",
        "input": "\"54882\"",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_225",
        "straightlined_code": "text = \"54882\"\nif text.islower():\n    answer = True\nanswer = False"
    },
    {
        "code": "def f(text, splitter):\n    return splitter.join(text.lower().split())",
        "input": "'LlTHH sAfLAPkPhtsWP', '#'",
        "output": "'llthh#saflapkphtswp'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_228",
        "straightlined_code": "text, splitter = 'LlTHH sAfLAPkPhtsWP', '#'\nanswer = splitter.join(text.lower().split())"
    },
    {
        "code": "def f(postcode):\n    return postcode[postcode.index('C'):]",
        "input": "'ED20 CW'",
        "output": "'CW'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_241",
        "straightlined_code": "postcode = 'ED20 CW'\nanswer = postcode[postcode.index('C'):]"
    },
    {
        "code": "def f(text, char):\n    return char.islower() and text.islower()",
        "input": "'abc', 'e'",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_243",
        "straightlined_code": "text, char = 'abc', 'e'\nanswer = char.islower() and text.islower()"
    },
    {
        "code": "def f(s):\n    if s.isalpha():\n        return \"yes\"\n    if s == \"\":\n        return \"str is empty\"\n    return \"no\"",
        "input": "'Boolean'",
        "output": "'yes'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_247",
        "straightlined_code": "s = 'Boolean'\nif s.isalpha():\n    answer = \"yes\"\nif s == \"\":\n    answer = \"str is empty\"\nanswer = \"no\""
    },
    {
        "code": "def f(test_str):\n    s = test_str.replace('a', 'A')\n    return s.replace('e', 'A')",
        "input": "\"papera\"",
        "output": "'pApArA'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_264",
        "straightlined_code": "test_str = \"papera\"\ns = test_str.replace('a', 'A')\nanswer = s.replace('e', 'A')"
    },
    {
        "code": "def f(text, ch):\n    \"\"\"Counting vowels in Pirates' Curse\"\"\"\n    return text.count(ch)",
        "input": "\"This be Pirate's Speak for 'help'!\", ' '",
        "output": "5",
        "line_execution_counts": {
            "2": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "sample_285",
        "straightlined_code": "text, ch = \"This be Pirate's Speak for 'help'!\", ' '\n\"\"\"Counting vowels in Pirates' Curse\"\"\"\nanswer = text.count(ch)"
    },
    {
        "code": "def f(code):\n    return \"{}: {}\".format(code, code.encode())",
        "input": "'148'",
        "output": "'148: b'148''",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_289",
        "straightlined_code": "code = '148'\nanswer = \"{}: {}\".format(code, code.encode())"
    },
    {
        "code": "def f(url):\n    return url.removeprefix('http://www.')",
        "input": "\"https://www.www.ekapusta.com/image/url\"",
        "output": "'https://www.www.ekapusta.com/image/url'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 11,
        "error": null,
        "id": "sample_296",
        "straightlined_code": "url = \"https://www.www.ekapusta.com/image/url\"\nanswer = url.removeprefix('http://www.')"
    },
    {
        "code": "def f(num):\n    if 0 < num < 1000 and num != 6174:\n        return 'Half Life'\n    return 'Not found'",
        "input": "6173",
        "output": "'Not found'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_297",
        "straightlined_code": "num = 6173\nif 0 < num < 1000 and num != 6174:\n    answer = 'Half Life'\nanswer = 'Not found'"
    },
    {
        "code": "def f(string):\n    return string.replace('needles', 'haystacks')",
        "input": "'wdeejjjzsjsjjsxjjneddaddddddefsfd'",
        "output": "'wdeejjjzsjsjjsxjjneddaddddddefsfd'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 12,
        "error": null,
        "id": "sample_302",
        "straightlined_code": "string = 'wdeejjjzsjsjjsxjjneddaddddddefsfd'\nanswer = string.replace('needles', 'haystacks')"
    },
    {
        "code": "def f(str):\n    if str.isalnum():\n        return \"True\"\n    return \"False\"",
        "input": "'777'",
        "output": "'True'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_312",
        "straightlined_code": "str = '777'\nif str.isalnum():\n    answer = \"True\"\nanswer = \"False\""
    },
    {
        "code": "def f(s, l):\n    return s.ljust(l, '=').rpartition('=')[0]",
        "input": "'urecord', 8",
        "output": "'urecord'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_313",
        "straightlined_code": "s, l = 'urecord', 8\nanswer = s.ljust(l, '=').rpartition('=')[0]"
    },
    {
        "code": "def f(challenge):\n    return challenge.casefold().replace('l', ',')",
        "input": "'czywZ'",
        "output": "'czywz'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "sample_315",
        "straightlined_code": "challenge = 'czywZ'\nanswer = challenge.casefold().replace('l', ',')"
    },
    {
        "code": "def f(name):\n    return '| ' + ' '.join(name.split(' ')) + ' |'",
        "input": "'i am your father'",
        "output": "'| i am your father |'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_316",
        "straightlined_code": "name = 'i am your father'\nanswer = '| ' + ' '.join(name.split(' ')) + ' |'"
    },
    {
        "code": "def f(text):\n    return len(text.splitlines())",
        "input": "'ncdsdfdaaa0a1cdscsk*XFd'",
        "output": "1",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_323",
        "straightlined_code": "text = 'ncdsdfdaaa0a1cdscsk*XFd'\nanswer = len(text.splitlines())"
    },
    {
        "code": "def f(a, b):\n    return a.join(b)",
        "input": "'00', ['nU', ' 9 rCSAz', 'w', ' lpA5BO', 'sizL', 'i7rlVr']",
        "output": "'nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_334",
        "straightlined_code": "a, b = '00', ['nU', ' 9 rCSAz', 'w', ' lpA5BO', 'sizL', 'i7rlVr']\nanswer = a.join(b)"
    },
    {
        "code": "def f(s, sep):\n    s += sep\n    return s.rpartition(sep)[0]",
        "input": "'234dsfssdfs333324314', 's'",
        "output": "'234dsfssdfs333324314'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_336",
        "straightlined_code": "s, sep = '234dsfssdfs333324314', 's'\ns += sep\nanswer = s.rpartition(sep)[0]"
    },
    {
        "code": "def f(cart):\n    while len(cart) > 5:\n        cart.popitem()\n    return cart",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_341",
        "straightlined_code": "cart = {}\nwhile len(cart) > 5:\n    cart.popitem()\nanswer = cart"
    },
    {
        "code": "def f(text):\n    return text.count('-') == len(text)",
        "input": "\"---123-4\"",
        "output": "False",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_342",
        "straightlined_code": "text = \"---123-4\"\nanswer = text.count('-') == len(text)"
    },
    {
        "code": "def f(array, elem):\n    array.extend(elem)\n    return array",
        "input": "[[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]",
        "output": "[[1, 2, 3], [1, 2], 1, [1, 2, 3], 3, [2, 1]]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_343",
        "straightlined_code": "array, elem = [[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]\narray.extend(elem)\nanswer = array"
    },
    {
        "code": "def f(dictionary):\n    return dictionary.copy()",
        "input": "{563: 555, 133: None}",
        "output": "{563: 555, 133: None}",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 10,
        "error": null,
        "id": "sample_348",
        "straightlined_code": "dictionary = {563: 555, 133: None}\nanswer = dictionary.copy()"
    },
    {
        "code": "def f(nums):\n    return nums[len(nums)//2]",
        "input": "[-1, -3, -5, -7, 0]",
        "output": "-5",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_352",
        "straightlined_code": "nums = [-1, -3, -5, -7, 0]\nanswer = nums[len(nums)//2]"
    },
    {
        "code": "def f(text, prefix):\n    return text[len(prefix):]",
        "input": "'123x John z', 'z'",
        "output": "'23x John z'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_355",
        "straightlined_code": "text, prefix = '123x John z', 'z'\nanswer = text[len(prefix):]"
    },
    {
        "code": "def f(text):\n    return text.split(':')[0].count('#')",
        "input": "\"#! : #!\"",
        "output": "1",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_361",
        "straightlined_code": "text = \"#! : #!\"\nanswer = text.split(':')[0].count('#')"
    },
    {
        "code": "def f(text):\n    return ', '.join(text.splitlines())",
        "input": "\"BYE\\nNO\\nWAY\"",
        "output": "'BYE, NO, WAY'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_377",
        "straightlined_code": "text = \"BYE\\nNO\\nWAY\"\nanswer = ', '.join(text.splitlines())"
    },
    {
        "code": "def f(text, num_digits):\n    width = max(1, num_digits)\n    return text.zfill(width)",
        "input": "'19', 5",
        "output": "'00019'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_381",
        "straightlined_code": "text, num_digits = '19', 5\nwidth = max(1, num_digits)\nanswer = text.zfill(width)"
    },
    {
        "code": "def f(nums, pos, value):\n    nums.insert(pos, value)\n    return nums",
        "input": "[3, 1, 2], 2, 0",
        "output": "[3, 1, 0, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_387",
        "straightlined_code": "nums, pos, value = [3, 1, 2], 2, 0\nnums.insert(pos, value)\nanswer = nums"
    },
    {
        "code": "def f(text):\n    if not text.strip():\n        return len(text.strip())\n    return None",
        "input": "\" \\t \"",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_390",
        "straightlined_code": "text = \" \\t \"\nif not text.strip():\n    answer = len(text.strip())\nanswer = None"
    },
    {
        "code": "def f(text):\n    if text.upper() == text:\n        return 'ALL UPPERCASE'\n    return text",
        "input": "'Hello Is It MyClass'",
        "output": "'Hello Is It MyClass'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_392",
        "straightlined_code": "text = 'Hello Is It MyClass'\nif text.upper() == text:\n    answer = 'ALL UPPERCASE'\nanswer = text"
    },
    {
        "code": "def f(ls):\n    return dict.fromkeys(ls, 0)",
        "input": "['x', 'u', 'w', 'j', 3, 6]",
        "output": "{'x': 0, 'u': 0, 'w': 0, 'j': 0, 3: 0, 6: 0}",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_397",
        "straightlined_code": "ls = ['x', 'u', 'w', 'j', 3, 6]\nanswer = dict.fromkeys(ls, 0)"
    },
    {
        "code": "def f(m):\n    m.reverse()\n    return m",
        "input": "[-4, 6, 0, 4, -7, 2, -1]",
        "output": "[-1, 2, -7, 4, 0, 6, -4]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_408",
        "straightlined_code": "m = [-4, 6, 0, 4, -7, 2, -1]\nm.reverse()\nanswer = m"
    },
    {
        "code": "def f(text):\n    try:\n        return text.isalpha()\n    except:\n        return False",
        "input": "\"x\"",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_420",
        "straightlined_code": "text = \"x\"\ntry:\n    answer = text.isalpha()\nexcept:\n    answer = False"
    },
    {
        "code": "def f(numbers, elem, idx):\n    numbers.insert(idx, elem)\n    return numbers",
        "input": "[1, 2, 3], 8, 5",
        "output": "[1, 2, 3, 8]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_426",
        "straightlined_code": "numbers, elem, idx = [1, 2, 3], 8, 5\nnumbers.insert(idx, elem)\nanswer = numbers"
    },
    {
        "code": "def f(string):\n    try:\n       return string.rfind('e')\n    except AttributeError:\n        return \"Nuk\"",
        "input": "'eeuseeeoehasa'",
        "output": "8",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_434",
        "straightlined_code": "string = 'eeuseeeoehasa'\ntry:\n   answer = string.rfind('e')\nexcept AttributeError:\n    answer = \"Nuk\""
    },
    {
        "code": "def f(value):\n    parts = value.partition(' ')[::2]\n    return ''.join(parts)",
        "input": "'coscifysu'",
        "output": "'coscifysu'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_439",
        "straightlined_code": "value = 'coscifysu'\nparts = value.partition(' ')[::2]\nanswer = ''.join(parts)"
    },
    {
        "code": "def f(text):\n    if text.isdecimal():\n        return 'yes'\n    else:\n        return 'no'",
        "input": "\"abc\"",
        "output": "'no'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_440",
        "straightlined_code": "text = \"abc\"\nif text.isdecimal():\n    answer = 'yes'\nelse:\n    answer = 'no'"
    },
    {
        "code": "def f(base, k, v):\n    base[k] = v\n    return base",
        "input": "{37: 'forty-five'}, '23', 'what?'",
        "output": "{37: 'forty-five', '23': 'what?'}",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_441",
        "straightlined_code": "base, k, v = {37: 'forty-five'}, '23', 'what?'\nbase[k] = v\nanswer = base"
    },
    {
        "code": "def f(text, suffix):\n    if suffix == '':\n        suffix = None\n    return text.endswith(suffix)",
        "input": "'uMeGndkGh', 'kG'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_448",
        "straightlined_code": "text, suffix = 'uMeGndkGh', 'kG'\nif suffix == '':\n    suffix = None\nanswer = text.endswith(suffix)"
    },
    {
        "code": "def f(string, c):\n    return string.endswith(c)",
        "input": "'wrsch)xjmb8', 'c'",
        "output": "False",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_453",
        "straightlined_code": "string, c = 'wrsch)xjmb8', 'c'\nanswer = string.endswith(c)"
    },
    {
        "code": "def f(s, tab):\n    return s.expandtabs(tab)",
        "input": "\"Join us in Hungary\", 4",
        "output": "'Join us in Hungary'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_456",
        "straightlined_code": "s, tab = \"Join us in Hungary\", 4\nanswer = s.expandtabs(tab)"
    },
    {
        "code": "def f(text, search):\n    return search.startswith(text) or False",
        "input": "'123', '123eenhas0'",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_461",
        "straightlined_code": "text, search = '123', '123eenhas0'\nanswer = search.startswith(text) or False"
    },
    {
        "code": "def f(text):\n    return text.replace('\\\\\"', '\"')",
        "input": "'Because it intrigues them'",
        "output": "'Because it intrigues them'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 12,
        "error": null,
        "id": "sample_482",
        "straightlined_code": "text = 'Because it intrigues them'\nanswer = text.replace('\\\\\"', '\"')"
    },
    {
        "code": "def f(text, char):\n    return ' '.join(text.split(char, len(text)))",
        "input": "'a', 'a'",
        "output": "' '",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_483",
        "straightlined_code": "text, char = 'a', 'a'\nanswer = ' '.join(text.split(char, len(text)))"
    },
    {
        "code": "def f(text, value):\n    return text.removeprefix(value.lower())",
        "input": "'coscifysu', 'cos'",
        "output": "'cifysu'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_489",
        "straightlined_code": "text, value = 'coscifysu', 'cos'\nanswer = text.removeprefix(value.lower())"
    },
    {
        "code": "def f(nums, idx, added):\n    nums[idx:idx] = (added,)\n    return nums",
        "input": "[2, 2, 2, 3, 3], 2, 3",
        "output": "[2, 2, 3, 2, 3, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_498",
        "straightlined_code": "nums, idx, added = [2, 2, 2, 3, 3], 2, 3\nnums[idx:idx] = (added,)\nanswer = nums"
    },
    {
        "code": "def f(text, length, fillchar):\n    size = len(text)\n    return text.center(length, fillchar)",
        "input": "'magazine', 25, '.'",
        "output": "'.........magazine........'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_499",
        "straightlined_code": "text, length, fillchar = 'magazine', 25, '.'\nsize = len(text)\nanswer = text.center(length, fillchar)"
    },
    {
        "code": "def f(name):\n    return '*'.join(name.split(' '))",
        "input": "'Fred Smith'",
        "output": "'Fred*Smith'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "sample_502",
        "straightlined_code": "name = 'Fred Smith'\nanswer = '*'.join(name.split(' '))"
    },
    {
        "code": "def f(values):\n    values.sort()\n    return values",
        "input": "[1, 1, 1, 1]",
        "output": "[1, 1, 1, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_504",
        "straightlined_code": "values = [1, 1, 1, 1]\nvalues.sort()\nanswer = values"
    },
    {
        "code": "def f(text, search):\n    result = text.lower()\n    return result.find(search.lower())",
        "input": "'car hat', 'car'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_507",
        "straightlined_code": "text, search = 'car hat', 'car'\nresult = text.lower()\nanswer = result.find(search.lower())"
    },
    {
        "code": "def f(text):\n    return not text.isdecimal()",
        "input": "'the speed is -36 miles per hour'",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 12,
        "error": null,
        "id": "sample_518",
        "straightlined_code": "text = 'the speed is -36 miles per hour'\nanswer = not text.isdecimal()"
    },
    {
        "code": "def f(text, value):\n    return text.ljust(len(value), \"?\")",
        "input": "\"!?\", \"\"",
        "output": "'!?'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_527",
        "straightlined_code": "text, value = \"!?\", \"\"\nanswer = text.ljust(len(value), \"?\")"
    },
    {
        "code": "def f(text, width):\n    return text[:width].center(width, 'z')",
        "input": "'0574', 9",
        "output": "'zzz0574zz'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_538",
        "straightlined_code": "text, width = '0574', 9\nanswer = text[:width].center(width, 'z')"
    },
    {
        "code": "def f(text):\n    return ''.join(list(text)).isspace()",
        "input": "' \\t  \\u3000'",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_541",
        "straightlined_code": "text = ' \\t  \\u3000'\nanswer = ''.join(list(text)).isspace()"
    },
    {
        "code": "def f(test, sep, maxsplit):\n    try:\n        return test.rsplit(sep, maxsplit)\n    except:\n        return test.rsplit()",
        "input": "'ab cd', 'x', 2",
        "output": "['ab cd']",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_542",
        "straightlined_code": "test, sep, maxsplit = 'ab cd', 'x', 2\ntry:\n    answer = test.rsplit(sep, maxsplit)\nexcept:\n    answer = test.rsplit()"
    },
    {
        "code": "def f(letters):\n    letters_only = letters.strip(\"., !?*\")\n    return \"....\".join(letters_only.split(\" \"))",
        "input": "\"h,e,l,l,o,wo,r,ld,\"",
        "output": "'h,e,l,l,o,wo,r,ld'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_547",
        "straightlined_code": "letters = \"h,e,l,l,o,wo,r,ld,\"\nletters_only = letters.strip(\"., !?*\")\nanswer = \"....\".join(letters_only.split(\" \"))"
    },
    {
        "code": "def f(arr):\n    return list(reversed(arr))",
        "input": "[2, 0, 1, 9999, 3, -5]",
        "output": "[-5, 3, 9999, 1, 0, 2]",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_554",
        "straightlined_code": "arr = [2, 0, 1, 9999, 3, -5]\nanswer = list(reversed(arr))"
    },
    {
        "code": "def f(text):\n    return text.upper() == str(text)",
        "input": "'VTBAEPJSLGAHINS'",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_562",
        "straightlined_code": "text = 'VTBAEPJSLGAHINS'\nanswer = text.upper() == str(text)"
    },
    {
        "code": "def f(input_string, spaces):\n    return input_string.expandtabs(spaces)",
        "input": "r'a\\tb', 4",
        "output": "'a\\tb'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_571",
        "straightlined_code": "input_string, spaces = r'a\\tb', 4\nanswer = input_string.expandtabs(spaces)"
    },
    {
        "code": "def f(string, prefix):\n    if string.startswith(prefix):\n        return string.removeprefix(prefix)\n    return string",
        "input": "\"Vipra\", \"via\"",
        "output": "'Vipra'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_573",
        "straightlined_code": "string, prefix = \"Vipra\", \"via\"\nif string.startswith(prefix):\n    answer = string.removeprefix(prefix)\nanswer = string"
    },
    {
        "code": "def f(txt):\n    return txt.format(*('0'*20,))",
        "input": "\"5123807309875480094949830\"",
        "output": "'5123807309875480094949830'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_584",
        "straightlined_code": "txt = \"5123807309875480094949830\"\nanswer = txt.format(*('0'*20,))"
    },
    {
        "code": "def f(text, char):\n    return text.rindex(char)",
        "input": "\"breakfast\", \"e\"",
        "output": "2",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_586",
        "straightlined_code": "text, char = \"breakfast\", \"e\"\nanswer = text.rindex(char)"
    },
    {
        "code": "def f(nums, fill):\n    ans = dict.fromkeys(nums, fill)\n    return ans",
        "input": "[0, 1, 1, 2], 'abcca'",
        "output": "{0: 'abcca', 1: 'abcca', 2: 'abcca'}",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "sample_587",
        "straightlined_code": "nums, fill = [0, 1, 1, 2], 'abcca'\nans = dict.fromkeys(nums, fill)\nanswer = ans"
    },
    {
        "code": "def f(items, target):\n    if target in items:\n        return items.index(target)\n    return -1",
        "input": "['''1''', '+', '-', '**', '//', '*', '+'], '**'",
        "output": "3",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "sample_588",
        "straightlined_code": "items, target = ['''1''', '+', '-', '**', '//', '*', '+'], '**'\nif target in items:\n    answer = items.index(target)\nanswer = -1"
    },
    {
        "code": "def f(num):\n    num.append(num[-1])\n    return num",
        "input": "[-70, 20, 9, 1]",
        "output": "[-70, 20, 9, 1, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "sample_589",
        "straightlined_code": "num = [-70, 20, 9, 1]\nnum.append(num[-1])\nanswer = num"
    },
    {
        "code": "def f(file):\n    return file.index('\\n')",
        "input": "\"n wez szize lnson tilebi it 504n.\\n\"",
        "output": "33",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 11,
        "error": null,
        "id": "sample_594",
        "straightlined_code": "file = \"n wez szize lnson tilebi it 504n.\\n\"\nanswer = file.index('\\n')"
    },
    {
        "code": "def f(s):\n    return s.upper()",
        "input": "\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"",
        "output": "'JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 10,
        "error": null,
        "id": "sample_597",
        "straightlined_code": "s = \"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"\nanswer = s.upper()"
    },
    {
        "code": "def f(nums, target):\n    cnt = nums.count(target)\n    return cnt * 2",
        "input": "[1, 1], 1",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_602",
        "straightlined_code": "nums, target = [1, 1], 1\ncnt = nums.count(target)\nanswer = cnt * 2"
    },
    {
        "code": "def f(text, start):\n    return text.startswith(start)",
        "input": "\"Hello world\", \"Hello\"",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_604",
        "straightlined_code": "text, start = \"Hello world\", \"Hello\"\nanswer = text.startswith(start)"
    },
    {
        "code": "def f(nums):\n    nums.clear()\n    return \"quack\"",
        "input": "[2, 5, 1, 7, 9, 3]",
        "output": "'quack'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 12,
        "error": null,
        "id": "sample_605",
        "straightlined_code": "nums = [2, 5, 1, 7, 9, 3]\nnums.clear()\nanswer = \"quack\""
    },
    {
        "code": "def f(nums):\n    nums[:] = nums[::-1]\n    return nums",
        "input": "[-6, -2, 1, -3, 0, 1]",
        "output": "[1, 0, -3, 1, -2, -6]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_611",
        "straightlined_code": "nums = [-6, -2, 1, -3, 0, 1]\nnums[:] = nums[::-1]\nanswer = nums"
    },
    {
        "code": "def f(d):\n    return dict(d.items())",
        "input": "{'a': 42, 'b': 1337, 'c': -1, 'd': 5}",
        "output": "{'a': 42, 'b': 1337, 'c': -1, 'd': 5}",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_612",
        "straightlined_code": "d = {'a': 42, 'b': 1337, 'c': -1, 'd': 5}\nanswer = dict(d.items())"
    },
    {
        "code": "def f(text):\n    if text.isascii():\n        return 'ascii'\n    else:\n        return 'non ascii'",
        "input": "\"<<<<\"",
        "output": "'ascii'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_617",
        "straightlined_code": "text = \"<<<<\"\nif text.isascii():\n    answer = 'ascii'\nelse:\n    answer = 'non ascii'"
    },
    {
        "code": "def f(match, fill, n):\n    return fill[:n] + match",
        "input": "'9', '8', 2",
        "output": "'89'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_618",
        "straightlined_code": "match, fill, n = '9', '8', 2\nanswer = fill[:n] + match"
    },
    {
        "code": "def f(title):\n    return title.lower()",
        "input": "'   Rock   Paper   SCISSORS  '",
        "output": "'   rock   paper   scissors  '",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 10,
        "error": null,
        "id": "sample_619",
        "straightlined_code": "title = '   Rock   Paper   SCISSORS  '\nanswer = title.lower()"
    },
    {
        "code": "def f(x):\n    return \" \".join(list(x)[::-1])",
        "input": "\"lert dna ndqmxohi3\"",
        "output": "'3 i h o x m q d n   a n d   t r e l'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 20,
        "error": null,
        "id": "sample_620",
        "straightlined_code": "x = \"lert dna ndqmxohi3\"\nanswer = \" \".join(list(x)[::-1])"
    },
    {
        "code": "def f(text, encoding):\n    try:\n        return text.encode(encoding)\n    except LookupError:\n        return str(LookupError)",
        "input": "'13:45:56', 'shift_jis'",
        "output": "'<class 'LookupError'>'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_621",
        "straightlined_code": "text, encoding = '13:45:56', 'shift_jis'\ntry:\n    answer = text.encode(encoding)\nexcept LookupError:\n    answer = str(LookupError)"
    },
    {
        "code": "def f(parts):\n    return list(dict(parts).values())",
        "input": "[('u', 1), ('s', 7), ('u', -5)]",
        "output": "[-5, 7]",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_627",
        "straightlined_code": "parts = [('u', 1), ('s', 7), ('u', -5)]\nanswer = list(dict(parts).values())"
    },
    {
        "code": "def f(nums, delete):\n    nums.remove(delete)\n    return nums",
        "input": "[4, 5, 3, 6, 1], 5",
        "output": "[4, 3, 6, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_628",
        "straightlined_code": "nums, delete = [4, 5, 3, 6, 1], 5\nnums.remove(delete)\nanswer = nums"
    },
    {
        "code": "def f(number):\n    return True if number.isdecimal() else False",
        "input": "'dummy33;d'",
        "output": "False",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_641",
        "straightlined_code": "number = 'dummy33;d'\nanswer = True if number.isdecimal() else False"
    },
    {
        "code": "def f(text, chunks):\n    return text.splitlines(chunks)",
        "input": "'/alcm@ an)t//eprw)/e!/d\\nujv', 0",
        "output": "['/alcm@ an)t//eprw)/e!/d', 'ujv']",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_647",
        "straightlined_code": "text, chunks = '/alcm@ an)t//eprw)/e!/d\\nujv', 0\nanswer = text.splitlines(chunks)"
    },
    {
        "code": "def f(s):\n    return s.replace('a', '').replace('r', '')",
        "input": "'rpaar'",
        "output": "'p'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_655",
        "straightlined_code": "s = 'rpaar'\nanswer = s.replace('a', '').replace('r', '')"
    },
    {
        "code": "def f(letters, maxsplit):\n    return ''.join(letters.split()[-maxsplit:])",
        "input": "'elrts,SS ee', 6",
        "output": "'elrts,SSee'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_661",
        "straightlined_code": "letters, maxsplit = 'elrts,SS ee', 6\nanswer = ''.join(letters.split()[-maxsplit:])"
    },
    {
        "code": "def f(text):\n    return text[-1] + text[:-1]",
        "input": "'hellomyfriendear'",
        "output": "'rhellomyfriendea'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_668",
        "straightlined_code": "text = 'hellomyfriendear'\nanswer = text[-1] + text[:-1]"
    },
    {
        "code": "def f(nums, sort_count):\n    nums.sort()\n    return nums[:sort_count]",
        "input": "[1, 2, 2, 3, 4, 5], 1",
        "output": "[1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_675",
        "straightlined_code": "nums, sort_count = [1, 2, 2, 3, 4, 5], 1\nnums.sort()\nanswer = nums[:sort_count]"
    },
    {
        "code": "def f(text, tab_size):\n    return text.replace('\\t', ' '*tab_size)",
        "input": "'a', 100",
        "output": "'a'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_676",
        "straightlined_code": "text, tab_size = 'a', 100\nanswer = text.replace('\\t', ' '*tab_size)"
    },
    {
        "code": "def f(text):\n    trans = str.maketrans('\"\\'><', '9833')\n    return text.translate(trans)",
        "input": "\"Transform quotations\\\"\\nnot into numbers.\"",
        "output": "'Transform quotations9\nnot into numbers.'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_684",
        "straightlined_code": "text = \"Transform quotations\\\"\\nnot into numbers.\"\ntrans = str.maketrans('\"\\'><', '9833')\nanswer = text.translate(trans)"
    },
    {
        "code": "def f(array, elem):\n    return array.count(elem) + elem",
        "input": "[1, 1, 1], -2",
        "output": "-2",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 17,
        "error": null,
        "id": "sample_685",
        "straightlined_code": "array, elem = [1, 1, 1], -2\nanswer = array.count(elem) + elem"
    },
    {
        "code": "def f(text):\n    n = int(text.find('8'))\n    return 'x0'*n",
        "input": "\"sa832d83r xd 8g 26a81xdf\"",
        "output": "'x0x0'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_693",
        "straightlined_code": "text = \"sa832d83r xd 8g 26a81xdf\"\nn = int(text.find('8'))\nanswer = 'x0'*n"
    },
    {
        "code": "def f(text):\n    return len(text) - text.count('bot')",
        "input": "\"Where is the bot in this world?\"",
        "output": "30",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 18,
        "error": null,
        "id": "sample_700",
        "straightlined_code": "text = \"Where is the bot in this world?\"\nanswer = len(text) - text.count('bot')"
    },
    {
        "code": "def f(text):\n    return text.replace('\\n', '\\t')",
        "input": "'apples\\n\\t\\npears\\n\\t\\nbananas'",
        "output": "'apples\t\t\tpears\t\t\tbananas'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 12,
        "error": null,
        "id": "sample_711",
        "straightlined_code": "text = 'apples\\n\\t\\npears\\n\\t\\nbananas'\nanswer = text.replace('\\n', '\\t')"
    },
    {
        "code": "def f(text, char):\n    return text.count(char) % 2 != 0",
        "input": "'abababac', 'a'",
        "output": "False",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_715",
        "straightlined_code": "text, char = 'abababac', 'a'\nanswer = text.count(char) % 2 != 0"
    },
    {
        "code": "def f(text, use):\n    return text.replace(use, '')",
        "input": "'Chris requires a ride to the airport on Friday.', 'a'",
        "output": "'Chris requires  ride to the irport on Fridy.'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "sample_731",
        "straightlined_code": "text, use = 'Chris requires a ride to the airport on Friday.', 'a'\nanswer = text.replace(use, '')"
    },
    {
        "code": "def f(s, amount):\n    return (amount - len(s)) * 'z' + s",
        "input": "'abc', 8",
        "output": "'zzzzzabc'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "sample_752",
        "straightlined_code": "s, amount = 'abc', 8\nanswer = (amount - len(s)) * 'z' + s"
    },
    {
        "code": "def f(text, char, replace):\n    return text.replace(char, replace)",
        "input": "'a1a8', '1', 'n2'",
        "output": "'an2a8'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "sample_757",
        "straightlined_code": "text, char, replace = 'a1a8', '1', 'n2'\nanswer = text.replace(char, replace)"
    },
    {
        "code": "def f(nums):\n    if nums[::-1] == nums:\n        return True\n    return False",
        "input": "[0, 3, 6, 2]",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_758",
        "straightlined_code": "nums = [0, 3, 6, 2]\nif nums[::-1] == nums:\n    answer = True\nanswer = False"
    },
    {
        "code": "def f(values, text, markers):\n    return text.rstrip(values).rstrip(markers)",
        "input": "'2Pn', 'yCxpg2C2Pny2', ''",
        "output": "'yCxpg2C2Pny'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_763",
        "straightlined_code": "values, text, markers = '2Pn', 'yCxpg2C2Pny2', ''\nanswer = text.rstrip(values).rstrip(markers)"
    },
    {
        "code": "def f(nums, n):\n    return nums.pop(n)",
        "input": "[-7, 3, 1, -1, -1, 0, 4], 6",
        "output": "4",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 13,
        "error": null,
        "id": "sample_773",
        "straightlined_code": "nums, n = [-7, 3, 1, -1, -1, 0, 4], 6\nanswer = nums.pop(n)"
    },
    {
        "code": "def f(num, name):\n    f_str = 'quiz leader = {}, count = {}'\n    return f_str.format(name, num)",
        "input": "23, 'Cornareti'",
        "output": "'quiz leader = Cornareti, count = 23'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 19,
        "error": null,
        "id": "sample_774",
        "straightlined_code": "num, name = 23, 'Cornareti'\nf_str = 'quiz leader = {}, count = {}'\nanswer = f_str.format(name, num)"
    },
    {
        "code": "def f(prefix, text):\n    if text.startswith(prefix):\n        return text\n    else:\n        return prefix + text",
        "input": "'mjs', 'mjqwmjsqjwisojqwiso'",
        "output": "'mjsmjqwmjsqjwisojqwiso'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 23,
        "error": null,
        "id": "sample_778",
        "straightlined_code": "prefix, text = 'mjs', 'mjqwmjsqjwisojqwiso'\nif text.startswith(prefix):\n    answer = text\nelse:\n    answer = prefix + text"
    },
    {
        "code": "def f(key, value):\n    dict_ = {key: value}\n    return dict.popitem(dict_)",
        "input": "'read', 'Is'",
        "output": "('read', 'Is')",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "sample_784",
        "straightlined_code": "key, value = 'read', 'Is'\ndict_ = {key: value}\nanswer = dict.popitem(dict_)"
    },
    {
        "code": "def f(text):\n    return text.title().replace('Io', 'io')",
        "input": "'Fu,ux zfujijabji pfu.'",
        "output": "'Fu,Ux Zfujijabji Pfu.'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "sample_795",
        "straightlined_code": "text = 'Fu,ux zfujijabji pfu.'\nanswer = text.title().replace('Io', 'io')"
    },
    {
        "code": "def f(values, item):\n    return item in values",
        "input": "{'1': 2, '4': 6}, 7",
        "output": "False",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 12,
        "error": null,
        "id": "new_synth_795",
        "straightlined_code": "values, item = {'1': 2, '4': 6}, 7\nanswer = item in values"
    },
    {
        "code": "def f(in_list, target):\n    in_list.append(target)\n    return in_list.index(target) + 1",
        "input": "[12, 2, 45, 3], 2",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 24,
        "error": null,
        "id": "new_synth_796",
        "straightlined_code": "in_list, target = [12, 2, 45, 3], 2\nin_list.append(target)\nanswer = in_list.index(target) + 1"
    },
    {
        "code": "def f(s):\n    return s[:1].upper() + s[1:]",
        "input": "'h'",
        "output": "'H'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 22,
        "error": null,
        "id": "new_synth_798",
        "straightlined_code": "s = 'h'\nanswer = s[:1].upper() + s[1:]"
    },
    {
        "code": "def f(s):\n    return s.rstrip()[::-1]",
        "input": "'foobar '",
        "output": "'raboof'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_799",
        "straightlined_code": "s = 'foobar '\nanswer = s.rstrip()[::-1]"
    },
    {
        "code": "def f(l):\n    if len(l) > 1:\n        return l[1]\n    else:\n        return 'Not enough elements'",
        "input": "[4, 5]",
        "output": "5",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_800",
        "straightlined_code": "l = [4, 5]\nif len(l) > 1:\n    answer = l[1]\nelse:\n    answer = 'Not enough elements'"
    },
    {
        "code": "def f(text, word):\n    return text.replace(word, '*' * len(word))",
        "input": "'i mmmma nnnnnn, aaaaaaaaaa!', 'mmmma'",
        "output": "'i ***** nnnnnn, aaaaaaaaaa!'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 21,
        "error": null,
        "id": "new_synth_804",
        "straightlined_code": "text, word = 'i mmmma nnnnnn, aaaaaaaaaa!', 'mmmma'\nanswer = text.replace(word, '*' * len(word))"
    },
    {
        "code": "def f(s):\n    if s == '':\n        return None\n    return s",
        "input": "''",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 15,
        "error": null,
        "id": "new_synth_806",
        "straightlined_code": "s = ''\nif s == '':\n    answer = None\nanswer = s"
    },
    {
        "code": "def f(num):\n    return int(str(num) * 2)",
        "input": "123",
        "output": "123123",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 16,
        "error": null,
        "id": "new_synth_807",
        "straightlined_code": "num = 123\nanswer = int(str(num) * 2)"
    },
    {
        "code": "def f(s):\n    return s.split('-')[0]",
        "input": "'133-337-609-735-453'",
        "output": "'133'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 14,
        "error": null,
        "id": "new_synth_809",
        "straightlined_code": "s = '133-337-609-735-453'\nanswer = s.split('-')[0]"
    },
    {
        "code": "def f(a, b, c):\n    result = {}\n    for d in a, b, c:\n        result.update(dict.fromkeys(d))\n    return result",
        "input": "(1, ), (1, ), (1, 2)",
        "output": "{1: None, 2: None}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_1",
        "straightlined_code": "a, b, c = (1, ), (1, ), (1, 2)\nresult = {}\nfor d in a, b, c:\n    result.update(dict.fromkeys(d))\nanswer = result"
    },
    {
        "code": "def f(text):\n    new_text = list(text)\n    for i in '+':\n        if i in new_text:\n            new_text.remove(i)\n    return ''.join(new_text)",
        "input": "'hbtofdeiequ'",
        "output": "'hbtofdeiequ'",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "5": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_2",
        "straightlined_code": "text = 'hbtofdeiequ'\nnew_text = list(text)\nfor i in '+':\n    if i in new_text:\n        new_text.remove(i)\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(text, value):\n    text_list = list(text)\n    text_list.append(value)\n    return ''.join(text_list)",
        "input": "'bcksrut', 'q'",
        "output": "'bcksrutq'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_3",
        "straightlined_code": "text, value = 'bcksrut', 'q'\ntext_list = list(text)\ntext_list.append(value)\nanswer = ''.join(text_list)"
    },
    {
        "code": "def f(text):\n    new_text = ''\n    for ch in text.lower().strip():\n        if ch.isnumeric() or ch in '\u00c4\u00e4\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc':\n            new_text += ch\n    return new_text",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_10",
        "straightlined_code": "text = ''\nnew_text = ''\nfor ch in text.lower().strip():\n    if ch.isnumeric() or ch in '\u00c4\u00e4\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc':\n        new_text += ch\nanswer = new_text"
    },
    {
        "code": "def f(s):\n    arr = list(s.strip())\n    arr.reverse()\n    return ''.join(arr)",
        "input": "'   OOP   '",
        "output": "'POO'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_14",
        "straightlined_code": "s = '   OOP   '\narr = list(s.strip())\narr.reverse()\nanswer = ''.join(arr)"
    },
    {
        "code": "def f(array, elem):\n    k = 0\n    l = array.copy()\n    for i in l:\n        if i > elem:\n            array.insert(k, elem)\n            break\n        k += 1\n    return array",
        "input": "[5, 4, 3, 2, 1, 0], 3",
        "output": "[3, 5, 4, 3, 2, 1, 0]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "8": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_18",
        "straightlined_code": "array, elem = [5, 4, 3, 2, 1, 0], 3\nk = 0\nl = array.copy()\nfor i in l:\n    if i > elem:\n        array.insert(k, elem)\n        break\n    k += 1\nanswer = array"
    },
    {
        "code": "def f(array):\n    n = array.pop()\n    array.extend([n, n])\n    return array",
        "input": "[1, 1, 2, 2]",
        "output": "[1, 1, 2, 2, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_21",
        "straightlined_code": "array = [1, 1, 2, 2]\nn = array.pop()\narray.extend([n, n])\nanswer = array"
    },
    {
        "code": "def f(text, chars):\n    if chars:\n        text = text.rstrip(chars)\n    else:\n        text = text.rstrip(' ')\n    if text == '':\n        return '-'\n    return text",
        "input": "'new-medium-performing-application - XQuery 2.2', '0123456789-'",
        "output": "'new-medium-performing-application - XQuery 2.'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1,
            "7": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_23",
        "straightlined_code": "text, chars = 'new-medium-performing-application - XQuery 2.2', '0123456789-'\nif chars:\n    text = text.rstrip(chars)\nelse:\n    text = text.rstrip(' ')\nif text == '':\n    answer = '-'\nanswer = text"
    },
    {
        "code": "def f(mylist):\n    revl = mylist[:]\n    revl.reverse()\n    mylist.sort(reverse=True)\n    return mylist == revl",
        "input": "[5, 8]",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_28",
        "straightlined_code": "mylist = [5, 8]\nrevl = mylist[:]\nrevl.reverse()\nmylist.sort(reverse=True)\nanswer = mylist == revl"
    },
    {
        "code": "def f(text):\n    nums = list(filter(str.isnumeric, text))\n    assert len(nums) > 0\n    return ''.join(nums)",
        "input": "'-123   \\t+314'",
        "output": "'123314'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_29",
        "straightlined_code": "text = '-123   \\t+314'\nnums = list(filter(str.isnumeric, text))\nassert len(nums) > 0\nanswer = ''.join(nums)"
    },
    {
        "code": "def f(s, sep):\n    reverse = ['*' + e for e in s.split(sep)]\n    return ';'.join(reversed(reverse))",
        "input": "'volume', 'l'",
        "output": "'*ume;*vo'",
        "line_execution_counts": {
            "1": 3,
            "2": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_32",
        "straightlined_code": "s, sep = 'volume', 'l'\nreverse = ['*' + e for e in s.split(sep)]\nanswer = ';'.join(reversed(reverse))"
    },
    {
        "code": "def f(text):\n    text_arr = []\n    for j in range(len(text)):\n        text_arr.append(text[j:])\n    return text_arr",
        "input": "'123'",
        "output": "['123', '23', '3']",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_37",
        "straightlined_code": "text = '123'\ntext_arr = []\nfor j in range(len(text)):\n    text_arr.append(text[j:])\nanswer = text_arr"
    },
    {
        "code": "def f(array, values):\n    array.reverse()\n    for value in values:\n        array.insert(len(array) // 2, value)\n    array.reverse()\n    return array",
        "input": "[58], [21, 92]",
        "output": "[58, 92, 21]",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_41",
        "straightlined_code": "array, values = [58], [21, 92]\narray.reverse()\nfor value in values:\n    array.insert(len(array) // 2, value)\narray.reverse()\nanswer = array"
    },
    {
        "code": "def f(nums):\n    nums.clear()\n    for num in nums:\n        nums.append(num*2)\n    return nums",
        "input": "[4, 3, 2, 1, 2, -1, 4, 2]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_42",
        "straightlined_code": "nums = [4, 3, 2, 1, 2, -1, 4, 2]\nnums.clear()\nfor num in nums:\n    nums.append(num*2)\nanswer = nums"
    },
    {
        "code": "def f(n):\n    for i in str(n):\n        if not i.isdigit():\n            n = -1\n            break\n    return n",
        "input": "\"6 ** 2\"",
        "output": "-1",
        "line_execution_counts": {
            "1": 2,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_43",
        "straightlined_code": "n = \"6 ** 2\"\nfor i in str(n):\n    if not i.isdigit():\n        n = -1\n        break\nanswer = n"
    },
    {
        "code": "def f(lst):\n    lst.clear()\n    lst += [1] * (len(lst) + 1)\n    return lst",
        "input": "['a', 'c', 'v']",
        "output": "[1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_50",
        "straightlined_code": "lst = ['a', 'c', 'v']\nlst.clear()\nlst += [1] * (len(lst) + 1)\nanswer = lst"
    },
    {
        "code": "s = '<' * 10\ndef f(num):\n    if num % 2 == 0:\n        return s\n    else:\n        return num - 1",
        "input": "21",
        "output": "20",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_51",
        "straightlined_code": "num = 21\nif num % 2 == 0:\n    answer = s\nelse:\n    answer = num - 1"
    },
    {
        "code": "def f(text, s, e):\n    sublist = text[s:e]\n    if not sublist:\n        return -1\n    return sublist.index(min(sublist))",
        "input": "'happy', 0, 3",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_54",
        "straightlined_code": "text, s, e = 'happy', 0, 3\nsublist = text[s:e]\nif not sublist:\n    answer = -1\nanswer = sublist.index(min(sublist))"
    },
    {
        "code": "def f(text, prefix):\n    while text.startswith(prefix):\n        text = text[len(prefix):] or text\n    return text",
        "input": "'ndbtdabdahesyehu', 'n'",
        "output": "'dbtdabdahesyehu'",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "3": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_63",
        "straightlined_code": "text, prefix = 'ndbtdabdahesyehu', 'n'\nwhile text.startswith(prefix):\n    text = text[len(prefix):] or text\nanswer = text"
    },
    {
        "code": "def f(num1, num2, num3):\n    nums = [num1, num2, num3]\n    nums.sort()    \n    return f'{nums[0]},{nums[1]},{nums[2]}'",
        "input": "6,8,8",
        "output": "'6,8,8'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_67",
        "straightlined_code": "num1, num2, num3 = 6,8,8\nnums = [num1, num2, num3]\nnums.sort()    \nanswer = f'{nums[0]},{nums[1]},{nums[2]}'"
    },
    {
        "code": "def f(x):\n    a = 0\n    for i in x.split(' '):\n        a += len(i.zfill(len(i)*2))\n    return a",
        "input": "'999893767522480'",
        "output": "30",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_70",
        "straightlined_code": "x = '999893767522480'\na = 0\nfor i in x.split(' '):\n    a += len(i.zfill(len(i)*2))\nanswer = a"
    },
    {
        "code": "def f(d, n):\n    for i in range(n):\n        item = d.popitem()\n        d[item[1]] = item[0]\n    return d",
        "input": "{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1",
        "output": "{1: 2, 3: 4, 5: 6, 7: 8, 10: 9}",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_71",
        "straightlined_code": "d, n = {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1\nfor i in range(n):\n    item = d.popitem()\n    d[item[1]] = item[0]\nanswer = d"
    },
    {
        "code": "def f(text):\n    for c in text:\n        if not c.isnumeric():\n            return False\n    return bool(text)",
        "input": "'99'",
        "output": "True",
        "line_execution_counts": {
            "1": 3,
            "2": 2,
            "4": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "sample_72",
        "straightlined_code": "text = '99'\nfor c in text:\n    if not c.isnumeric():\n        answer = False\nanswer = bool(text)"
    },
    {
        "code": "def f(text):\n    l = text.rpartition('0')\n    if l[2] == '':\n        return '-1:-1'\n    return f'{len(l[0])}:{l[2].find(\"0\") + 1}'",
        "input": "'qq0tt'",
        "output": "'2:0'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_83",
        "straightlined_code": "text = 'qq0tt'\nl = text.rpartition('0')\nif l[2] == '':\n    answer = '-1:-1'\nanswer = f'{len(l[0])}:{l[2].find(\"0\") + 1}'"
    },
    {
        "code": "def f(instagram, imgur, wins):\n    photos = [instagram, imgur]\n    if instagram == imgur:\n        return wins\n    if wins == 1:\n        return photos.pop()\n    else:\n        photos.reverse()\n        return photos.pop()",
        "input": "['sdfs', 'drcr', '2e'], ['sdfs', 'dr2c', 'QWERTY'], 0",
        "output": "['sdfs', 'drcr', '2e']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_86",
        "straightlined_code": "instagram, imgur, wins = ['sdfs', 'drcr', '2e'], ['sdfs', 'dr2c', 'QWERTY'], 0\nphotos = [instagram, imgur]\nif instagram == imgur:\n    answer = wins\nif wins == 1:\n    answer = photos.pop()\nelse:\n    photos.reverse()\n    answer = photos.pop()"
    },
    {
        "code": "def f(char):\n    if char not in 'aeiouAEIOU':\n        return None\n    if char in 'AEIOU':\n        return char.lower()\n    return char.upper()",
        "input": "'o'",
        "output": "'O'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_89",
        "straightlined_code": "char = 'o'\nif char not in 'aeiouAEIOU':\n    answer = None\nif char in 'AEIOU':\n    answer = char.lower()\nanswer = char.upper()"
    },
    {
        "code": "def f(array):\n    return_arr = []\n    for a in array:\n        return_arr.append(a.copy())\n    return return_arr",
        "input": "[[1, 2, 3], [], [1, 2, 3]]",
        "output": "[[1, 2, 3], [], [1, 2, 3]]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_90",
        "straightlined_code": "array = [[1, 2, 3], [], [1, 2, 3]]\nreturn_arr = []\nfor a in array:\n    return_arr.append(a.copy())\nanswer = return_arr"
    },
    {
        "code": "def f(n):\n    length = len(n) + 2\n    revn = list(n)\n    result = ''.join(revn)\n    revn.clear()\n    return result + ('!' * length)",
        "input": "'iq'",
        "output": "'iq!!!!'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_93",
        "straightlined_code": "n = 'iq'\nlength = len(n) + 2\nrevn = list(n)\nresult = ''.join(revn)\nrevn.clear()\nanswer = result + ('!' * length)"
    },
    {
        "code": "def f(zoo):\n    return dict((v, k) for k, v in zoo.items())",
        "input": "{'AAA': 'fr'}",
        "output": "{'fr': 'AAA'}",
        "line_execution_counts": {
            "1": 3
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_95",
        "straightlined_code": "zoo = {'AAA': 'fr'}\nanswer = dict((v, k) for k, v in zoo.items())"
    },
    {
        "code": "def f(lst):\n    lst.clear()\n    for i in lst:\n        if i == 3:\n            return False\n    else:\n        return True",
        "input": "[2, 0]",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "sample_97",
        "straightlined_code": "lst = [2, 0]\nlst.clear()\nfor i in lst:\n    if i == 3:\n        answer = False\nelse:\n    answer = True"
    },
    {
        "code": "def f(d, rm):\n    res = d.copy()\n    for k in rm:\n        if k in res:\n            del res[k]\n    return res",
        "input": "{'1': 'a', 1: 'a', 1: 'b', '1': 'b'}, [1]",
        "output": "{'1': 'b'}",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_100",
        "straightlined_code": "d, rm = {'1': 'a', 1: 'a', 1: 'b', '1': 'b'}, [1]\nres = d.copy()\nfor k in rm:\n    if k in res:\n        del res[k]\nanswer = res"
    },
    {
        "code": "def f(names, winners):\n    ls = [names.index(name) for name in names if name in winners]\n    ls.sort(reverse=True)\n    return ls",
        "input": "['e', 'f', 'j', 'x', 'r', 'k'], ['a', 'v', '2', 'im', 'nb', 'vj', 'z']",
        "output": "[]",
        "line_execution_counts": {
            "1": 7,
            "2": 1,
            "3": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_102",
        "straightlined_code": "names, winners = ['e', 'f', 'j', 'x', 'r', 'k'], ['a', 'v', '2', 'im', 'nb', 'vj', 'z']\nls = [names.index(name) for name in names if name in winners]\nls.sort(reverse=True)\nanswer = ls"
    },
    {
        "code": "def f(d, count):\n    for i in range(count):\n        if d == {}:\n            break\n        d.popitem()\n    return d",
        "input": "{}, 200",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_116",
        "straightlined_code": "d, count = {}, 200\nfor i in range(count):\n    if d == {}:\n        break\n    d.popitem()\nanswer = d"
    },
    {
        "code": "def f(nums, elements):\n    result = []\n    for i in range(len(elements)):\n        result.append(nums.pop())\n    return nums",
        "input": "[7, 1, 2, 6, 0, 2], [9, 0, 3]",
        "output": "[7, 1, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_133",
        "straightlined_code": "nums, elements = [7, 1, 2, 6, 0, 2], [9, 0, 3]\nresult = []\nfor i in range(len(elements)):\n    result.append(nums.pop())\nanswer = nums"
    },
    {
        "code": "def f():\n    d = {\n        'Russia': [('Moscow', 'Russia'), ('Vladivostok', 'Russia')],\n        'Kazakhstan': [('Astana', 'Kazakhstan')],\n    }\n    return list(d.keys())",
        "input": "",
        "output": "['Russia', 'Kazakhstan']",
        "line_execution_counts": {
            "2": 1,
            "3": 1,
            "1": 1,
            "5": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_135",
        "straightlined_code": "d = {\n    'Russia': [('Moscow', 'Russia'), ('Vladivostok', 'Russia')],\n    'Kazakhstan': [('Astana', 'Kazakhstan')],\n}\nanswer = list(d.keys())"
    },
    {
        "code": "def f(text, width):\n    lines = [line.center(width) for line in text.split('\\n')]\n    return '\\n'.join(lines)",
        "input": "\"a\\nbc\\n\\nd\\nef\", 5",
        "output": "'  a  \n  bc \n     \n  d  \n  ef '",
        "line_execution_counts": {
            "1": 6,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_136",
        "straightlined_code": "text, width = \"a\\nbc\\n\\nd\\nef\", 5\nlines = [line.center(width) for line in text.split('\\n')]\nanswer = '\\n'.join(lines)"
    },
    {
        "code": "def f(vectors):\n    sorted_vecs = []\n    for vec in vectors:\n        vec.sort()\n        sorted_vecs.append(vec)\n    return sorted_vecs",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_144",
        "straightlined_code": "vectors = []\nsorted_vecs = []\nfor vec in vectors:\n    vec.sort()\n    sorted_vecs.append(vec)\nanswer = sorted_vecs"
    },
    {
        "code": "def f(price, product):\n    inventory = ['olives', 'key', 'orange']\n    if product not in inventory:\n        return price\n    else:\n        price *=.85\n        inventory.remove(product)\n    return price",
        "input": "8.50, 'grapes'",
        "output": "8.5",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_145",
        "straightlined_code": "price, product = 8.50, 'grapes'\ninventory = ['olives', 'key', 'orange']\nif product not in inventory:\n    answer = price\nelse:\n    price *=.85\n    inventory.remove(product)\nanswer = price"
    },
    {
        "code": "def f(text, space_symbol, size):\n    spaces = ''.join(space_symbol for i in range(size-len(text)))\n    return text + spaces",
        "input": "'w', '))', 7",
        "output": "'w))))))))))))'",
        "line_execution_counts": {
            "1": 8,
            "2": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_163",
        "straightlined_code": "text, space_symbol, size = 'w', '))', 7\nspaces = ''.join(space_symbol for i in range(size-len(text)))\nanswer = text + spaces"
    },
    {
        "code": "def f(graph):\n    new_graph = {}\n    for key, value in graph.items():\n        new_graph[key] = {}\n        for subkey in value:\n            new_graph[key][subkey] = ''\n    return new_graph",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_166",
        "straightlined_code": "graph = {}\nnew_graph = {}\nfor key, value in graph.items():\n    new_graph[key] = {}\n    for subkey in value:\n        new_graph[key][subkey] = ''\nanswer = new_graph"
    },
    {
        "code": "def f(nums):\n    count = len(nums) // 2\n    for _ in range(count):\n        nums.pop(0)\n    return nums",
        "input": "[3, 4, 1, 2, 3]",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_171",
        "straightlined_code": "nums = [3, 4, 1, 2, 3]\ncount = len(nums) // 2\nfor _ in range(count):\n    nums.pop(0)\nanswer = nums"
    },
    {
        "code": "def f(text, suffix):\n    output = text\n    while text.endswith(suffix):\n        output = text[:-len(suffix)]\n        text = output\n    return output",
        "input": "'!klcd!ma:ri', '!'",
        "output": "'!klcd!ma:ri'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_192",
        "straightlined_code": "text, suffix = '!klcd!ma:ri', '!'\noutput = text\nwhile text.endswith(suffix):\n    output = text[:-len(suffix)]\n    text = output\nanswer = output"
    },
    {
        "code": "def f(text):\n    for p in ['acs', 'asp', 'scn']:\n        text = text.removeprefix(p) + ' '\n    return text.removeprefix(' ')[:-1]",
        "input": "'ilfdoirwirmtoibsac'",
        "output": "'ilfdoirwirmtoibsac  '",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "3": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_195",
        "straightlined_code": "text = 'ilfdoirwirmtoibsac'\nfor p in ['acs', 'asp', 'scn']:\n    text = text.removeprefix(p) + ' '\nanswer = text.removeprefix(' ')[:-1]"
    },
    {
        "code": "def f(temp, timeLimit):\n    s = timeLimit // temp\n    e = timeLimit % temp\n    return [f'{e} oC', f'{s} {e}'][s > 1]",
        "input": "1, 1234567890",
        "output": "'1234567890 0'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_197",
        "straightlined_code": "temp, timeLimit = 1, 1234567890\ns = timeLimit // temp\ne = timeLimit % temp\nanswer = [f'{e} oC', f'{s} {e}'][s > 1]"
    },
    {
        "code": "def f(nums):\n    for i in range(len(nums)):\n        if nums[i] % 3 == 0:\n            nums.append(nums[i])\n    return nums",
        "input": "[1, 3]",
        "output": "[1, 3, 3]",
        "line_execution_counts": {
            "1": 3,
            "2": 2,
            "3": 1,
            "4": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_226",
        "straightlined_code": "nums = [1, 3]\nfor i in range(len(nums)):\n    if nums[i] % 3 == 0:\n        nums.append(nums[i])\nanswer = nums"
    },
    {
        "code": "def f(text):\n    text = text.lower()\n    head, tail = text[0], text[1:]\n    return head.upper() + tail",
        "input": "'Manolo'",
        "output": "'Manolo'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_227",
        "straightlined_code": "text = 'Manolo'\ntext = text.lower()\nhead, tail = text[0], text[1:]\nanswer = head.upper() + tail"
    },
    {
        "code": "def f(xs):\n    for idx in reversed(range(-len(xs)-1, -1)):\n        xs.insert(idx, xs.pop(0))\n    return xs",
        "input": "[1, 2, 3]",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "3": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_233",
        "straightlined_code": "xs = [1, 2, 3]\nfor idx in reversed(range(-len(xs)-1, -1)):\n    xs.insert(idx, xs.pop(0))\nanswer = xs"
    },
    {
        "code": "def f(text, froms):\n    text = text.lstrip(froms)\n    text = text.rstrip(froms)\n    return text",
        "input": "'0 t 1cos ', 'st ' + '0\\t\\n  '",
        "output": "'1co'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_239",
        "straightlined_code": "text, froms = '0 t 1cos ', 'st ' + '0\\t\\n  '\ntext = text.lstrip(froms)\ntext = text.rstrip(froms)\nanswer = text"
    },
    {
        "code": "def f(haystack, needle):\n    for i in range(haystack.find(needle), -1, -1):\n        if haystack[i:] == needle:\n            return i\n    return -1",
        "input": "\"345gerghjehg\", \"345\"",
        "output": "-1",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "4": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_246",
        "straightlined_code": "haystack, needle = \"345gerghjehg\", \"345\"\nfor i in range(haystack.find(needle), -1, -1):\n    if haystack[i:] == needle:\n        answer = i\nanswer = -1"
    },
    {
        "code": "def f(a, b):\n    a.sort()\n    b.sort(reverse=True)\n    return a + b",
        "input": "[666], []",
        "output": "[666]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_248",
        "straightlined_code": "a, b = [666], []\na.sort()\nb.sort(reverse=True)\nanswer = a + b"
    },
    {
        "code": "def f(messages):\n    phone_code = \"+353\"\n    result = []\n    for message in messages:\n        message.extend(phone_code)\n        result.append(\";\".join(message))\n    return \". \".join(result)",
        "input": "[['Marie','Nelson','Oscar']]",
        "output": "'Marie;Nelson;Oscar;+;3;5;3'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_251",
        "straightlined_code": "messages = [['Marie','Nelson','Oscar']]\nphone_code = \"+353\"\nresult = []\nfor message in messages:\n    message.extend(phone_code)\n    result.append(\";\".join(message))\nanswer = \". \".join(result)"
    },
    {
        "code": "def f(text, char):\n    if char in text:\n        if not text.startswith(char):\n            text = text.replace(char,'')\n    return text",
        "input": "'\\\\foo', '\\\\'",
        "output": "'\\foo'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_252",
        "straightlined_code": "text, char = '\\\\foo', '\\\\'\nif char in text:\n    if not text.startswith(char):\n        text = text.replace(char,'')\nanswer = text"
    },
    {
        "code": "def f(text, pref):\n    length = len(pref)\n    if pref == text[:length]:\n        return text[length:]\n    return text",
        "input": "'kumwwfv', 'k'",
        "output": "'umwwfv'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_253",
        "straightlined_code": "text, pref = 'kumwwfv', 'k'\nlength = len(pref)\nif pref == text[:length]:\n    answer = text[length:]\nanswer = text"
    },
    {
        "code": "def f(text):\n    ls = []\n    for x in text:\n        ls.append(x.splitlines())\n    return ls",
        "input": "['Hello World\\n\"I am String\"']",
        "output": "[['Hello World', '\"I am String\"']]",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_257",
        "straightlined_code": "text = ['Hello World\\n\"I am String\"']\nls = []\nfor x in text:\n    ls.append(x.splitlines())\nanswer = ls"
    },
    {
        "code": "def f(dic):\n    d = {}\n    for key in dic:\n        d[key] = dic.popitem(last = False)[1]\n    return d",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_270",
        "straightlined_code": "dic = {}\nd = {}\nfor key in dic:\n    d[key] = dic.popitem(last = False)[1]\nanswer = d"
    },
    {
        "code": "def f(text, c):\n    ls = list(text)\n    if c not in text:\n        raise ValueError('Text has no {c}')\n    ls.pop(text.rindex(c))\n    return ''.join(ls)",
        "input": "'uufhl', 'l'",
        "output": "'uufh'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_271",
        "straightlined_code": "text, c = 'uufhl', 'l'\nls = list(text)\nif c not in text:\n    raise ValueError('Text has no {c}')\nls.pop(text.rindex(c))\nanswer = ''.join(ls)"
    },
    {
        "code": "def f(lst, mode):\n    result = [el for el in lst]\n    if mode:\n        result.reverse()\n    return result",
        "input": "[1, 2, 3, 4], 1",
        "output": "[4, 3, 2, 1]",
        "line_execution_counts": {
            "1": 5,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_277",
        "straightlined_code": "lst, mode = [1, 2, 3, 4], 1\nresult = [el for el in lst]\nif mode:\n    result.reverse()\nanswer = result"
    },
    {
        "code": "field = 0\n\ndef f(text):\n    global g, field\n    field = text.replace(' ', '')\n    g = text.replace('0', ' ')\n    text = text.replace('1', 'i')\n\n    return text",
        "input": "'00000000 00000000 01101100 01100101 01101110'",
        "output": "'00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0'",
        "line_execution_counts": {
            "2": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "8": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_280",
        "straightlined_code": "text = '00000000 00000000 01101100 01100101 01101110'\nglobal g, field\nfield = text.replace(' ', '')\ng = text.replace('0', ' ')\ntext = text.replace('1', 'i')\n\nanswer = text"
    },
    {
        "code": "def f(c, index, value):\n    c[index] = value\n    if value >= 3:\n        c.update({'message' : 'xcrWt'})\n    else: \n        del c['message']\n    return c",
        "input": "{1: 2, 3: 4, 5: 6, 'message': 'qrTHo'}, 8, 2",
        "output": "{1: 2, 3: 4, 5: 6, 8: 2}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_281",
        "straightlined_code": "c, index, value = {1: 2, 3: 4, 5: 6, 'message': 'qrTHo'}, 8, 2\nc[index] = value\nif value >= 3:\n    c.update({'message' : 'xcrWt'})\nelse: \n    del c['message']\nanswer = c"
    },
    {
        "code": "def f(dictionary, key):\n    del dictionary[key]\n    if min(dictionary) == key:\n        key = list(dictionary)[0]\n    return key",
        "input": "{'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0,'Thor': 1, 'Ant-Man': 6}, 'Iron Man'",
        "output": "'Iron Man'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_283",
        "straightlined_code": "dictionary, key = {'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0,'Thor': 1, 'Ant-Man': 6}, 'Iron Man'\ndel dictionary[key]\nif min(dictionary) == key:\n    key = list(dictionary)[0]\nanswer = key"
    },
    {
        "code": "def f(name):\n    if name.islower():\n        name = name.upper()\n    else:\n        name = name.lower()\n    return name",
        "input": "'Pinneaple'",
        "output": "'pinneaple'",
        "line_execution_counts": {
            "1": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_287",
        "straightlined_code": "name = 'Pinneaple'\nif name.islower():\n    name = name.upper()\nelse:\n    name = name.lower()\nanswer = name"
    },
    {
        "code": "def f(text, prefix):\n    if text.startswith(prefix):\n        return text.removeprefix(prefix)\n    if prefix in text:\n        return text.replace(prefix, '').strip()\n    return text.upper()",
        "input": "'abixaaaily', 'al'",
        "output": "'ABIXAAAILY'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_290",
        "straightlined_code": "text, prefix = 'abixaaaily', 'al'\nif text.startswith(prefix):\n    answer = text.removeprefix(prefix)\nif prefix in text:\n    answer = text.replace(prefix, '').strip()\nanswer = text.upper()"
    },
    {
        "code": "def f(text):\n    s = text.lower()\n    for i in range(len(s)):\n        if s[i] == 'x':\n            return 'no'\n    return text.isupper()",
        "input": "'dEXE'",
        "output": "'no'",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 3,
            "4": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_293",
        "straightlined_code": "text = 'dEXE'\ns = text.lower()\nfor i in range(len(s)):\n    if s[i] == 'x':\n        answer = 'no'\nanswer = text.isupper()"
    },
    {
        "code": "def f(text, suffix):\n    text += suffix\n    while text[-len(suffix):] == suffix:\n        text = text[:-1]\n    return text",
        "input": "'faqo osax f', 'f'",
        "output": "'faqo osax '",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_309",
        "straightlined_code": "text, suffix = 'faqo osax f', 'f'\ntext += suffix\nwhile text[-len(suffix):] == suffix:\n    text = text[:-1]\nanswer = text"
    },
    {
        "code": "def f(chemicals, num):\n    fish = chemicals[1:]\n    chemicals.reverse()\n    for i in range(num):\n        fish.append(chemicals.pop(1))\n    chemicals.reverse()\n    return chemicals",
        "input": "['lsi', 's', 't', 't', 'd'], 0",
        "output": "['lsi', 's', 't', 't', 'd']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_322",
        "straightlined_code": "chemicals, num = ['lsi', 's', 't', 't', 'd'], 0\nfish = chemicals[1:]\nchemicals.reverse()\nfor i in range(num):\n    fish.append(chemicals.pop(1))\nchemicals.reverse()\nanswer = chemicals"
    },
    {
        "code": "def f(my_dict):\n    result = {v: k for k, v in my_dict.items()}\n    return result",
        "input": "{'a': 1, 'b': 2, 'c': 3, 'd': 2}",
        "output": "{1: 'a', 2: 'd', 3: 'c'}",
        "line_execution_counts": {
            "1": 5,
            "2": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_338",
        "straightlined_code": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 2}\nresult = {v: k for k, v in my_dict.items()}\nanswer = result"
    },
    {
        "code": "def f(list, operation):\n    new_list = list[:]\n    new_list.sort()\n    operation(new_list)\n    return list",
        "input": "[6, 4, 2, 8, 15], (lambda x: x.reverse())",
        "output": "[6, 4, 2, 8, 15]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_344",
        "straightlined_code": "list, operation = [6, 4, 2, 8, 15], (lambda x: x.reverse())\nnew_list = list[:]\nnew_list.sort()\noperation(new_list)\nanswer = list"
    },
    {
        "code": "def f(filename):\n    suffix = filename.split('.')[-1]\n    f2 = filename + suffix[::-1]\n    return f2.endswith(suffix)",
        "input": "'docs.doc'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_346",
        "straightlined_code": "filename = 'docs.doc'\nsuffix = filename.split('.')[-1]\nf2 = filename + suffix[::-1]\nanswer = f2.endswith(suffix)"
    },
    {
        "code": "def f(dictionary):\n    dictionary[1049] = 55\n    key, value = dictionary.popitem()\n    dictionary[key] = value\n    return dictionary",
        "input": "{'noeohqhk': 623}",
        "output": "{'noeohqhk': 623, 1049: 55}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_349",
        "straightlined_code": "dictionary = {'noeohqhk': 623}\ndictionary[1049] = 55\nkey, value = dictionary.popitem()\ndictionary[key] = value\nanswer = dictionary"
    },
    {
        "code": "def f(description, values):\n    if values[1] is None:\n        values = values[0:1]\n    else:\n        values = values[1:]\n    return description.format(*values)",
        "input": "'{0}, {0}!!!', ['R', None]",
        "output": "'R, R!!!'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_354",
        "straightlined_code": "description, values = '{0}, {0}!!!', ['R', None]\nif values[1] is None:\n    values = values[0:1]\nelse:\n    values = values[1:]\nanswer = description.format(*values)"
    },
    {
        "code": "def f(text):\n    for i in range(len(text)-1):\n        if text[i:].islower():\n            return text[i + 1:]\n    return ''",
        "input": "'wrazugizoernmgzu'",
        "output": "'razugizoernmgzu'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_362",
        "straightlined_code": "text = 'wrazugizoernmgzu'\nfor i in range(len(text)-1):\n    if text[i:].islower():\n        answer = text[i + 1:]\nanswer = ''"
    },
    {
        "code": "def f(list_, num):\n    temp = []\n    for i in list_:\n        i = num // 2 * ('%s,' % i)\n        temp.append(i)\n    return temp",
        "input": "['v'], 1",
        "output": "['']",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_372",
        "straightlined_code": "list_, num = ['v'], 1\ntemp = []\nfor i in list_:\n    i = num // 2 * ('%s,' % i)\n    temp.append(i)\nanswer = temp"
    },
    {
        "code": "def f(orig):\n    copy = orig\n    copy.append(100)\n    orig.pop()\n    return copy",
        "input": "[1, 2, 3]",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "sample_373",
        "straightlined_code": "orig = [1, 2, 3]\ncopy = orig\ncopy.append(100)\norig.pop()\nanswer = copy"
    },
    {
        "code": "def f(nums):\n    for i in range(len(nums) - 1, -1, -3):\n        if nums[i] == 0:\n            nums.clear()\n            return False\n    return nums",
        "input": "[0, 0, 1, 2, 1]",
        "output": "False",
        "line_execution_counts": {
            "1": 2,
            "2": 2,
            "3": 1,
            "4": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_379",
        "straightlined_code": "nums = [0, 0, 1, 2, 1]\nfor i in range(len(nums) - 1, -1, -3):\n    if nums[i] == 0:\n        nums.clear()\n        answer = False\nanswer = nums"
    },
    {
        "code": "def f(a):\n    s = dict(list(a.items())\n    [::-1])\n    return \" \".join([str(i) for i in s.items()])",
        "input": "{15: \"Qltuf\", 12: \"Rwrepny\"}",
        "output": "'(12, 'Rwrepny') (15, 'Qltuf')'",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "3": 3
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_382",
        "straightlined_code": "a = {15: \"Qltuf\", 12: \"Rwrepny\"}\ns = dict(list(a.items())\n[::-1])\nanswer = \" \".join([str(i) for i in s.items()])"
    },
    {
        "code": "def f(total, arg):\n    if type(arg) is list:\n        for e in arg:\n            total.extend(e)\n    else:\n        total.extend(arg)\n    return total",
        "input": "[1, 2, 3], 'nammo'",
        "output": "[1, 2, 3, 'n', 'a', 'm', 'm', 'o']",
        "line_execution_counts": {
            "1": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_389",
        "straightlined_code": "total, arg = [1, 2, 3], 'nammo'\nif type(arg) is list:\n    for e in arg:\n        total.extend(e)\nelse:\n    total.extend(arg)\nanswer = total"
    },
    {
        "code": "def f(text):\n    k = text.splitlines()\n    i = 0\n    for j in k:\n        if len(j) == 0:\n            return i\n        i+=1\n    return -1",
        "input": "\"2 m2 \\n\\nbike\"",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 2,
            "6": 1,
            "5": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_394",
        "straightlined_code": "text = \"2 m2 \\n\\nbike\"\nk = text.splitlines()\ni = 0\nfor j in k:\n    if len(j) == 0:\n        answer = i\n    i+=1\nanswer = -1"
    },
    {
        "code": "def f(multi_string):\n    cond_string = map(str.isascii, multi_string.split())\n    if True in cond_string:\n        return ', '.join(x for x in multi_string.split() if x.isascii())\n    return ''",
        "input": "'I am hungry! eat food.'",
        "output": "'I, am, hungry!, eat, food.'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_400",
        "straightlined_code": "multi_string = 'I am hungry! eat food.'\ncond_string = map(str.isascii, multi_string.split())\nif True in cond_string:\n    answer = ', '.join(x for x in multi_string.split() if x.isascii())\nanswer = ''"
    },
    {
        "code": "def f(n, l):\n    archive = {}\n    for _ in range(n):\n        archive.clear()\n        archive.update({x + 10: x * 10 for x in l})\n    return archive",
        "input": "0, ['aaa', 'bbb']",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_402",
        "straightlined_code": "n, l = 0, ['aaa', 'bbb']\narchive = {}\nfor _ in range(n):\n    archive.clear()\n    archive.update({x + 10: x * 10 for x in l})\nanswer = archive"
    },
    {
        "code": "def f(no):\n    d = dict.fromkeys(no, False) \n    return sum([1 for i in d.keys()])",
        "input": "['l', 'f', 'h', 'g', 's', 'b']",
        "output": "6",
        "line_execution_counts": {
            "1": 1,
            "2": 7
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_404",
        "straightlined_code": "no = ['l', 'f', 'h', 'g', 's', 'b']\nd = dict.fromkeys(no, False) \nanswer = sum([1 for i in d.keys()])"
    },
    {
        "code": "def f(s):\n    while len(s) > 1:\n        s.clear()\n        s.append(len(s))\n    return s.pop()",
        "input": "[6, 1, 2, 3]",
        "output": "0",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_407",
        "straightlined_code": "s = [6, 1, 2, 3]\nwhile len(s) > 1:\n    s.clear()\n    s.append(len(s))\nanswer = s.pop()"
    },
    {
        "code": "def f(start, end, interval):\n    steps = list(range(start, end + 1, interval))\n    if 1 in steps:\n        steps[-1] = end + 1\n    return len(steps)",
        "input": "3, 10, 1",
        "output": "8",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_412",
        "straightlined_code": "start, end, interval = 3, 10, 1\nsteps = list(range(start, end + 1, interval))\nif 1 in steps:\n    steps[-1] = end + 1\nanswer = len(steps)"
    },
    {
        "code": "def f(array):\n    d = dict(array)\n    for key, value in d.items():\n        if value < 0 or value > 9:\n            return None\n    return d",
        "input": "((8, 5), (8, 2), (5, 3))",
        "output": "{8: 2, 5: 3}",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "5": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_415",
        "straightlined_code": "array = ((8, 5), (8, 2), (5, 3))\nd = dict(array)\nfor key, value in d.items():\n    if value < 0 or value > 9:\n        answer = None\nanswer = d"
    },
    {
        "code": "def f(lst):\n    lst.reverse()\n    lst.pop()\n    lst.reverse()\n    return lst",
        "input": "[7, 8, 2, 8]",
        "output": "[8, 2, 8]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "sample_417",
        "straightlined_code": "lst = [7, 8, 2, 8]\nlst.reverse()\nlst.pop()\nlst.reverse()\nanswer = lst"
    },
    {
        "code": "def f(array):\n    new_array = array.copy()\n    new_array = reversed(new_array)\n    return [x*x for x in new_array]",
        "input": "[1, 2, 1]",
        "output": "[1, 4, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_422",
        "straightlined_code": "array = [1, 2, 1]\nnew_array = array.copy()\nnew_array = reversed(new_array)\nanswer = [x*x for x in new_array]"
    },
    {
        "code": "def f(a):\n    a = a.replace('/', ':')\n    z = a.rpartition(':')\n    return [z[0], z[1], z[2]]",
        "input": "'/CL44     '",
        "output": "['', ':', 'CL44     ']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_425",
        "straightlined_code": "a = '/CL44     '\na = a.replace('/', ':')\nz = a.rpartition(':')\nanswer = [z[0], z[1], z[2]]"
    },
    {
        "code": "def f(n, m):\n    arr = list(range(1, n+1))\n    for i in range(m):\n        arr.clear()\n    return arr",
        "input": "1, 3",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_431",
        "straightlined_code": "n, m = 1, 3\narr = list(range(1, n+1))\nfor i in range(m):\n    arr.clear()\nanswer = arr"
    },
    {
        "code": "def f(string):\n    bigTab = 100\n    for i in range(10, 30):\n        if 0 < string.count('\\t') < 20:\n            bigTab = i\n            break\n    return string.expandtabs(bigTab)",
        "input": "'1  \\t\\t\\t3'",
        "output": "'1                             3'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_438",
        "straightlined_code": "string = '1  \\t\\t\\t3'\nbigTab = 100\nfor i in range(10, 30):\n    if 0 < string.count('\\t') < 20:\n        bigTab = i\n        break\nanswer = string.expandtabs(bigTab)"
    },
    {
        "code": "def f(array):\n    l = len(array)\n    if l % 2 == 0:\n        array.clear()\n    else:\n        array.reverse()\n    return array",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_446",
        "straightlined_code": "array = []\nl = len(array)\nif l % 2 == 0:\n    array.clear()\nelse:\n    array.reverse()\nanswer = array"
    },
    {
        "code": "def f(x):\n    n = len(x)\n    i = 0\n    while i < n and x[i].isdigit():\n        i += 1\n    return i == n",
        "input": "'1'",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_449",
        "straightlined_code": "x = '1'\nn = len(x)\ni = 0\nwhile i < n and x[i].isdigit():\n    i += 1\nanswer = i == n"
    },
    {
        "code": "def f(d, count):\n    new_dict = {}\n    for _ in range(count):\n        d = d.copy()\n        new_dict = {**d, **new_dict}\n    return new_dict",
        "input": "{'a': 2, 'b': [], 'c': {}}, 0",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_454",
        "straightlined_code": "d, count = {'a': 2, 'b': [], 'c': {}}, 0\nnew_dict = {}\nfor _ in range(count):\n    d = d.copy()\n    new_dict = {**d, **new_dict}\nanswer = new_dict"
    },
    {
        "code": "def f(arr, d):\n    for i in range(1, len(arr), 2):\n        d.update({arr[i]: arr[i-1]})\n\n    return d",
        "input": "['b', 'vzjmc', 'f', 'ae', '0'], dict()",
        "output": "{'vzjmc': 'b', 'ae': 'f'}",
        "line_execution_counts": {
            "1": 3,
            "2": 2,
            "4": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_459",
        "straightlined_code": "arr, d = ['b', 'vzjmc', 'f', 'ae', '0'], dict()\nfor i in range(1, len(arr), 2):\n    d.update({arr[i]: arr[i-1]})\n\nanswer = d"
    },
    {
        "code": "def f(text, value):\n    length = len(text)\n    letters = list(text)\n    if value not in letters:\n        value = letters[0]\n    return value * length",
        "input": "'ldebgp o', 'o'",
        "output": "'oooooooo'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_462",
        "straightlined_code": "text, value = 'ldebgp o', 'o'\nlength = len(text)\nletters = list(text)\nif value not in letters:\n    value = letters[0]\nanswer = value * length"
    },
    {
        "code": "def f(seq, value):\n    roles = dict.fromkeys(seq, 'north')\n    if value:\n        roles.update(key.strip() for key in value.split(', '))\n    return roles",
        "input": "['wise king', 'young king'], ''",
        "output": "{'wise king': 'north', 'young king': 'north'}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_465",
        "straightlined_code": "seq, value = ['wise king', 'young king'], ''\nroles = dict.fromkeys(seq, 'north')\nif value:\n    roles.update(key.strip() for key in value.split(', '))\nanswer = roles"
    },
    {
        "code": "def f(nums):\n    copy = nums.copy()\n    newDict = dict()\n    for k in copy:\n        newDict[k] = len(copy[k])\n    return newDict",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_467",
        "straightlined_code": "nums = {}\ncopy = nums.copy()\nnewDict = dict()\nfor k in copy:\n    newDict[k] = len(copy[k])\nanswer = newDict"
    },
    {
        "code": "def f(txt, marker):\n    a = []\n    lines = txt.split('\\n')\n    for line in lines:\n        a.append(line.center(marker))\n    return '\\n'.join(a)",
        "input": "'#[)[]>[^e>\\n 8', -5",
        "output": "'#[)[]>[^e>\n 8'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_474",
        "straightlined_code": "txt, marker = '#[)[]>[^e>\\n 8', -5\na = []\nlines = txt.split('\\n')\nfor line in lines:\n    a.append(line.center(marker))\nanswer = '\\n'.join(a)"
    },
    {
        "code": "def f(text):\n    topic, sep, problem = text.rpartition('|')\n    if problem == 'r':\n        problem = topic.replace('u', 'p')\n    return topic, problem",
        "input": "'|xduaisf'",
        "output": "('', 'xduaisf')",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_477",
        "straightlined_code": "text = '|xduaisf'\ntopic, sep, problem = text.rpartition('|')\nif problem == 'r':\n    problem = topic.replace('u', 'p')\nanswer = topic, problem"
    },
    {
        "code": "def f(nums, pop1, pop2):\n    nums.pop(pop1 - 1)\n    nums.pop(pop2 - 1)\n    return nums",
        "input": "[1, 5, 2, 3, 6], 2, 4",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_479",
        "straightlined_code": "nums, pop1, pop2 = [1, 5, 2, 3, 6], 2, 4\nnums.pop(pop1 - 1)\nnums.pop(pop2 - 1)\nanswer = nums"
    },
    {
        "code": "def f(dic):\n    dic_op = dic.copy()\n    for key, val in dic.items():\n        dic_op[key] = val * val\n    return dic_op",
        "input": "{1:1, 2:2, 3:3}",
        "output": "{1: 1, 2: 4, 3: 9}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_486",
        "straightlined_code": "dic = {1:1, 2:2, 3:3}\ndic_op = dic.copy()\nfor key, val in dic.items():\n    dic_op[key] = val * val\nanswer = dic_op"
    },
    {
        "code": "def f(dict):\n    even_keys = []\n    for key in dict.keys():\n        if key % 2 == 0:\n            even_keys.append(key)\n    return even_keys",
        "input": "{ 4: 'a' }",
        "output": "[4]",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_487",
        "straightlined_code": "dict = { 4: 'a' }\neven_keys = []\nfor key in dict.keys():\n    if key % 2 == 0:\n        even_keys.append(key)\nanswer = even_keys"
    },
    {
        "code": "def f(d):\n    keys = []\n    for k in d:\n        keys.append('%s => %s' % (k, d[k]))\n    return keys",
        "input": "{'-4':'4','1':'2','-':'-3'}",
        "output": "['-4 => 4', '1 => 2', '- => -3']",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_493",
        "straightlined_code": "d = {'-4':'4','1':'2','-':'-3'}\nkeys = []\nfor k in d:\n    keys.append('%s => %s' % (k, d[k]))\nanswer = keys"
    },
    {
        "code": "def f(num, l):\n    t = \"\"\n    while l > len(num):\n        t += '0'\n        l -= 1\n    return t + num",
        "input": "\"1\", 3",
        "output": "'001'",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 2,
            "5": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_494",
        "straightlined_code": "num, l = \"1\", 3\nt = \"\"\nwhile l > len(num):\n    t += '0'\n    l -= 1\nanswer = t + num"
    },
    {
        "code": "def f(n):\n    b = list(str(n))\n    for i in range(2,len(b)): b[i] += '+'\n    return b",
        "input": "44",
        "output": "['4', '4']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_497",
        "straightlined_code": "n = 44\nb = list(str(n))\nfor i in range(2,len(b)): b[i] += '+'\nanswer = b"
    },
    {
        "code": "def f(a, b, c, d, e):\n    key = d\n    if key in a:\n        num = a.pop(key)\n    if b > 3:\n        return ''.join(c)\n    else:\n        return num",
        "input": "{7: 'ii5p', 1: 'o3Jwus', 3: 'lot9L', 2: '04g', 9: 'Wjf', 8: '5b', 0: 'te6', 5: 'flLO', 6: 'jq', 4: 'vfa0tW'}, 4, 'Wy', 'Wy', 1.0",
        "output": "'Wy'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_510",
        "straightlined_code": "a, b, c, d, e = {7: 'ii5p', 1: 'o3Jwus', 3: 'lot9L', 2: '04g', 9: 'Wjf', 8: '5b', 0: 'te6', 5: 'flLO', 6: 'jq', 4: 'vfa0tW'}, 4, 'Wy', 'Wy', 1.0\nkey = d\nif key in a:\n    num = a.pop(key)\nif b > 3:\n    answer = ''.join(c)\nelse:\n    answer = num"
    },
    {
        "code": "def f(fields, update_dict):\n    di = dict((x, '') for x in fields)\n    di.update(update_dict)\n    return di",
        "input": "('ct', 'c', 'ca'), {'ca': 'cx'}",
        "output": "{'ct': '', 'c': '', 'ca': 'cx'}",
        "line_execution_counts": {
            "1": 5,
            "2": 1,
            "3": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_511",
        "straightlined_code": "fields, update_dict = ('ct', 'c', 'ca'), {'ca': 'cx'}\ndi = dict((x, '') for x in fields)\ndi.update(update_dict)\nanswer = di"
    },
    {
        "code": "def f(array):\n    while -1 in array:\n        array.pop(-3)\n    while 0 in array:\n        array.pop()\n    while 1 in array:\n        array.pop(0)\n    return array",
        "input": "[0, 2]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "3": 3,
            "4": 2,
            "5": 1,
            "7": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_513",
        "straightlined_code": "array = [0, 2]\nwhile -1 in array:\n    array.pop(-3)\nwhile 0 in array:\n    array.pop()\nwhile 1 in array:\n    array.pop(0)\nanswer = array"
    },
    {
        "code": "def f(text):\n    for item in text.split():\n        text = text.replace('-{}'.format(item), ' ').replace('{}-'.format(item), ' ')\n    return text.strip('-')",
        "input": "'-stew---corn-and-beans-in soup-.-'",
        "output": "'stew---corn-and-beans-in soup-.'",
        "line_execution_counts": {
            "1": 3,
            "2": 2,
            "3": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_514",
        "straightlined_code": "text = '-stew---corn-and-beans-in soup-.-'\nfor item in text.split():\n    text = text.replace('-{}'.format(item), ' ').replace('{}-'.format(item), ' ')\nanswer = text.strip('-')"
    },
    {
        "code": "def f(array):\n    result = array.copy()\n    result.reverse()\n    result[:] = [item * 2 for item in result]\n    return result",
        "input": "[1, 2, 3, 4, 5]",
        "output": "[10, 8, 6, 4, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 6,
            "4": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_515",
        "straightlined_code": "array = [1, 2, 3, 4, 5]\nresult = array.copy()\nresult.reverse()\nresult[:] = [item * 2 for item in result]\nanswer = result"
    },
    {
        "code": "def f(strings, substr):\n    list = [s for s in strings if s.startswith(substr)]\n    return sorted(list, key=len)",
        "input": "['condor', 'eyes', 'gay', 'isa' ], 'd'",
        "output": "[]",
        "line_execution_counts": {
            "1": 5,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_516",
        "straightlined_code": "strings, substr = ['condor', 'eyes', 'gay', 'isa' ], 'd'\nlist = [s for s in strings if s.startswith(substr)]\nanswer = sorted(list, key=len)"
    },
    {
        "code": "def f(text):\n    for i in range(len(text)-1, 0, -1):\n        if not text[i].isupper():\n            return text[0:i]\n    return ''",
        "input": "'SzHjifnzog'",
        "output": "'SzHjifnzo'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_517",
        "straightlined_code": "text = 'SzHjifnzog'\nfor i in range(len(text)-1, 0, -1):\n    if not text[i].isupper():\n        answer = text[0:i]\nanswer = ''"
    },
    {
        "code": "def f(s):\n    b = ''\n    c = ''\n    for i in s:\n        c = c + i\n        if s.rfind(c) > -1:\n            return s.rfind(c)\n    return 0",
        "input": "'papeluchis'",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_528",
        "straightlined_code": "s = 'papeluchis'\nb = ''\nc = ''\nfor i in s:\n    c = c + i\n    if s.rfind(c) > -1:\n        answer = s.rfind(c)\nanswer = 0"
    },
    {
        "code": "def f(s, ch):\n    sl = s\n    if ch in s:\n        sl = s.lstrip(ch)\n        if len(sl) == 0:\n            sl = sl + '!?'\n    else:\n        return 'no'\n    return sl",
        "input": "\"@@@ff\", '@'",
        "output": "'ff'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "8": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_530",
        "straightlined_code": "s, ch = \"@@@ff\", '@'\nsl = s\nif ch in s:\n    sl = s.lstrip(ch)\n    if len(sl) == 0:\n        sl = sl + '!?'\nelse:\n    answer = 'no'\nanswer = sl"
    },
    {
        "code": "def f(n):\n    for n in str(n):\n        if n not in \"012\" and n not in list(range(5, 10)):\n            return False\n    return True",
        "input": "1341240312",
        "output": "False",
        "line_execution_counts": {
            "1": 2,
            "2": 2,
            "3": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_535",
        "straightlined_code": "n = 1341240312\nfor n in str(n):\n    if n not in \"012\" and n not in list(range(5, 10)):\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(text, value):\n    new_text = list(text)\n    try:\n        new_text.append(value)\n        length = len(new_text)\n    except IndexError:\n        length = 0\n    return '[' + str(length) + ']'",
        "input": "'abv', 'a'",
        "output": "'[4]'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "7": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_537",
        "straightlined_code": "text, value = 'abv', 'a'\nnew_text = list(text)\ntry:\n    new_text.append(value)\n    length = len(new_text)\nexcept IndexError:\n    length = 0\nanswer = '[' + str(length) + ']'"
    },
    {
        "code": "def f(array):\n    c = array\n    array_copy = array\n\n    while True:\n        c.append('_')\n        if c == array_copy:\n            array_copy[c.index('_')] = ''\n            break\n        \n    return array_copy",
        "input": "[]",
        "output": "['']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1,
            "8": 1,
            "10": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_539",
        "straightlined_code": "array = []\nc = array\narray_copy = array\n\nwhile True:\n    c.append('_')\n    if c == array_copy:\n        array_copy[c.index('_')] = ''\n        break\n    \nanswer = array_copy"
    },
    {
        "code": "def f(text, speaker):\n    while text.startswith(speaker):\n        text = text[len(speaker):]\n    return text",
        "input": "'[CHARRUNNERS]Do you know who the other was? [NEGMENDS]', '[CHARRUNNERS]'",
        "output": "'Do you know who the other was? [NEGMENDS]'",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "3": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_546",
        "straightlined_code": "text, speaker = '[CHARRUNNERS]Do you know who the other was? [NEGMENDS]', '[CHARRUNNERS]'\nwhile text.startswith(speaker):\n    text = text[len(speaker):]\nanswer = text"
    },
    {
        "code": "def f(matrix):\n    matrix.reverse()\n    result = []\n    for primary in matrix:\n        max(primary)\n        primary.sort(reverse = True)\n        result.append(primary)\n    return result",
        "input": "[[1, 1, 1, 1]]",
        "output": "[[1, 1, 1, 1]]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_549",
        "straightlined_code": "matrix = [[1, 1, 1, 1]]\nmatrix.reverse()\nresult = []\nfor primary in matrix:\n    max(primary)\n    primary.sort(reverse = True)\n    result.append(primary)\nanswer = result"
    },
    {
        "code": "def f(nums):\n    for i in range(len(nums)):\n        nums.insert(i, nums[i]**2)\n    return nums",
        "input": "[1, 2, 4]",
        "output": "[1, 1, 1, 1, 2, 4]",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "3": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_550",
        "straightlined_code": "nums = [1, 2, 4]\nfor i in range(len(nums)):\n    nums.insert(i, nums[i]**2)\nanswer = nums"
    },
    {
        "code": "def f(text, count):\n    for i in range(count):\n        text = text[::-1]\n    return text",
        "input": "'439m2670hlsw', 3",
        "output": "'wslh0762m934'",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "3": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_553",
        "straightlined_code": "text, count = '439m2670hlsw', 3\nfor i in range(count):\n    text = text[::-1]\nanswer = text"
    },
    {
        "code": "def f(text, tabstop):\n    text = text.replace('\\n', '_____')\n    text = text.replace('\\t', tabstop * ' ')\n    text = text.replace('_____', '\\n')\n    return text",
        "input": "\"odes\\tcode\\twell\", 2",
        "output": "'odes  code  well'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_555",
        "straightlined_code": "text, tabstop = \"odes\\tcode\\twell\", 2\ntext = text.replace('\\n', '_____')\ntext = text.replace('\\t', tabstop * ' ')\ntext = text.replace('_____', '\\n')\nanswer = text"
    },
    {
        "code": "def f(text):\n    x = 0\n    if text.islower():\n        for c in text:\n            if int(c) in list(range(90)):\n                x+=1\n    return x",
        "input": "\"591237865\"",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_560",
        "straightlined_code": "text = \"591237865\"\nx = 0\nif text.islower():\n    for c in text:\n        if int(c) in list(range(90)):\n            x+=1\nanswer = x"
    },
    {
        "code": "def f(text1, text2):\n    nums = []\n    for i in range(len(text2)):\n        nums.append(text1.count(text2[i]))\n    return sum(nums)",
        "input": "'jivespdcxc', 'sx'",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_563",
        "straightlined_code": "text1, text2 = 'jivespdcxc', 'sx'\nnums = []\nfor i in range(len(text2)):\n    nums.append(text1.count(text2[i]))\nanswer = sum(nums)"
    },
    {
        "code": "def f(lists):\n    lists[1].clear()\n    lists[2] += lists[1]\n    return lists[0]",
        "input": "[[395, 666, 7, 4], [], [4223, 111]]",
        "output": "[395, 666, 7, 4]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_564",
        "straightlined_code": "lists = [[395, 666, 7, 4], [], [4223, 111]]\nlists[1].clear()\nlists[2] += lists[1]\nanswer = lists[0]"
    },
    {
        "code": "def f(array, index, value):\n    array.insert(0, index + 1)\n    if value >= 1:\n        array.insert(index, value)\n    return array",
        "input": "[2], 0, 2",
        "output": "[2, 1, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_570",
        "straightlined_code": "array, index, value = [2], 0, 2\narray.insert(0, index + 1)\nif value >= 1:\n    array.insert(index, value)\nanswer = array"
    },
    {
        "code": "def f(simpons):\n    while simpons:\n        pop = simpons.pop()\n        if pop == pop.title():\n            return pop\n    return pop",
        "input": "['George', 'Michael', 'George', 'Costanza']",
        "output": "'Costanza'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_574",
        "straightlined_code": "simpons = ['George', 'Michael', 'George', 'Costanza']\nwhile simpons:\n    pop = simpons.pop()\n    if pop == pop.title():\n        answer = pop\nanswer = pop"
    },
    {
        "code": "def f(nums, val):\n    new_list = []\n    [new_list.extend([i] * val) for i in nums]\n    return sum(new_list)",
        "input": "[10, 4], 3",
        "output": "42",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_575",
        "straightlined_code": "nums, val = [10, 4], 3\nnew_list = []\n[new_list.extend([i] * val) for i in nums]\nanswer = sum(new_list)"
    },
    {
        "code": "def f(items):\n    result = []\n    for number in items:\n        d = dict(items).copy()\n        d.popitem()\n        result.append(d)\n        items = d\n    return result",
        "input": "[(1, 'pos')]",
        "output": "[{}]",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_577",
        "straightlined_code": "items = [(1, 'pos')]\nresult = []\nfor number in items:\n    d = dict(items).copy()\n    d.popitem()\n    result.append(d)\n    items = d\nanswer = result"
    },
    {
        "code": "def f(numbers):\n    new_numbers = []\n    for i, _ in enumerate(numbers):\n        new_numbers.append(numbers[len(numbers)-1-i])\n    return new_numbers",
        "input": "[11, 3]",
        "output": "[3, 11]",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_592",
        "straightlined_code": "numbers = [11, 3]\nnew_numbers = []\nfor i, _ in enumerate(numbers):\n    new_numbers.append(numbers[len(numbers)-1-i])\nanswer = new_numbers"
    },
    {
        "code": "def f(nums, n):\n    pos = len(nums) - 1\n    for i in range(-len(nums), 0):\n        nums.insert(pos, nums[i])\n    return nums",
        "input": "[], 14",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_593",
        "straightlined_code": "nums, n = [], 14\npos = len(nums) - 1\nfor i in range(-len(nums), 0):\n    nums.insert(pos, nums[i])\nanswer = nums"
    },
    {
        "code": "def f(text, prefix):\n    if text.startswith(prefix):\n        text = text.removeprefix(prefix)\n    text = text.capitalize()\n    return text",
        "input": "'qdhstudentamxupuihbuztn', 'jdm'",
        "output": "'Qdhstudentamxupuihbuztn'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_595",
        "straightlined_code": "text, prefix = 'qdhstudentamxupuihbuztn', 'jdm'\nif text.startswith(prefix):\n    text = text.removeprefix(prefix)\ntext = text.capitalize()\nanswer = text"
    },
    {
        "code": "def f(txt, alpha):\n    txt = sorted(txt)\n    if txt.index(alpha) % 2 == 0:\n        return txt[::-1]\n    return txt",
        "input": "['8', '9', '7', '4', '3', '2'], '9'",
        "output": "['2', '3', '4', '7', '8', '9']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_596",
        "straightlined_code": "txt, alpha = ['8', '9', '7', '4', '3', '2'], '9'\ntxt = sorted(txt)\nif txt.index(alpha) % 2 == 0:\n    answer = txt[::-1]\nanswer = txt"
    },
    {
        "code": "def f(array):\n    just_ns = list(map(lambda num: 'n'*num, array))\n    final_output = []\n    for wipe in just_ns:\n        final_output.append(wipe)\n    return final_output",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_600",
        "straightlined_code": "array = []\njust_ns = list(map(lambda num: 'n'*num, array))\nfinal_output = []\nfor wipe in just_ns:\n    final_output.append(wipe)\nanswer = final_output"
    },
    {
        "code": "def f(sentences):\n    if all([sentence.isdecimal() for sentence in sentences.split('.')]):\n        return 'oscillating' \n    else:\n        return 'not oscillating'",
        "input": "'not numbers'",
        "output": "'not oscillating'",
        "line_execution_counts": {
            "1": 2,
            "4": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_603",
        "straightlined_code": "sentences = 'not numbers'\nif all([sentence.isdecimal() for sentence in sentences.split('.')]):\n    answer = 'oscillating' \nelse:\n    answer = 'not oscillating'"
    },
    {
        "code": "def f(value):\n    ls = list(value)\n    ls.append('NHIB')\n    return ''.join(ls)",
        "input": "'ruam'",
        "output": "'ruamNHIB'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_606",
        "straightlined_code": "value = 'ruam'\nls = list(value)\nls.append('NHIB')\nanswer = ''.join(ls)"
    },
    {
        "code": "def f(line, equalityMap):\n    rs = {\n        k[0]: k[1] for k in equalityMap\n    }\n    return line.translate(str.maketrans(rs))",
        "input": "'abab', [('a', 'b'), ('b', 'a')]",
        "output": "'baba'",
        "line_execution_counts": {
            "2": 3,
            "1": 3,
            "4": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_626",
        "straightlined_code": "line, equalityMap = 'abab', [('a', 'b'), ('b', 'a')]\nrs = {\n    k[0]: k[1] for k in equalityMap\n}\nanswer = line.translate(str.maketrans(rs))"
    },
    {
        "code": "def f(original, string):\n    temp = dict(original)\n    for a, b in string.items():\n        temp[b] = a\n    return temp",
        "input": "{1: -9, 0: -7}, {1: 2, 0: 3}",
        "output": "{1: -9, 0: -7, 2: 1, 3: 0}",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_630",
        "straightlined_code": "original, string = {1: -9, 0: -7}, {1: 2, 0: 3}\ntemp = dict(original)\nfor a, b in string.items():\n    temp[b] = a\nanswer = temp"
    },
    {
        "code": "def f(text, num):\n    req = num - len(text)\n    text = text.center(num, '*')\n    return text[:req // 2: -req // 2]",
        "input": "'a', 19",
        "output": "'*'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_631",
        "straightlined_code": "text, num = 'a', 19\nreq = num - len(text)\ntext = text.center(num, '*')\nanswer = text[:req // 2: -req // 2]"
    },
    {
        "code": "def f(array, elem):\n    array.reverse()\n    try:\n        found = array.index(elem)\n    finally:\n        array.reverse()\n    return found",
        "input": "[5, -3, 3, 2], 2",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_633",
        "straightlined_code": "array, elem = [5, -3, 3, 2], 2\narray.reverse()\ntry:\n    found = array.index(elem)\nfinally:\n    array.reverse()\nanswer = found"
    },
    {
        "code": "def f(input_string):\n    table = str.maketrans('aioe', 'ioua')\n    while 'a' in input_string or 'A' in input_string:\n        input_string = input_string.translate(table)\n    return input_string",
        "input": "'biec'",
        "output": "'biec'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_634",
        "straightlined_code": "input_string = 'biec'\ntable = str.maketrans('aioe', 'ioua')\nwhile 'a' in input_string or 'A' in input_string:\n    input_string = input_string.translate(table)\nanswer = input_string"
    },
    {
        "code": "def f(text):\n    text = text.split(' ')\n    for t in text:\n        if not t.isnumeric():\n            return 'no'\n    return 'yes'",
        "input": "'03625163633 d'",
        "output": "'no'",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 2,
            "4": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_637",
        "straightlined_code": "text = '03625163633 d'\ntext = text.split(' ')\nfor t in text:\n    if not t.isnumeric():\n        answer = 'no'\nanswer = 'yes'"
    },
    {
        "code": "def f(s, suffix):\n    if not suffix:\n        return s\n    while s.endswith(suffix):\n        s = s[:-len(suffix)]\n    return s",
        "input": "'ababa', 'ab'",
        "output": "'ababa'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_638",
        "straightlined_code": "s, suffix = 'ababa', 'ab'\nif not suffix:\n    answer = s\nwhile s.endswith(suffix):\n    s = s[:-len(suffix)]\nanswer = s"
    },
    {
        "code": "def f(text, suffix):\n    if text.endswith(suffix):\n        text = text[:-1] + text[-1:].swapcase()\n    return text",
        "input": "'damdrodm', 'm'",
        "output": "'damdrodM'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_643",
        "straightlined_code": "text, suffix = 'damdrodm', 'm'\nif text.endswith(suffix):\n    text = text[:-1] + text[-1:].swapcase()\nanswer = text"
    },
    {
        "code": "def f(nums, pos):\n    s = slice(None)\n    if pos % 2:\n        s = slice(None, -1)\n    nums[s].reverse()\n    return nums",
        "input": "[6, 1], 3",
        "output": "[6, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_644",
        "straightlined_code": "nums, pos = [6, 1], 3\ns = slice(None)\nif pos % 2:\n    s = slice(None, -1)\nnums[s].reverse()\nanswer = nums"
    },
    {
        "code": "def f(nums, target):\n    if nums.count(0):\n        return 0\n    elif nums.count(target) < 3:\n        return 1\n    else:\n        return nums.index(target)",
        "input": "[1, 1, 1, 2], 3",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_645",
        "straightlined_code": "nums, target = [1, 1, 1, 2], 3\nif nums.count(0):\n    answer = 0\nelif nums.count(target) < 3:\n    answer = 1\nelse:\n    answer = nums.index(target)"
    },
    {
        "code": "def f(text, count):\n    for i in range(count):\n        text = ''.join(reversed(text))\n    return text",
        "input": "'aBc, ,SzY', 2",
        "output": "'aBc, ,SzY'",
        "line_execution_counts": {
            "1": 3,
            "2": 2,
            "3": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_646",
        "straightlined_code": "text, count = 'aBc, ,SzY', 2\nfor i in range(count):\n    text = ''.join(reversed(text))\nanswer = text"
    },
    {
        "code": "def f(values):\n    names = ['Pete', 'Linda', 'Angela']\n    names.extend(values)\n    names.sort()\n    return names",
        "input": "['Dan', 'Joe', 'Dusty']",
        "output": "['Angela', 'Dan', 'Dusty', 'Joe', 'Linda', 'Pete']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_662",
        "straightlined_code": "values = ['Dan', 'Joe', 'Dusty']\nnames = ['Pete', 'Linda', 'Angela']\nnames.extend(values)\nnames.sort()\nanswer = names"
    },
    {
        "code": "def f(tags):\n    resp = \"\"\n    for key in tags:\n        resp += key + \" \"\n    return resp",
        "input": "{\"3\":\"3\",\"4\":\"5\"}",
        "output": "'3 4 '",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "sample_664",
        "straightlined_code": "tags = {\"3\":\"3\",\"4\":\"5\"}\nresp = \"\"\nfor key in tags:\n    resp += key + \" \"\nanswer = resp"
    },
    {
        "code": "def f(t):\n    a, sep, b = t.rpartition('-')\n    if len(b) == len(a):\n        return 'imbalanced'\n    return a + b.replace(sep, '')",
        "input": "\"fubarbaz\"",
        "output": "'fubarbaz'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_669",
        "straightlined_code": "t = \"fubarbaz\"\na, sep, b = t.rpartition('-')\nif len(b) == len(a):\n    answer = 'imbalanced'\nanswer = a + b.replace(sep, '')"
    },
    {
        "code": "def f(a, b):\n    d = dict(zip(a, b))\n    a.sort(key=d.get, reverse=True)\n    return [d.pop(x) for x in a]",
        "input": "['12','ab'], [2,2]",
        "output": "[2, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_670",
        "straightlined_code": "a, b = ['12','ab'], [2,2]\nd = dict(zip(a, b))\na.sort(key=d.get, reverse=True)\nanswer = [d.pop(x) for x in a]"
    },
    {
        "code": "def f(string):\n    if string.isupper():\n        return string.lower()\n    elif string.islower():\n        return string.upper()\n    return string",
        "input": "\"cA\"",
        "output": "'cA'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_673",
        "straightlined_code": "string = \"cA\"\nif string.isupper():\n    answer = string.lower()\nelif string.islower():\n    answer = string.upper()\nanswer = string"
    },
    {
        "code": "def f(text):\n    freq = dict()\n    for c in text.lower():\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq",
        "input": "\"HI\"",
        "output": "{'h': 1, 'i': 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "6": 2,
            "7": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_678",
        "straightlined_code": "text = \"HI\"\nfreq = dict()\nfor c in text.lower():\n    if c in freq:\n        freq[c] += 1\n    else:\n        freq[c] = 1\nanswer = freq"
    },
    {
        "code": "def f(text, length, index):\n    ls = text.rsplit(None, index)\n    return '_'.join([l[:length] for l in ls])",
        "input": "'hypernimovichyp', 2, 2",
        "output": "'hy'",
        "line_execution_counts": {
            "1": 1,
            "2": 2
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_682",
        "straightlined_code": "text, length, index = 'hypernimovichyp', 2, 2\nls = text.rsplit(None, index)\nanswer = '_'.join([l[:length] for l in ls])"
    },
    {
        "code": "def f(dict1, dict2):\n    result = dict1.copy()\n    result.update([(__, dict2[__]) for __ in dict2])\n    return result",
        "input": "{'disface': 9, 'cam': 7}, {'mforce': 5}",
        "output": "{'disface': 9, 'cam': 7, 'mforce': 5}",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_683",
        "straightlined_code": "dict1, dict2 = {'disface': 9, 'cam': 7}, {'mforce': 5}\nresult = dict1.copy()\nresult.update([(__, dict2[__]) for __ in dict2])\nanswer = result"
    },
    {
        "code": "def f(d, l):\n\tnew_d = {}\n\n\tfor k in l:\n\t\tif d.get(k) is not None:\n\t\t\tnew_d[k] = d[k]\n\n\treturn new_d.copy()",
        "input": "{\"lorem ipsum\" : 12, \"dolor\" : 23}, [\"lorem ipsum\", \"dolor\"]",
        "output": "{'lorem ipsum': 12, 'dolor': 23}",
        "line_execution_counts": {
            "1": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "7": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_686",
        "straightlined_code": "d, l = {\"lorem ipsum\" : 12, \"dolor\" : 23}, [\"lorem ipsum\", \"dolor\"]\nnew_d = {}\n\nfor k in l:\n\tif d.get(k) is not None:\n\t\tnew_d[k] = d[k]\n\nanswer = new_d.copy()"
    },
    {
        "code": "def f(arr):\n    count = len(arr)\n    sub = arr.copy()\n    for i in range(0, count, 2):\n        sub[i] *= 5\n    return sub",
        "input": "[-3, -6, 2, 7]",
        "output": "[-15, -6, 10, 7]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_689",
        "straightlined_code": "arr = [-3, -6, 2, 7]\ncount = len(arr)\nsub = arr.copy()\nfor i in range(0, count, 2):\n    sub[i] *= 5\nanswer = sub"
    },
    {
        "code": "def f(d):\n    i = len(d) - 1\n    key = list(d.keys())[i]\n    d.pop(key, None)\n    return key, d",
        "input": "dict(e=1, d=2, c=3)",
        "output": "('c', {'e': 1, 'd': 2})",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_694",
        "straightlined_code": "d = dict(e=1, d=2, c=3)\ni = len(d) - 1\nkey = list(d.keys())[i]\nd.pop(key, None)\nanswer = key, d"
    },
    {
        "code": "def f(text):\n    s = 0\n    for i in range(1, len(text)):\n        s += len(text.rpartition(text[i])[0])\n    return s",
        "input": "'wdj'",
        "output": "3",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_696",
        "straightlined_code": "text = 'wdj'\ns = 0\nfor i in range(1, len(text)):\n    s += len(text.rpartition(text[i])[0])\nanswer = s"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    for i in range(len(nums) - 1, -1, -1):\n        nums.insert(i, nums.pop(0))\n    return nums",
        "input": "[0, -5, -4]",
        "output": "[-4, -5, 0]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_702",
        "straightlined_code": "nums = [0, -5, -4]\ncount = len(nums)\nfor i in range(len(nums) - 1, -1, -1):\n    nums.insert(i, nums.pop(0))\nanswer = nums"
    },
    {
        "code": "def f(s, n, c):\n    width = len(c)*n\n    for _ in range(width - len(s)):\n        s = c + s\n    return s",
        "input": "'.', 0, '99'",
        "output": "'.'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_704",
        "straightlined_code": "s, n, c = '.', 0, '99'\nwidth = len(c)*n\nfor _ in range(width - len(s)):\n    s = c + s\nanswer = s"
    },
    {
        "code": "def f(cities, name):\n    if not name:\n        return cities\n    if name and name != 'cities':\n        return []\n    return [name + city for city in cities]",
        "input": "['Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'], 'Somewhere '",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_705",
        "straightlined_code": "cities, name = ['Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'], 'Somewhere '\nif not name:\n    answer = cities\nif name and name != 'cities':\n    answer = []\nanswer = [name + city for city in cities]"
    },
    {
        "code": "def f(text):\n    my_list = text.split()\n    my_list.sort(reverse=True)\n    return ' '.join(my_list)",
        "input": "'a loved'",
        "output": "'loved a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_709",
        "straightlined_code": "text = 'a loved'\nmy_list = text.split()\nmy_list.sort(reverse=True)\nanswer = ' '.join(my_list)"
    },
    {
        "code": "def f(playlist, liker_name, song_index):\n    playlist[liker_name] = playlist.get(liker_name, [])\n    playlist[liker_name].append(song_index)\n    return playlist",
        "input": "{'aki': ['1', '5']}, 'aki', '2'",
        "output": "{'aki': ['1', '5', '2']}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_710",
        "straightlined_code": "playlist, liker_name, song_index = {'aki': ['1', '5']}, 'aki', '2'\nplaylist[liker_name] = playlist.get(liker_name, [])\nplaylist[liker_name].append(song_index)\nanswer = playlist"
    },
    {
        "code": "def f(text, char):\n    if char in text:\n        text = [t.strip() for t in text.split(char) if t]\n        if len(text) > 1:\n            return True\n    return False",
        "input": "'only one line', ' '",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 1,
            "4": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_713",
        "straightlined_code": "text, char = 'only one line', ' '\nif char in text:\n    text = [t.strip() for t in text.split(char) if t]\n    if len(text) > 1:\n        answer = True\nanswer = False"
    },
    {
        "code": "def f(array):\n    array.reverse()\n    array.clear()\n    array.extend('x'*len(array))\n    array.reverse()\n    return array",
        "input": "[3, -2, 0]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_714",
        "straightlined_code": "array = [3, -2, 0]\narray.reverse()\narray.clear()\narray.extend('x'*len(array))\narray.reverse()\nanswer = array"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    while len(nums) > (count//2):\n        nums.clear()\n    return nums",
        "input": "[2, 1, 2, 3, 1, 6, 3, 8]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_716",
        "straightlined_code": "nums = [2, 1, 2, 3, 1, 6, 3, 8]\ncount = len(nums)\nwhile len(nums) > (count//2):\n    nums.clear()\nanswer = nums"
    },
    {
        "code": "def f(items, item):\n    while items[-1] == item:\n        items.pop()\n    items.append(item)\n    return len(items)",
        "input": "'bfreratrrbdbzagbretaredtroefcoiqrrneaosf'.split('-'), 'n'",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_720",
        "straightlined_code": "items, item = 'bfreratrrbdbzagbretaredtroefcoiqrrneaosf'.split('-'), 'n'\nwhile items[-1] == item:\n    items.pop()\nitems.append(item)\nanswer = len(items)"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    for num in range(2, count):\n        nums.sort()\n    return nums",
        "input": "[-6, -5, -7, -8, 2]",
        "output": "[-8, -7, -6, -5, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_721",
        "straightlined_code": "nums = [-6, -5, -7, -8, 2]\ncount = len(nums)\nfor num in range(2, count):\n    nums.sort()\nanswer = nums"
    },
    {
        "code": "def f(text, separator):\n    splitted = text.splitlines()\n    if separator:\n        return [' '.join(s) for s in splitted]\n    else:\n        return splitted",
        "input": "'dga nqdk\\rull qcha kl', 1",
        "output": "['d g a   n q d k', 'u l l   q c h a   k l']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_723",
        "straightlined_code": "text, separator = 'dga nqdk\\rull qcha kl', 1\nsplitted = text.splitlines()\nif separator:\n    answer = [' '.join(s) for s in splitted]\nelse:\n    answer = splitted"
    },
    {
        "code": "def f(text):\n    result_list = ['3', '3', '3', '3']\n    if result_list:\n        result_list.clear()\n    return len(text)",
        "input": "\"mrq7y\"",
        "output": "5",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_725",
        "straightlined_code": "text = \"mrq7y\"\nresult_list = ['3', '3', '3', '3']\nif result_list:\n    result_list.clear()\nanswer = len(text)"
    },
    {
        "code": "def f(text):\n    length = len(text) // 2\n    left_half = text[:length]\n    right_half = text[length:][::-1]\n    return left_half + right_half",
        "input": "'n'",
        "output": "'n'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_733",
        "straightlined_code": "text = 'n'\nlength = len(text) // 2\nleft_half = text[:length]\nright_half = text[length:][::-1]\nanswer = left_half + right_half"
    },
    {
        "code": "def f(sentence):\n    if sentence == '':\n        return ''\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    return sentence.capitalize().replace(' ', '')",
        "input": "'(A (b B))'",
        "output": "'Abb'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_735",
        "straightlined_code": "sentence = '(A (b B))'\nif sentence == '':\n    answer = ''\nsentence = sentence.replace('(', '')\nsentence = sentence.replace(')', '')\nanswer = sentence.capitalize().replace(' ', '')"
    },
    {
        "code": "def f(text, characters):\n    for i in range(len(characters)):\n        text = text.rstrip(characters[i::len(characters)])\n    return text",
        "input": "\"r;r;r;r;r;r;r;r;r\", \"x.r\"",
        "output": "'r;r;r;r;r;r;r;r;'",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "3": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_738",
        "straightlined_code": "text, characters = \"r;r;r;r;r;r;r;r;r\", \"x.r\"\nfor i in range(len(characters)):\n    text = text.rstrip(characters[i::len(characters)])\nanswer = text"
    },
    {
        "code": "def f(nums, p):\n    prev_p = p - 1\n    if prev_p < 0: prev_p = len(nums) - 1\n    return nums[prev_p]",
        "input": "[6, 8, 2, 5, 3, 1, 9, 7], 6",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_741",
        "straightlined_code": "nums, p = [6, 8, 2, 5, 3, 1, 9, 7], 6\nprev_p = p - 1\nif prev_p < 0: prev_p = len(nums) - 1\nanswer = nums[prev_p]"
    },
    {
        "code": "def f(text):\n    b = True\n    for x in text:\n        if x.isdigit():\n            b = True\n        else:\n            b = False\n            break\n    return b",
        "input": "\"-1-3\"",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_742",
        "straightlined_code": "text = \"-1-3\"\nb = True\nfor x in text:\n    if x.isdigit():\n        b = True\n    else:\n        b = False\n        break\nanswer = b"
    },
    {
        "code": "def f(text, new_ending):\n    result = list(text)\n    result.extend(new_ending)\n    return ''.join(result)",
        "input": "'jro', 'wdlp'",
        "output": "'jrowdlp'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_744",
        "straightlined_code": "text, new_ending = 'jro', 'wdlp'\nresult = list(text)\nresult.extend(new_ending)\nanswer = ''.join(result)"
    },
    {
        "code": "def f(dct):\n    values = dct.values()\n    result = {}\n    for value in values:\n        item = value.split('.')[0]+'@pinc.uk'\n        result[value] = item\n    return result",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_746",
        "straightlined_code": "dct = {}\nvalues = dct.values()\nresult = {}\nfor value in values:\n    item = value.split('.')[0]+'@pinc.uk'\n    result[value] = item\nanswer = result"
    },
    {
        "code": "def f(text, char, min_count):\n    count = text.count(char)\n    if count < min_count:\n        return text.swapcase()\n    return text",
        "input": "\"wwwwhhhtttpp\", 'w', 3",
        "output": "'wwwwhhhtttpp'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_751",
        "straightlined_code": "text, char, min_count = \"wwwwhhhtttpp\", 'w', 3\ncount = text.count(char)\nif count < min_count:\n    answer = text.swapcase()\nanswer = text"
    },
    {
        "code": "def f(array):\n    output = array.copy()\n    output[0::2] = output[-1::-2]\n    output.reverse()\n    return output",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_761",
        "straightlined_code": "array = []\noutput = array.copy()\noutput[0::2] = output[-1::-2]\noutput.reverse()\nanswer = output"
    },
    {
        "code": "def f(text):\n    text = text.lower()\n    capitalize = text.capitalize()\n    return text[:1] + capitalize[1:]",
        "input": "'this And cPanel'",
        "output": "'this and cpanel'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_762",
        "straightlined_code": "text = 'this And cPanel'\ntext = text.lower()\ncapitalize = text.capitalize()\nanswer = text[:1] + capitalize[1:]"
    },
    {
        "code": "def f(values, value):\n    length = len(values)\n    new_dict = dict.fromkeys(values, value)\n    new_dict[''.join(sorted(values))] = value * 3\n    return new_dict",
        "input": "['0','3'], 117",
        "output": "{'0': 117, '3': 117, '03': 351}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_766",
        "straightlined_code": "values, value = ['0','3'], 117\nlength = len(values)\nnew_dict = dict.fromkeys(values, value)\nnew_dict[''.join(sorted(values))] = value * 3\nanswer = new_dict"
    },
    {
        "code": "def f(text):\n    a = text.strip().split(' ')\n    for i in range(len(a)):\n        if a[i].isdigit() is False:\n            return '-'\n    return \" \".join(a)",
        "input": "\"d khqw whi fwi bbn 41\"",
        "output": "'-'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_767",
        "straightlined_code": "text = \"d khqw whi fwi bbn 41\"\na = text.strip().split(' ')\nfor i in range(len(a)):\n    if a[i].isdigit() is False:\n        answer = '-'\nanswer = \" \".join(a)"
    },
    {
        "code": "def f(text):\n    values = text.split()\n    return '${first}y, ${second}x, ${third}r, ${fourth}p' % dict({\n        'first': values[0],\n        'second': values[1],\n        'third': values[2],\n        'fourth': values[3]\n    })",
        "input": "'python ruby c javascript'",
        "output": "'${first}y, ${second}x, ${third}r, ${fourth}p'",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_779",
        "straightlined_code": "text = 'python ruby c javascript'\nvalues = text.split()\nanswer = '${first}y, ${second}x, ${third}r, ${fourth}p' % dict({\n    'first': values[0],\n    'second': values[1],\n    'third': values[2],\n    'fourth': values[3]\n})"
    },
    {
        "code": "def f(n):\n    streak = ''\n    for c in str(n):\n        streak += c.ljust(int(c) * 2)\n    return streak",
        "input": "1",
        "output": "'1 '",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_785",
        "straightlined_code": "n = 1\nstreak = ''\nfor c in str(n):\n    streak += c.ljust(int(c) * 2)\nanswer = streak"
    },
    {
        "code": "def f(text, letter):\n    if letter in text:\n        start = text.index(letter)\n        return text[start + 1:] + text[:start + 1]\n    return text",
        "input": "'19kefp7', '9'",
        "output": "'kefp719'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_786",
        "straightlined_code": "text, letter = '19kefp7', '9'\nif letter in text:\n    start = text.index(letter)\n    answer = text[start + 1:] + text[:start + 1]\nanswer = text"
    },
    {
        "code": "def f(text):\n    if len(text) == 0:\n        return ''\n    text = text.lower()\n    return text[0].upper() + text[1:]",
        "input": "'xzd'",
        "output": "'Xzd'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_787",
        "straightlined_code": "text = 'xzd'\nif len(text) == 0:\n    answer = ''\ntext = text.lower()\nanswer = text[0].upper() + text[1:]"
    },
    {
        "code": "def f(d):\n    r = {\n        'c': d.copy(),\n        'd': d.copy()\n    }\n    return (r['c'] is r['d'], r['c'] == r['d'])",
        "input": "{'i': 1, 'love': 'parakeets'}",
        "output": "(False, True)",
        "line_execution_counts": {
            "2": 1,
            "3": 1,
            "1": 1,
            "5": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_790",
        "straightlined_code": "d = {'i': 1, 'love': 'parakeets'}\nr = {\n    'c': d.copy(),\n    'd': d.copy()\n}\nanswer = (r['c'] is r['d'], r['c'] == r['d'])"
    },
    {
        "code": "def f(dct):\n    lst = []\n    for key in sorted(dct):\n        lst.append((key, dct[key]))\n    return lst",
        "input": "{'a': 1, 'b': 2, 'c': 3}",
        "output": "[('a', 1), ('b', 2), ('c', 3)]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_797",
        "straightlined_code": "dct = {'a': 1, 'b': 2, 'c': 3}\nlst = []\nfor key in sorted(dct):\n    lst.append((key, dct[key]))\nanswer = lst"
    },
    {
        "code": "def f(nums):\n    output = []\n    for n in nums:\n        output.append((nums.count(n), n))\n    output.sort(reverse=True)\n    return output",
        "input": "[1, 1, 3, 1, 3, 1]",
        "output": "[(4, 1), (4, 1), (4, 1), (4, 1), (2, 3), (2, 3)]",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 1,
            "5": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_0",
        "straightlined_code": "nums = [1, 1, 3, 1, 3, 1]\noutput = []\nfor n in nums:\n    output.append((nums.count(n), n))\noutput.sort(reverse=True)\nanswer = output"
    },
    {
        "code": "def f(names):\n    count = len(names)\n    numberOfNames = 0\n    for i in names:\n        if i.isalpha():\n            numberOfNames += 1\n    return numberOfNames",
        "input": "['sharron', 'Savannah', 'Mike Cherokee']",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 2,
            "6": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_13",
        "straightlined_code": "names = ['sharron', 'Savannah', 'Mike Cherokee']\ncount = len(names)\nnumberOfNames = 0\nfor i in names:\n    if i.isalpha():\n        numberOfNames += 1\nanswer = numberOfNames"
    },
    {
        "code": "def f(text):\n    result = ''\n    for i in range(len(text)-1, -1, -1):\n        result += text[i]\n    return result",
        "input": "'was,'",
        "output": "',saw'",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_20",
        "straightlined_code": "text = 'was,'\nresult = ''\nfor i in range(len(text)-1, -1, -1):\n    result += text[i]\nanswer = result"
    },
    {
        "code": "def f(string):\n    upper = 0\n    for c in string:\n        if c.isupper():\n            upper += 1\n    return upper * (2,1)[upper % 2]",
        "input": "'PoIOarTvpoead'",
        "output": "8",
        "line_execution_counts": {
            "1": 1,
            "2": 14,
            "3": 13,
            "4": 4,
            "5": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_31",
        "straightlined_code": "string = 'PoIOarTvpoead'\nupper = 0\nfor c in string:\n    if c.isupper():\n        upper += 1\nanswer = upper * (2,1)[upper % 2]"
    },
    {
        "code": "def f(nums, odd1, odd2):\n    while odd1 in nums:\n        nums.remove(odd1)\n    while odd2 in nums:\n        nums.remove(odd2)\n    return nums",
        "input": "[1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1",
        "output": "[2, 7, 7, 6, 8, 4, 2, 5, 21]",
        "line_execution_counts": {
            "1": 5,
            "2": 4,
            "3": 5,
            "4": 4,
            "5": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_34",
        "straightlined_code": "nums, odd1, odd2 = [1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1\nwhile odd1 in nums:\n    nums.remove(odd1)\nwhile odd2 in nums:\n    nums.remove(odd2)\nanswer = nums"
    },
    {
        "code": "def f(pattern, items):\n    result = []\n    for text in items:\n        pos = text.rfind(pattern)\n        if pos >= 0:\n            result.append(pos)\n\n    return result",
        "input": "\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 5,
            "7": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_35",
        "straightlined_code": "pattern, items = \" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]\nresult = []\nfor text in items:\n    pos = text.rfind(pattern)\n    if pos >= 0:\n        result.append(pos)\n\nanswer = result"
    },
    {
        "code": "def f(text, letter):\n    counts = {}\n    for char in text:\n        if char not in counts:\n            counts[char] = 1\n        else:\n            counts[char] += 1\n    return counts.get(letter, 0)",
        "input": "'za1fd1as8f7afasdfam97adfa', '7'",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 26,
            "3": 25,
            "4": 10,
            "6": 15,
            "7": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_45",
        "straightlined_code": "text, letter = 'za1fd1as8f7afasdfam97adfa', '7'\ncounts = {}\nfor char in text:\n    if char not in counts:\n        counts[char] = 1\n    else:\n        counts[char] += 1\nanswer = counts.get(letter, 0)"
    },
    {
        "code": "def f(array):\n    array_2 = []\n    for i in array:\n        if i>0:\n            array_2 += [i]\n    array_2.sort(reverse=True)\n    return array_2",
        "input": "[4, 8, 17, 89, 43, 14]",
        "output": "[89, 43, 17, 14, 8, 4]",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 6,
            "5": 1,
            "6": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_55",
        "straightlined_code": "array = [4, 8, 17, 89, 43, 14]\narray_2 = []\nfor i in array:\n    if i>0:\n        array_2 += [i]\narray_2.sort(reverse=True)\nanswer = array_2"
    },
    {
        "code": "def f(text):\n    text = text.upper()\n    count_upper = 0\n    for char in text:\n        if char.isupper():\n            count_upper += 1\n        else:\n            return 'no'\n    return count_upper // 2",
        "input": "'ax'",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "8": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_57",
        "straightlined_code": "text = 'ax'\ntext = text.upper()\ncount_upper = 0\nfor char in text:\n    if char.isupper():\n        count_upper += 1\n    else:\n        answer = 'no'\nanswer = count_upper // 2"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    for i in [i % 2 for i in range(count)]:\n        nums.append(nums[i])\n    return nums",
        "input": "[-1, 0, 0, 1, 1]",
        "output": "[-1, 0, 0, 1, 1, -1, 0, -1, 0, -1]",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 5,
            "4": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_58",
        "straightlined_code": "nums = [-1, 0, 0, 1, 1]\ncount = len(nums)\nfor i in [i % 2 for i in range(count)]:\n    nums.append(nums[i])\nanswer = nums"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    for i in range(0, count):\n        nums.insert(i, nums[i]*2)\n    return nums",
        "input": "[2, 8, -2, 9, 3, 3]",
        "output": "[4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_106",
        "straightlined_code": "nums = [2, 8, -2, 9, 3, 3]\ncount = len(nums)\nfor i in range(0, count):\n    nums.insert(i, nums[i]*2)\nanswer = nums"
    },
    {
        "code": "def f(sentence):\n    ls = list(sentence)\n    for letter in ls:\n        if not letter.istitle():\n            ls.remove(letter)\n    return ''.join(ls)",
        "input": "'XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault'",
        "output": "'XYZLtRRdnHodLTTBIGGeXET fult'",
        "line_execution_counts": {
            "1": 1,
            "2": 29,
            "3": 28,
            "4": 17,
            "5": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_112",
        "straightlined_code": "sentence = 'XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault'\nls = list(sentence)\nfor letter in ls:\n    if not letter.istitle():\n        ls.remove(letter)\nanswer = ''.join(ls)"
    },
    {
        "code": "def f(numbers):\n    for i in range(len(numbers)):\n        if numbers.count('3') > 1:\n            return i\n    return -1",
        "input": "\"23157\"",
        "output": "-1",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "4": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_117",
        "straightlined_code": "numbers = \"23157\"\nfor i in range(len(numbers)):\n    if numbers.count('3') > 1:\n        answer = i\nanswer = -1"
    },
    {
        "code": "def f(text, chars):\n    num_applies = 2\n    extra_chars = ''\n    for i in range(num_applies):\n        extra_chars += chars\n        text = text.replace(extra_chars, '')\n    return text",
        "input": "'zbzquiuqnmfkx', 'mk'",
        "output": "'zbzquiuqnmfkx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "6": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_118",
        "straightlined_code": "text, chars = 'zbzquiuqnmfkx', 'mk'\nnum_applies = 2\nextra_chars = ''\nfor i in range(num_applies):\n    extra_chars += chars\n    text = text.replace(extra_chars, '')\nanswer = text"
    },
    {
        "code": "def f(text, search_string):\n    indexes = []\n    while search_string in text:\n        indexes.append(text.rindex(search_string))\n        text = text[:text.rindex(search_string)]\n    return indexes",
        "input": "'ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ', 'J'",
        "output": "[28, 19, 12, 6]",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 4,
            "5": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_129",
        "straightlined_code": "text, search_string = 'ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ', 'J'\nindexes = []\nwhile search_string in text:\n    indexes.append(text.rindex(search_string))\n    text = text[:text.rindex(search_string)]\nanswer = indexes"
    },
    {
        "code": "def f(single_digit):\n    result = []\n    for c in range(1, 11):\n        if c != single_digit:\n            result.append(c)\n    return result",
        "input": "5",
        "output": "[1, 2, 3, 4, 6, 7, 8, 9, 10]",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 10,
            "4": 9,
            "5": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_146",
        "straightlined_code": "single_digit = 5\nresult = []\nfor c in range(1, 11):\n    if c != single_digit:\n        result.append(c)\nanswer = result"
    },
    {
        "code": "def f(numbers, index):\n    for n in numbers[index:]:\n        numbers.insert(index, n)\n        index += 1\n    return numbers[:index]",
        "input": "[-2, 4, -4], 0",
        "output": "[-2, 4, -4]",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "3": 3,
            "4": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_150",
        "straightlined_code": "numbers, index = [-2, 4, -4], 0\nfor n in numbers[index:]:\n    numbers.insert(index, n)\n    index += 1\nanswer = numbers[:index]"
    },
    {
        "code": "def f(text):\n    n = 0\n    for char in text:\n        if char.isupper():\n            n += 1\n    return n",
        "input": "''.join(['A'] * 20)",
        "output": "20",
        "line_execution_counts": {
            "1": 1,
            "2": 21,
            "3": 20,
            "4": 20,
            "5": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_152",
        "straightlined_code": "text = ''.join(['A'] * 20)\nn = 0\nfor char in text:\n    if char.isupper():\n        n += 1\nanswer = n"
    },
    {
        "code": "def f(ip, n):\n    i = 0\n    out = ''\n    for c in ip:\n        if i == n:\n            out += '\\n'\n            i = 0\n        i += 1\n        out += c\n    return out",
        "input": "\"dskjs hjcdjnxhjicnn\", 4",
        "output": "'dskj\ns hj\ncdjn\nxhji\ncnn'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 20,
            "4": 19,
            "7": 19,
            "8": 19,
            "5": 4,
            "6": 4,
            "9": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_155",
        "straightlined_code": "ip, n = \"dskjs hjcdjnxhjicnn\", 4\ni = 0\nout = ''\nfor c in ip:\n    if i == n:\n        out += '\\n'\n        i = 0\n    i += 1\n    out += c\nanswer = out"
    },
    {
        "code": "def f(phrase):\n    ans = 0\n    for w in phrase.split():\n        for ch in w:\n            if ch == \"0\":\n                ans += 1\n    return ans",
        "input": "\"aboba 212 has 0 digits\"",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 23,
            "4": 18,
            "5": 1,
            "6": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_157",
        "straightlined_code": "phrase = \"aboba 212 has 0 digits\"\nans = 0\nfor w in phrase.split():\n    for ch in w:\n        if ch == \"0\":\n            ans += 1\nanswer = ans"
    },
    {
        "code": "def f(st):\n    swapped = ''\n    for ch in reversed(st):\n        swapped += ch.swapcase()\n    return swapped",
        "input": "'RTiGM'",
        "output": "'mgItr'",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_159",
        "straightlined_code": "st = 'RTiGM'\nswapped = ''\nfor ch in reversed(st):\n    swapped += ch.swapcase()\nanswer = swapped"
    },
    {
        "code": "def f(text):\n    result = ''\n    for char in text:\n        if char.isalnum():\n            result += char.upper()\n    return result",
        "input": "'\u0441 bishop.Swift'",
        "output": "'\u0421BISHOPSWIFT'",
        "line_execution_counts": {
            "1": 1,
            "2": 15,
            "3": 14,
            "4": 12,
            "5": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_162",
        "straightlined_code": "text = '\u0441 bishop.Swift'\nresult = ''\nfor char in text:\n    if char.isalnum():\n        result += char.upper()\nanswer = result"
    },
    {
        "code": "def f(list_x):\n    item_count = len(list_x)\n    new_list = []\n    for i in range(item_count):\n        new_list.append(list_x.pop())\n    return new_list",
        "input": "[5, 8, 6, 8, 4]",
        "output": "[4, 8, 6, 8, 5]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 6,
            "4": 5,
            "5": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_173",
        "straightlined_code": "list_x = [5, 8, 6, 8, 4]\nitem_count = len(list_x)\nnew_list = []\nfor i in range(item_count):\n    new_list.append(list_x.pop())\nanswer = new_list"
    },
    {
        "code": "def f(s):\n    count = 0\n    digits = \"\"\n    for c in s:\n        if c.isdigit():\n            count += 1\n            digits += c\n    return [digits, count]",
        "input": "\"qwfasgahh329kn12a23\"",
        "output": "['3291223', 7]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 20,
            "4": 19,
            "5": 7,
            "6": 7,
            "7": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_181",
        "straightlined_code": "s = \"qwfasgahh329kn12a23\"\ncount = 0\ndigits = \"\"\nfor c in s:\n    if c.isdigit():\n        count += 1\n        digits += c\nanswer = [digits, count]"
    },
    {
        "code": "def f(strings):\n    new_strings = []\n    for string in strings:\n        first_two = string[:2]\n        if first_two.startswith('a') or first_two.startswith('p'):\n            new_strings.append(first_two)\n\n    return new_strings",
        "input": "[\"a\", \"b\", \"car\", \"d\"]",
        "output": "['a']",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 4,
            "5": 1,
            "7": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_188",
        "straightlined_code": "strings = [\"a\", \"b\", \"car\", \"d\"]\nnew_strings = []\nfor string in strings:\n    first_two = string[:2]\n    if first_two.startswith('a') or first_two.startswith('p'):\n        new_strings.append(first_two)\n\nanswer = new_strings"
    },
    {
        "code": "def f(text):\n    short = ''\n    for c in text:\n        if(c.islower()):\n            short += c\n    return short",
        "input": "'980jio80jic kld094398IIl '",
        "output": "'jiojickldl'",
        "line_execution_counts": {
            "1": 1,
            "2": 26,
            "3": 25,
            "4": 10,
            "5": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_190",
        "straightlined_code": "text = '980jio80jic kld094398IIl '\nshort = ''\nfor c in text:\n    if(c.islower()):\n        short += c\nanswer = short"
    },
    {
        "code": "def f(text, value):\n    length = len(text)\n    index = 0\n    while length > 0:\n        value = text[index] + value\n        length -= 1\n        index += 1\n    return value",
        "input": "'jao mt', 'house'",
        "output": "'tm oajhouse'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 6,
            "5": 6,
            "6": 6,
            "7": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_200",
        "straightlined_code": "text, value = 'jao mt', 'house'\nlength = len(text)\nindex = 0\nwhile length > 0:\n    value = text[index] + value\n    length -= 1\n    index += 1\nanswer = value"
    },
    {
        "code": "def f(text):\n    chars = []\n    for c in text:\n        if c.isdigit():\n            chars.append(c)\n    return ''.join(chars[::-1])",
        "input": "'--4yrw 251-//4 6p'",
        "output": "'641524'",
        "line_execution_counts": {
            "1": 1,
            "2": 18,
            "3": 17,
            "4": 6,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_201",
        "straightlined_code": "text = '--4yrw 251-//4 6p'\nchars = []\nfor c in text:\n    if c.isdigit():\n        chars.append(c)\nanswer = ''.join(chars[::-1])"
    },
    {
        "code": "def f(array, list):\n    array.extend(list)\n    [e for e in array if e % 2 == 0]\n    return [e for e in array if e >= 10]",
        "input": "[2, 15], [15, 1]",
        "output": "[15, 15]",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 5
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_202",
        "straightlined_code": "array, list = [2, 15], [15, 1]\narray.extend(list)\n[e for e in array if e % 2 == 0]\nanswer = [e for e in array if e >= 10]"
    },
    {
        "code": "def f(items):\n    result = []\n    for item in items:\n        for d in item:\n            if not d.isdigit():\n                result.append(d)\n    return result",
        "input": "['123', 'cat', 'd dee']",
        "output": "['c', 'a', 't', 'd', ' ', 'd', 'e', 'e']",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 14,
            "4": 11,
            "5": 8,
            "6": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_208",
        "straightlined_code": "items = ['123', 'cat', 'd dee']\nresult = []\nfor item in items:\n    for d in item:\n        if not d.isdigit():\n            result.append(d)\nanswer = result"
    },
    {
        "code": "def f(s):\n    count = 0\n    for c in s:\n        if s.rindex(c) != s.index(c):\n            count+=1\n    return count",
        "input": "\"abca dea ead\"",
        "output": "10",
        "line_execution_counts": {
            "1": 1,
            "2": 13,
            "3": 12,
            "4": 10,
            "5": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_211",
        "straightlined_code": "s = \"abca dea ead\"\ncount = 0\nfor c in s:\n    if s.rindex(c) != s.index(c):\n        count+=1\nanswer = count"
    },
    {
        "code": "def f(nums):\n    for _ in range(len(nums) - 1):\n        nums.reverse()\n    return nums",
        "input": "[1, -9, 7, 2, 6, -3, 3]",
        "output": "[1, -9, 7, 2, 6, -3, 3]",
        "line_execution_counts": {
            "1": 7,
            "2": 6,
            "3": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_212",
        "straightlined_code": "nums = [1, -9, 7, 2, 6, -3, 3]\nfor _ in range(len(nums) - 1):\n    nums.reverse()\nanswer = nums"
    },
    {
        "code": "def f(letters):\n    count = 0\n    for l in letters:\n        if l.isdigit():\n            count += 1\n    return count",
        "input": "\"dp ef1 gh2\"",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 10,
            "4": 2,
            "5": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_216",
        "straightlined_code": "letters = \"dp ef1 gh2\"\ncount = 0\nfor l in letters:\n    if l.isdigit():\n        count += 1\nanswer = count"
    },
    {
        "code": "def f(s1, s2):\n    for k in range(0, len(s2)+len(s1)):\n        s1 += s1[0]\n        if s1.find(s2) >= 0:\n            return True\n    return False",
        "input": "\"Hello\", \")\"",
        "output": "False",
        "line_execution_counts": {
            "1": 7,
            "2": 6,
            "3": 6,
            "5": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_219",
        "straightlined_code": "s1, s2 = \"Hello\", \")\"\nfor k in range(0, len(s2)+len(s1)):\n    s1 += s1[0]\n    if s1.find(s2) >= 0:\n        answer = True\nanswer = False"
    },
    {
        "code": "def f(ls, n):\n    answer = 0\n    for i in ls:\n        if i[0] == n:\n            answer = i\n    return answer",
        "input": "[[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1",
        "output": "[1, 9, 4]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1,
            "5": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_238",
        "straightlined_code": "ls, n = [[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1\nanswer = 0\nfor i in ls:\n    if i[0] == n:\n        answer = i\nanswer = answer"
    },
    {
        "code": "def f(alphabet, s):\n    a = [x for x in alphabet if x.upper() in s]\n    if s.upper() == s:\n        a.append('all_uppercased')\n    return a",
        "input": "'abcdefghijklmnopqrstuvwxyz', \"uppercased # % ^ @ ! vz.\"",
        "output": "[]",
        "line_execution_counts": {
            "1": 27,
            "2": 1,
            "4": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_245",
        "straightlined_code": "alphabet, s = 'abcdefghijklmnopqrstuvwxyz', \"uppercased # % ^ @ ! vz.\"\na = [x for x in alphabet if x.upper() in s]\nif s.upper() == s:\n    a.append('all_uppercased')\nanswer = a"
    },
    {
        "code": "def f(text):\n    count = len(text)\n    for i in range(-count+1, 0):\n        text = text + text[i]\n    return text",
        "input": "'wlace A'",
        "output": "'wlace Alc l  '",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_250",
        "straightlined_code": "text = 'wlace A'\ncount = len(text)\nfor i in range(-count+1, 0):\n    text = text + text[i]\nanswer = text"
    },
    {
        "code": "def f(d, k):\n    new_d = {}\n    for key, val in d.items():\n        if key < k:\n            new_d[key] = val\n    return new_d",
        "input": "{1: 2, 2: 4, 3: 3}, 3",
        "output": "{1: 2, 2: 4}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 2,
            "5": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_265",
        "straightlined_code": "d, k = {1: 2, 2: 4, 3: 3}, 3\nnew_d = {}\nfor key, val in d.items():\n    if key < k:\n        new_d[key] = val\nanswer = new_d"
    },
    {
        "code": "def f(nums, target):\n    count = 0\n    for n1 in nums:\n        for n2 in nums:\n            count += (n1+n2==target)\n    return count",
        "input": "[1, 2, 3], 4",
        "output": "3",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 12,
            "4": 9,
            "5": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_274",
        "straightlined_code": "nums, target = [1, 2, 3], 4\ncount = 0\nfor n1 in nums:\n    for n2 in nums:\n        count += (n1+n2==target)\nanswer = count"
    },
    {
        "code": "def f(array1, array2):\n    result = dict.fromkeys(array1)\n    for key in result:\n        result[key] = [el for el in array2 if key * 2 > el]\n    return result",
        "input": "[0, 132], [5, 991, 32, 997]",
        "output": "{0: [], 132: [5, 32]}",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 10,
            "4": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_278",
        "straightlined_code": "array1, array2 = [0, 132], [5, 991, 32, 997]\nresult = dict.fromkeys(array1)\nfor key in result:\n    result[key] = [el for el in array2 if key * 2 > el]\nanswer = result"
    },
    {
        "code": "def f(s1, s2):\n    position = 1\n    count = 0\n    while position > 0:\n        position = s1.find(s2, position)\n        count += 1\n        position += 1\n    return count",
        "input": "'xinyyexyxx', 'xx'",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "6": 2,
            "7": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_282",
        "straightlined_code": "s1, s2 = 'xinyyexyxx', 'xx'\nposition = 1\ncount = 0\nwhile position > 0:\n    position = s1.find(s2, position)\n    count += 1\n    position += 1\nanswer = count"
    },
    {
        "code": "def f(text, prefix):\n    idx = 0\n    for letter in prefix:\n        if text[idx] != letter:\n            return None\n        idx += 1\n    return text[idx:]",
        "input": "'bestest', 'bestest'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 8,
            "3": 7,
            "5": 7,
            "6": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_284",
        "straightlined_code": "text, prefix = 'bestest', 'bestest'\nidx = 0\nfor letter in prefix:\n    if text[idx] != letter:\n        answer = None\n    idx += 1\nanswer = text[idx:]"
    },
    {
        "code": "def f(text):\n    new_text = [c if c.isdigit() else '*' for c in text]\n    return ''.join(new_text)",
        "input": "'5f83u23saa'",
        "output": "'5*83*23***'",
        "line_execution_counts": {
            "1": 11,
            "2": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_292",
        "straightlined_code": "text = '5f83u23saa'\nnew_text = [c if c.isdigit() else '*' for c in text]\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    for i in range(-count+1, 0):\n        nums.extend([nums[i], nums[i]])\n    return nums",
        "input": "[0, 6, 2, -1, -2]",
        "output": "[0, 6, 2, -1, -2, 6, 6, -2, -2, -2, -2, -2, -2]",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_301",
        "straightlined_code": "nums = [0, 6, 2, -1, -2]\ncount = len(nums)\nfor i in range(-count+1, 0):\n    nums.extend([nums[i], nums[i]])\nanswer = nums"
    },
    {
        "code": "def f(text):\n    rtext = list(text)\n    for i in range(1, len(rtext) - 1):\n        rtext.insert(i + 1, '|')\n    return ''.join(rtext)",
        "input": "'pxcznyf'",
        "output": "'px|||||cznyf'",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_307",
        "straightlined_code": "text = 'pxcznyf'\nrtext = list(text)\nfor i in range(1, len(rtext) - 1):\n    rtext.insert(i + 1, '|')\nanswer = ''.join(rtext)"
    },
    {
        "code": "def f(strings):\n    occurances = {}\n    for string in strings:\n        if string not in occurances:\n            occurances[string] = strings.count(string)\n    return occurances",
        "input": "[\"La\", \"Q\", \"9\", \"La\", \"La\"]",
        "output": "{'La': 3, 'Q': 1, '9': 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 3,
            "5": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_308",
        "straightlined_code": "strings = [\"La\", \"Q\", \"9\", \"La\", \"La\"]\noccurances = {}\nfor string in strings:\n    if string not in occurances:\n        occurances[string] = strings.count(string)\nanswer = occurances"
    },
    {
        "code": "def f(value, char):\n    total = 0\n    for c in value:\n        if c == char or c == char.lower():\n            total += 1\n    return total",
        "input": "'234rtccde', 'e'",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 1,
            "5": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_318",
        "straightlined_code": "value, char = '234rtccde', 'e'\ntotal = 0\nfor c in value:\n    if c == char or c == char.lower():\n        total += 1\nanswer = total"
    },
    {
        "code": "def f(needle, haystack):\n    count = 0\n    while needle in haystack:\n        haystack = haystack.replace(needle, '', 1)\n        count += 1\n    return count",
        "input": "'a', 'xxxaaxaaxx'",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 4,
            "5": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_319",
        "straightlined_code": "needle, haystack = 'a', 'xxxaaxaaxx'\ncount = 0\nwhile needle in haystack:\n    haystack = haystack.replace(needle, '', 1)\n    count += 1\nanswer = count"
    },
    {
        "code": "def f(text):\n    number = 0\n    for t in text:\n        if t.isnumeric():\n            number += 1\n    return number",
        "input": "'Thisisastring'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 14,
            "3": 13,
            "5": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_326",
        "straightlined_code": "text = 'Thisisastring'\nnumber = 0\nfor t in text:\n    if t.isnumeric():\n        number += 1\nanswer = number"
    },
    {
        "code": "def f(text):\n    ans = []\n    for char in text:\n        if char.isdigit():\n            ans.append(char)\n        else:\n            ans.append(' ')\n    return ''.join(ans)",
        "input": "'m4n2o'",
        "output": "' 4 2 '",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "6": 3,
            "4": 2,
            "7": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_330",
        "straightlined_code": "text = 'm4n2o'\nans = []\nfor char in text:\n    if char.isdigit():\n        ans.append(char)\n    else:\n        ans.append(' ')\nanswer = ''.join(ans)"
    },
    {
        "code": "def f(array, elem):\n    elem = str(elem)\n    d = 0\n    for i in array:\n        if str(i) == elem:\n            d += 1\n    return d",
        "input": "[-1, 2, 1, -8, -8, 2], 2",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 6,
            "5": 2,
            "6": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_339",
        "straightlined_code": "array, elem = [-1, 2, 1, -8, -8, 2], 2\nelem = str(elem)\nd = 0\nfor i in array:\n    if str(i) == elem:\n        d += 1\nanswer = d"
    },
    {
        "code": "def f(s):\n    r = []\n    for i in range(len(s) - 1, 0 - 1, -1):\n        r += s[i]\n    return ''.join(r)",
        "input": "'crew'",
        "output": "'werc'",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_357",
        "straightlined_code": "s = 'crew'\nr = []\nfor i in range(len(s) - 1, 0 - 1, -1):\n    r += s[i]\nanswer = ''.join(r)"
    },
    {
        "code": "def f(lines):\n    for i in range(len(lines)):\n        lines[i] = lines[i].center(len(lines[-1]))\n    return lines",
        "input": "['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']",
        "output": "['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']",
        "line_execution_counts": {
            "1": 5,
            "2": 4,
            "3": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_359",
        "straightlined_code": "lines = ['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']\nfor i in range(len(lines)):\n    lines[i] = lines[i].center(len(lines[-1]))\nanswer = lines"
    },
    {
        "code": "def f(nums, verdict):\n    res = [x for x in nums if x != 0]\n    result = [[x, verdict(x)] for x in res]\n    if result:\n        return result\n    return 'error - no numbers or all zeros!'",
        "input": "[0, 3, 0, 1], lambda x: x < 2",
        "output": "[[3, False], [1, True]]",
        "line_execution_counts": {
            "1": 5,
            "2": 3,
            "3": 1,
            "4": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_364",
        "straightlined_code": "nums, verdict = [0, 3, 0, 1], lambda x: x < 2\nres = [x for x in nums if x != 0]\nresult = [[x, verdict(x)] for x in res]\nif result:\n    answer = result\nanswer = 'error - no numbers or all zeros!'"
    },
    {
        "code": "def f(string):\n    tmp = string.lower()\n    for char in string.lower():\n        if char in tmp:\n            tmp = tmp.replace(char, '', 1)\n    return tmp",
        "input": "'[ Hello ]+ Hello, World!!_ Hi'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 30,
            "3": 29,
            "4": 29,
            "5": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_366",
        "straightlined_code": "string = '[ Hello ]+ Hello, World!!_ Hi'\ntmp = string.lower()\nfor char in string.lower():\n    if char in tmp:\n        tmp = tmp.replace(char, '', 1)\nanswer = tmp"
    },
    {
        "code": "def f(string, numbers):\n    arr = []\n    for num in numbers:\n        arr.append(string.zfill(num))\n    return ' '.join(arr)",
        "input": "'4327', [2, 8, 9, 2, 7, 1]",
        "output": "'4327 00004327 000004327 4327 0004327 4327'",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_368",
        "straightlined_code": "string, numbers = '4327', [2, 8, 9, 2, 7, 1]\narr = []\nfor num in numbers:\n    arr.append(string.zfill(num))\nanswer = ' '.join(arr)"
    },
    {
        "code": "def f(nums):\n    for odd in nums[:]:\n        if odd % 2 != 0:\n            nums.remove(odd)\n    sum_ = 0\n    for num in nums:\n        sum_ += num\n    return sum_",
        "input": "[11, 21, 0, 11]",
        "output": "0",
        "line_execution_counts": {
            "1": 5,
            "2": 4,
            "3": 3,
            "4": 1,
            "5": 2,
            "6": 1,
            "7": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_371",
        "straightlined_code": "nums = [11, 21, 0, 11]\nfor odd in nums[:]:\n    if odd % 2 != 0:\n        nums.remove(odd)\nsum_ = 0\nfor num in nums:\n    sum_ += num\nanswer = sum_"
    },
    {
        "code": "def f(seq, v):\n    a = []\n    for i in seq:\n        if i.endswith(v):\n            a.append(i*2)\n    return a",
        "input": "[ 'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA' ], 'zz'",
        "output": "['zzzz']",
        "line_execution_counts": {
            "1": 1,
            "2": 9,
            "3": 8,
            "4": 1,
            "5": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_374",
        "straightlined_code": "seq, v = [ 'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA' ], 'zz'\na = []\nfor i in seq:\n    if i.endswith(v):\n        a.append(i*2)\nanswer = a"
    },
    {
        "code": "def f(text):\n    for i in range(len(text)):\n        if text[0:i].startswith(\"two\"):\n            return text[i:]\n    return 'no'",
        "input": "\"2two programmers\"",
        "output": "'no'",
        "line_execution_counts": {
            "1": 17,
            "2": 16,
            "4": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_376",
        "straightlined_code": "text = \"2two programmers\"\nfor i in range(len(text)):\n    if text[0:i].startswith(\"two\"):\n        answer = text[i:]\nanswer = 'no'"
    },
    {
        "code": "def f(concat, di):\n    count = len(di)\n    for i in range(count):\n        if di[str(i)] in concat:\n            di.pop(str(i))\n    return \"Done!\"",
        "input": "'mid', {'0':'q','1':'f','2':'w','3':'i'}",
        "output": "'Done!'",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1,
            "5": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_386",
        "straightlined_code": "concat, di = 'mid', {'0':'q','1':'f','2':'w','3':'i'}\ncount = len(di)\nfor i in range(count):\n    if di[str(i)] in concat:\n        di.pop(str(i))\nanswer = \"Done!\""
    },
    {
        "code": "def f(nums):\n    a = 0\n    for i in range(len(nums)):\n        nums.insert(i, nums[a])\n        a += 1\n    return nums",
        "input": "[1, 3, -1, 1, -2, 6]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6]",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 6,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_410",
        "straightlined_code": "nums = [1, 3, -1, 1, -2, 6]\na = 0\nfor i in range(len(nums)):\n    nums.insert(i, nums[a])\n    a += 1\nanswer = nums"
    },
    {
        "code": "def f(d):\n    result = []\n    while len(d.keys()) > 0:\n        result.append(d.popitem())\n    return result",
        "input": "{5: 1, 'abc': 2, 'defghi': 2, 87.29: 3}",
        "output": "[(87.29, 3), ('defghi', 2), ('abc', 2), (5, 1)]",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_429",
        "straightlined_code": "d = {5: 1, 'abc': 2, 'defghi': 2, 87.29: 3}\nresult = []\nwhile len(d.keys()) > 0:\n    result.append(d.popitem())\nanswer = result"
    },
    {
        "code": "def f(tap_hierarchy):\n    hierarchy = {}\n    for gift in tap_hierarchy:\n        hierarchy = hierarchy.fromkeys(gift, None)\n    return hierarchy",
        "input": "['john', 'doe', 'the', 'john', 'doe']",
        "output": "{'d': None, 'o': None, 'e': None}",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_437",
        "straightlined_code": "tap_hierarchy = ['john', 'doe', 'the', 'john', 'doe']\nhierarchy = {}\nfor gift in tap_hierarchy:\n    hierarchy = hierarchy.fromkeys(gift, None)\nanswer = hierarchy"
    },
    {
        "code": "def f(text):\n    for space in text:\n        if space == ' ':\n            text = text.lstrip()\n        else:\n            text = text.replace('cd', space)\n    return text",
        "input": "\"lorem ipsum\"",
        "output": "'lorem ipsum'",
        "line_execution_counts": {
            "1": 12,
            "2": 11,
            "5": 10,
            "3": 1,
            "6": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_443",
        "straightlined_code": "text = \"lorem ipsum\"\nfor space in text:\n    if space == ' ':\n        text = text.lstrip()\n    else:\n        text = text.replace('cd', space)\nanswer = text"
    },
    {
        "code": "def f(text):\n    counter = 0\n    for char in text:\n        if char.isalpha():\n            counter += 1\n    return counter",
        "input": "'l000*',",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1,
            "5": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_452",
        "straightlined_code": "text = 'l000*',\ncounter = 0\nfor char in text:\n    if char.isalpha():\n        counter += 1\nanswer = counter"
    },
    {
        "code": "def f(text):\n    uppers = 0\n    for c in text:\n        if c.isupper():\n            uppers += 1\n    return text.upper() if uppers >= 10 else text",
        "input": "'?XyZ'",
        "output": "'?XyZ'",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 2,
            "5": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_455",
        "straightlined_code": "text = '?XyZ'\nuppers = 0\nfor c in text:\n    if c.isupper():\n        uppers += 1\nanswer = text.upper() if uppers >= 10 else text"
    },
    {
        "code": "def f(dict):\n    result = dict.copy()\n    remove_keys = []\n    for k, v in dict.items():\n        if v in dict:\n            del result[k]\n    return result",
        "input": "{-1: -1, 5: 5, 3: 6, -4: -4}",
        "output": "{3: 6}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 5,
            "4": 4,
            "5": 3,
            "6": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_463",
        "straightlined_code": "dict = {-1: -1, 5: 5, 3: 6, -4: -4}\nresult = dict.copy()\nremove_keys = []\nfor k, v in dict.items():\n    if v in dict:\n        del result[k]\nanswer = result"
    },
    {
        "code": "def f(a, split_on):\n    t = a.split()\n    a = []\n    for i in t:\n        for j in i:\n            a.append(j)\n    if split_on in a:\n        return True\n    else:\n        return False",
        "input": "\"booty boot-boot bootclass\", 'k'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 26,
            "5": 23,
            "6": 1,
            "9": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_476",
        "straightlined_code": "a, split_on = \"booty boot-boot bootclass\", 'k'\nt = a.split()\na = []\nfor i in t:\n    for j in i:\n        a.append(j)\nif split_on in a:\n    answer = True\nelse:\n    answer = False"
    },
    {
        "code": "def f(sb):\n    d = {}\n    for s in sb:\n        d[s] = d.get(s, 0) + 1\n    return d",
        "input": "'meow meow'",
        "output": "{'m': 2, 'e': 2, 'o': 2, 'w': 2, ' ': 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_478",
        "straightlined_code": "sb = 'meow meow'\nd = {}\nfor s in sb:\n    d[s] = d.get(s, 0) + 1\nanswer = d"
    },
    {
        "code": "def f(xs):\n    for i in range(-1, -len(xs)-1, -1):\n        xs.extend([xs[i], xs[i]])\n    return xs",
        "input": "[4, 8, 8, 5]",
        "output": "[4, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "line_execution_counts": {
            "1": 5,
            "2": 4,
            "3": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_491",
        "straightlined_code": "xs = [4, 8, 8, 5]\nfor i in range(-1, -len(xs)-1, -1):\n    xs.extend([xs[i], xs[i]])\nanswer = xs"
    },
    {
        "code": "def f(string):\n    while string:\n        if string[-1].isalpha():\n            return string\n        string = string[:-1]\n    return string",
        "input": "'--4/0-209'",
        "output": "''",
        "line_execution_counts": {
            "1": 10,
            "2": 9,
            "4": 9,
            "5": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_505",
        "straightlined_code": "string = '--4/0-209'\nwhile string:\n    if string[-1].isalpha():\n        answer = string\n    string = string[:-1]\nanswer = string"
    },
    {
        "code": "def f(nums):\n    m = max(nums)\n    for i in range(m):\n        nums.reverse()\n    return nums",
        "input": "[43, 0, 4, 77, 5, 2, 0, 9, 77]",
        "output": "[77, 9, 0, 2, 5, 77, 4, 0, 43]",
        "line_execution_counts": {
            "1": 1,
            "2": 78,
            "3": 77,
            "4": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_521",
        "straightlined_code": "nums = [43, 0, 4, 77, 5, 2, 0, 9, 77]\nm = max(nums)\nfor i in range(m):\n    nums.reverse()\nanswer = nums"
    },
    {
        "code": "def f(numbers):\n    floats = [n % 1 for n in numbers]\n    return floats if 1 in floats else []",
        "input": "range(100, 120)",
        "output": "[]",
        "line_execution_counts": {
            "1": 21,
            "2": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_522",
        "straightlined_code": "numbers = range(100, 120)\nfloats = [n % 1 for n in numbers]\nanswer = floats if 1 in floats else []"
    },
    {
        "code": "def f(dict0):\n    new = dict0.copy()\n    for i in range(len(new)-1):\n        dict0[sorted(new)[i]] = i\n    return dict0",
        "input": "{2: 5, 4: 1, 3: 5, 1: 3, 5: 1}",
        "output": "{2: 1, 4: 3, 3: 2, 1: 0, 5: 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_524",
        "straightlined_code": "dict0 = {2: 5, 4: 1, 3: 5, 1: 3, 5: 1}\nnew = dict0.copy()\nfor i in range(len(new)-1):\n    dict0[sorted(new)[i]] = i\nanswer = dict0"
    },
    {
        "code": "def f(cat):\n    digits = 0\n    for char in cat:\n        if char.isdigit():\n            digits += 1\n    return digits",
        "input": "'C24Bxxx982ab'",
        "output": "5",
        "line_execution_counts": {
            "1": 1,
            "2": 13,
            "3": 12,
            "4": 5,
            "5": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_536",
        "straightlined_code": "cat = 'C24Bxxx982ab'\ndigits = 0\nfor char in cat:\n    if char.isdigit():\n        digits += 1\nanswer = digits"
    },
    {
        "code": "def f(array):\n    result = []\n    index = 0\n    while index < len(array):\n        result.append(array.pop())\n        index += 2\n    return result",
        "input": "[8, 8, -4, -9, 2, 8, -1, 8]",
        "output": "[8, -1, 8]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 3,
            "6": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_545",
        "straightlined_code": "array = [8, 8, -4, -9, 2, 8, -1, 8]\nresult = []\nindex = 0\nwhile index < len(array):\n    result.append(array.pop())\n    index += 2\nanswer = result"
    },
    {
        "code": "def f(data):\n    members = []\n    for item in data:\n        for member in data[item]:\n            if member not in members:\n                members.append(member)\n    return sorted(members)",
        "input": "{'inf': ['a', 'b'], 'a': [\"inf\", \"c\"], 'd': [\"inf\"]}",
        "output": "['a', 'b', 'c', 'inf']",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 8,
            "4": 5,
            "5": 4,
            "6": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "sample_551",
        "straightlined_code": "data = {'inf': ['a', 'b'], 'a': [\"inf\", \"c\"], 'd': [\"inf\"]}\nmembers = []\nfor item in data:\n    for member in data[item]:\n        if member not in members:\n            members.append(member)\nanswer = sorted(members)"
    },
    {
        "code": "def f(text):\n    for i in range(len(text)):\n        if text[i] == ' ':\n            text = text.replace(' ', '\\t', 1)\n    return text.expandtabs(4)",
        "input": "'\\n\\n\\t\\tz\\td\\ng\\n\\t\\t\\te'",
        "output": "'\n\n        z   d\ng\n            e'",
        "line_execution_counts": {
            "1": 15,
            "2": 14,
            "4": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "sample_556",
        "straightlined_code": "text = '\\n\\n\\t\\tz\\td\\ng\\n\\t\\t\\te'\nfor i in range(len(text)):\n    if text[i] == ' ':\n        text = text.replace(' ', '\\t', 1)\nanswer = text.expandtabs(4)"
    },
    {
        "code": "def f(txt):\n    coincidences = {}\n    for c in txt:\n        if c in coincidences:\n            coincidences[c] += 1\n        else:\n            coincidences[c] = 1\n    return sum(coincidences.values())",
        "input": "\"11 1 1\"",
        "output": "6",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "6": 2,
            "4": 4,
            "7": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_569",
        "straightlined_code": "txt = \"11 1 1\"\ncoincidences = {}\nfor c in txt:\n    if c in coincidences:\n        coincidences[c] += 1\n    else:\n        coincidences[c] = 1\nanswer = sum(coincidences.values())"
    },
    {
        "code": "def f(obj):\n    for k, v in obj.items():\n        if v >= 0:\n            obj[k] = -v\n    return obj",
        "input": "{'R': 0, 'T': 3, 'F': -6, 'K': 0}",
        "output": "{'R': 0, 'T': -3, 'F': -6, 'K': 0}",
        "line_execution_counts": {
            "1": 5,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_578",
        "straightlined_code": "obj = {'R': 0, 'T': 3, 'F': -6, 'K': 0}\nfor k, v in obj.items():\n    if v >= 0:\n        obj[k] = -v\nanswer = obj"
    },
    {
        "code": "def f(k, j):\n    arr = []\n    for i in range(k):\n        arr.append(j)\n    return arr",
        "input": "7, 5",
        "output": "[5, 5, 5, 5, 5, 5, 5]",
        "line_execution_counts": {
            "1": 1,
            "2": 8,
            "3": 7,
            "4": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_582",
        "straightlined_code": "k, j = 7, 5\narr = []\nfor i in range(k):\n    arr.append(j)\nanswer = arr"
    },
    {
        "code": "def f(text):\n    for i in range(10, 0, -1):\n        text = text.lstrip(str(i))\n    return text",
        "input": "\"25000   $\"",
        "output": "'5000   $'",
        "line_execution_counts": {
            "1": 11,
            "2": 10,
            "3": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_590",
        "straightlined_code": "text = \"25000   $\"\nfor i in range(10, 0, -1):\n    text = text.lstrip(str(i))\nanswer = text"
    },
    {
        "code": "def f(text):\n    count = 0\n    for i in text:\n        if i in '.?!.,':\n            count += 1\n    return count",
        "input": "\"bwiajegrwjd??djoda,?\"",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "2": 21,
            "3": 20,
            "4": 4,
            "5": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_625",
        "straightlined_code": "text = \"bwiajegrwjd??djoda,?\"\ncount = 0\nfor i in text:\n    if i in '.?!.,':\n        count += 1\nanswer = count"
    },
    {
        "code": "def f(text):\n    valid_chars = ['-', '_', '+', '.', '/', ' ']\n    text = text.upper()\n    for char in text:\n        if char.isalnum() == False and char not in valid_chars:\n            return False\n    return True",
        "input": "\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 18,
            "4": 18,
            "5": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_635",
        "straightlined_code": "text = \"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"\nvalid_chars = ['-', '_', '+', '.', '/', ' ']\ntext = text.upper()\nfor char in text:\n    if char.isalnum() == False and char not in valid_chars:\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(d):\n    r = {}\n    while len(d) > 0:\n        r = {**r, **d}\n        del d[max(d.keys())]\n    return r",
        "input": "{ 3: 'A3', 1: 'A1', 2: 'A2' }",
        "output": "{3: 'A3', 1: 'A1', 2: 'A2'}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_636",
        "straightlined_code": "d = { 3: 'A3', 1: 'A1', 2: 'A2' }\nr = {}\nwhile len(d) > 0:\n    r = {**r, **d}\n    del d[max(d.keys())]\nanswer = r"
    },
    {
        "code": "def f(text):\n    i = 0\n    while i < len(text) and text[i].isspace():\n        i+=1\n    if i == len(text):\n        return 'space'\n    return 'no'",
        "input": "\"     \"",
        "output": "'space'",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1,
            "5": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_642",
        "straightlined_code": "text = \"     \"\ni = 0\nwhile i < len(text) and text[i].isspace():\n    i+=1\nif i == len(text):\n    answer = 'space'\nanswer = 'no'"
    },
    {
        "code": "def f(text, tabsize):\n    return '\\n'.join([\n    \tt.expandtabs(tabsize)\n        for t in text.split('\\n')\n    ])",
        "input": "\"\\tf9\\n\\tldf9\\n\\tadf9!\\n\\tf9?\", 1",
        "output": "' f9\n ldf9\n adf9!\n f9?'",
        "line_execution_counts": {
            "1": 6,
            "3": 5,
            "2": 4
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_649",
        "straightlined_code": "text, tabsize = \"\\tf9\\n\\tldf9\\n\\tadf9!\\n\\tf9?\", 1\nanswer = '\\n'.join([\n\tt.expandtabs(tabsize)\n    for t in text.split('\\n')\n])"
    },
    {
        "code": "def f(text, letter):\n    t = text\n    for alph in text:\n        t = t.replace(alph, \"\")\n    return len(t.split(letter))",
        "input": "\"c, c, c ,c, c\", \"c\"",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 14,
            "3": 13,
            "4": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_653",
        "straightlined_code": "text, letter = \"c, c, c ,c, c\", \"c\"\nt = text\nfor alph in text:\n    t = t.replace(alph, \"\")\nanswer = len(t.split(letter))"
    },
    {
        "code": "def f(letters):\n    a = [] \n    for i in range(len(letters)):\n        if letters[i] in a:\n            return 'no'\n        a.append(letters[i]) \n    return 'yes'",
        "input": "['b', 'i', 'r', 'o', 's', 'j', 'v', 'p']",
        "output": "'yes'",
        "line_execution_counts": {
            "1": 1,
            "2": 9,
            "3": 8,
            "5": 8,
            "6": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_656",
        "straightlined_code": "letters = ['b', 'i', 'r', 'o', 's', 'j', 'v', 'p']\na = [] \nfor i in range(len(letters)):\n    if letters[i] in a:\n        answer = 'no'\n    a.append(letters[i]) \nanswer = 'yes'"
    },
    {
        "code": "def f(text):\n    for punct in '!.?,:;':\n        if text.count(punct) > 1:\n            return 'no'\n        if text.endswith(punct):\n            return 'no'\n    return text.title()",
        "input": "\"djhasghasgdha\"",
        "output": "'Djhasghasgdha'",
        "line_execution_counts": {
            "1": 7,
            "2": 6,
            "4": 6,
            "6": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_657",
        "straightlined_code": "text = \"djhasghasgdha\"\nfor punct in '!.?,:;':\n    if text.count(punct) > 1:\n        answer = 'no'\n    if text.endswith(punct):\n        answer = 'no'\nanswer = text.title()"
    },
    {
        "code": "def f(d, get_ary):\n    result = []\n    for key in get_ary:\n        result.append(d.get(key))\n    return result",
        "input": "{3: \"swims like a bull\"}, [3, 2, 'c', True, 5]",
        "output": "['swims like a bull', None, None, None, None]",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_658",
        "straightlined_code": "d, get_ary = {3: \"swims like a bull\"}, [3, 2, 'c', True, 5]\nresult = []\nfor key in get_ary:\n    result.append(d.get(key))\nanswer = result"
    },
    {
        "code": "def f(chars):\n    s = \"\"\n    for ch in chars:\n        if chars.count(ch) % 2 == 0:\n            s += ch.upper()\n        else:\n            s += ch\n    return s",
        "input": "\"acbced\"",
        "output": "'aCbCed'",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "6": 4,
            "4": 2,
            "7": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_665",
        "straightlined_code": "chars = \"acbced\"\ns = \"\"\nfor ch in chars:\n    if chars.count(ch) % 2 == 0:\n        s += ch.upper()\n    else:\n        s += ch\nanswer = s"
    },
    {
        "code": "def f(text):\n    letters = ''\n    for i in range(len(text)):\n        if text[i].isalnum():\n            letters += text[i]\n    return letters",
        "input": "\"we@32r71g72ug94=(823658*!@324\"",
        "output": "'we32r71g72ug94823658324'",
        "line_execution_counts": {
            "1": 1,
            "2": 30,
            "3": 29,
            "4": 23,
            "5": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_680",
        "straightlined_code": "text = \"we@32r71g72ug94=(823658*!@324\"\nletters = ''\nfor i in range(len(text)):\n    if text[i].isalnum():\n        letters += text[i]\nanswer = letters"
    },
    {
        "code": "def f(nums):\n    l = []\n    for i in nums:\n        if i not in l:\n            l.append(i)\n    return l",
        "input": "[3, 1, 9, 0, 2, 0, 8]",
        "output": "[3, 1, 9, 0, 2, 8]",
        "line_execution_counts": {
            "1": 1,
            "2": 8,
            "3": 7,
            "4": 6,
            "5": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_688",
        "straightlined_code": "nums = [3, 1, 9, 0, 2, 0, 8]\nl = []\nfor i in nums:\n    if i not in l:\n        l.append(i)\nanswer = l"
    },
    {
        "code": "def f(text):\n    t = text\n    for i in text:\n        text = text.replace(i, '')\n    return str(len(text)) + t",
        "input": "'ThisIsSoAtrocious'",
        "output": "'0ThisIsSoAtrocious'",
        "line_execution_counts": {
            "1": 1,
            "2": 18,
            "3": 17,
            "4": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_718",
        "straightlined_code": "text = 'ThisIsSoAtrocious'\nt = text\nfor i in text:\n    text = text.replace(i, '')\nanswer = str(len(text)) + t"
    },
    {
        "code": "def f(text):\n    ws = 0\n    for s in text:\n        if s.isspace():\n            ws += 1\n    return ws, len(text)",
        "input": "\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"",
        "output": "(2, 34)",
        "line_execution_counts": {
            "1": 1,
            "2": 35,
            "3": 34,
            "4": 2,
            "5": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_726",
        "straightlined_code": "text = \"jcle oq wsnibktxpiozyxmopqkfnrfjds\"\nws = 0\nfor s in text:\n    if s.isspace():\n        ws += 1\nanswer = ws, len(text)"
    },
    {
        "code": "def f(numbers, prefix):\n    return sorted(n[len(prefix):] if (len(n) > len(prefix) and n.startswith(prefix)) else n\n                  for n in numbers)",
        "input": "['ix', 'dxh', 'snegi', 'wiubvu'], ''",
        "output": "['dxh', 'ix', 'snegi', 'wiubvu']",
        "line_execution_counts": {
            "1": 11,
            "2": 5
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_727",
        "straightlined_code": "numbers, prefix = ['ix', 'dxh', 'snegi', 'wiubvu'], ''\nanswer = sorted(n[len(prefix):] if (len(n) > len(prefix) and n.startswith(prefix)) else n\n              for n in numbers)"
    },
    {
        "code": "def f(text):\n    m = 0\n    cnt = 0\n    for i in text.split():\n        if len(i) > m:\n            cnt += 1\n            m = len(i)\n    return cnt",
        "input": "\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 11,
            "4": 10,
            "5": 2,
            "6": 2,
            "7": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_730",
        "straightlined_code": "text = \"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"\nm = 0\ncnt = 0\nfor i in text.split():\n    if len(i) > m:\n        cnt += 1\n        m = len(i)\nanswer = cnt"
    },
    {
        "code": "def f(char_freq):\n    result = {}\n    for k, v in char_freq.copy().items():\n        result[k] = v // 2\n    return result",
        "input": "{'u': 20, 'v': 5, 'b': 7, 'w': 3, 'x': 3}",
        "output": "{'u': 10, 'v': 2, 'b': 3, 'w': 1, 'x': 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_732",
        "straightlined_code": "char_freq = {'u': 20, 'v': 5, 'b': 7, 'w': 3, 'x': 3}\nresult = {}\nfor k, v in char_freq.copy().items():\n    result[k] = v // 2\nanswer = result"
    },
    {
        "code": "def f(text, insert):\n    whitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\n    clean = ''\n    for char in text:\n        if char in whitespaces:\n            clean += insert\n        else:\n            clean += char\n    return clean",
        "input": "'pi wa', 'chi'",
        "output": "'pichiwa'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 6,
            "4": 5,
            "7": 4,
            "5": 1,
            "8": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_736",
        "straightlined_code": "text, insert = 'pi wa', 'chi'\nwhitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\nclean = ''\nfor char in text:\n    if char in whitespaces:\n        clean += insert\n    else:\n        clean += char\nanswer = clean"
    },
    {
        "code": "def f(nums):\n    counts = 0\n    for i in nums:\n        if str(i).isdecimal():\n            if counts == 0:\n                counts += 1\n    return counts",
        "input": "[0, 6, 2, -1, -2]",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 3,
            "5": 1,
            "6": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_737",
        "straightlined_code": "nums = [0, 6, 2, -1, -2]\ncounts = 0\nfor i in nums:\n    if str(i).isdecimal():\n        if counts == 0:\n            counts += 1\nanswer = counts"
    },
    {
        "code": "def f(char_map, text):\n    new_text = ''\n    for ch in text:\n        val = char_map.get(ch)\n        if val is None:\n            new_text += ch\n        else:\n            new_text += val\n    return new_text",
        "input": "{}, 'hbd'",
        "output": "'hbd'",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "5": 3,
            "8": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_750",
        "straightlined_code": "char_map, text = {}, 'hbd'\nnew_text = ''\nfor ch in text:\n    val = char_map.get(ch)\n    if val is None:\n        new_text += ch\n    else:\n        new_text += val\nanswer = new_text"
    },
    {
        "code": "def f(nums):\n    nums = ['{0:{fill}>{width}}'.format(val, **{'fill': '0', 'width': nums[0]}) for val in nums[1:]]\n    return [str(val) for val in nums]",
        "input": "['1', '2', '2', '44', '0', '7', '20257']",
        "output": "['2', '2', '44', '0', '7', '20257']",
        "line_execution_counts": {
            "1": 7,
            "2": 7
        },
        "ast_size": 45,
        "error": null,
        "id": "sample_754",
        "straightlined_code": "nums = ['1', '2', '2', '44', '0', '7', '20257']\nnums = ['{0:{fill}>{width}}'.format(val, **{'fill': '0', 'width': nums[0]}) for val in nums[1:]]\nanswer = [str(val) for val in nums]"
    },
    {
        "code": "def f(d):\n    l = []\n    while len(d) > 0:\n        key = d.popitem()[0]\n        l.append(key)\n    return l;",
        "input": "dict(f = 1, h = 2, j = 3, k = 4)",
        "output": "['k', 'j', 'h', 'f']",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 4,
            "5": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_760",
        "straightlined_code": "d = dict(f = 1, h = 2, j = 3, k = 4)\nl = []\nwhile len(d) > 0:\n    key = d.popitem()[0]\n    l.append(key)\nanswer = l;"
    },
    {
        "code": "def f(text):\n    text_list = [char for char in text]\n    for i, char in enumerate(text_list):\n        text_list[i] = char.swapcase()\n    return ''.join(text_list)",
        "input": "'akA?riu'",
        "output": "'AKa?RIU'",
        "line_execution_counts": {
            "1": 8,
            "2": 8,
            "3": 7,
            "4": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_769",
        "straightlined_code": "text = 'akA?riu'\ntext_list = [char for char in text]\nfor i, char in enumerate(text_list):\n    text_list[i] = char.swapcase()\nanswer = ''.join(text_list)"
    },
    {
        "code": "def f(phrase):\n    result = ''\n    for i in phrase:\n        if not i.islower():\n            result += i\n    return result",
        "input": "'serjgpoDFdbcA.'",
        "output": "'DFA.'",
        "line_execution_counts": {
            "1": 1,
            "2": 15,
            "3": 14,
            "4": 4,
            "5": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_772",
        "straightlined_code": "phrase = 'serjgpoDFdbcA.'\nresult = ''\nfor i in phrase:\n    if not i.islower():\n        result += i\nanswer = result"
    },
    {
        "code": "def f(line):\n    a = []\n    for c in line:\n        if c.isalnum():\n            a.append(c)\n    return ''.join(a)",
        "input": "\"\\\"\\\\%$ normal chars $%~ qwet42'\"",
        "output": "'normalcharsqwet42'",
        "line_execution_counts": {
            "1": 1,
            "2": 30,
            "3": 29,
            "4": 17,
            "5": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_794",
        "straightlined_code": "line = \"\\\"\\\\%$ normal chars $%~ qwet42'\"\na = []\nfor c in line:\n    if c.isalnum():\n        a.append(c)\nanswer = ''.join(a)"
    },
    {
        "code": "def f(arr):\n    new_arr = []\n    for i in range(len(arr) - 1):\n        new_arr.append(arr[i] + arr[i + 1])\n    return new_arr",
        "input": "[10, 20, 30, 40, 50]",
        "output": "[30, 50, 70, 90]",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "new_synth_812",
        "straightlined_code": "arr = [10, 20, 30, 40, 50]\nnew_arr = []\nfor i in range(len(arr) - 1):\n    new_arr.append(arr[i] + arr[i + 1])\nanswer = new_arr"
    },
    {
        "code": "def f(num):\n    while num > 1:\n        if num % 2 == 0:\n            num /= 2\n        else:\n            num *= 3\n            num += 1\n    return num",
        "input": "10",
        "output": "1.0",
        "line_execution_counts": {
            "1": 7,
            "2": 6,
            "3": 5,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "new_synth_817",
        "straightlined_code": "num = 10\nwhile num > 1:\n    if num % 2 == 0:\n        num /= 2\n    else:\n        num *= 3\n        num += 1\nanswer = num"
    },
    {
        "code": "def f(aList):\n    # Remove duplicates from a list\n    unique_values = []\n    for i in aList:\n        if i not in unique_values:\n            unique_values.append(i)\n    return unique_values",
        "input": "['A','A','B','C','C','D','D','A','E','F','G','E','H','F','F','F','I','J','J','J']",
        "output": "['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']",
        "line_execution_counts": {
            "2": 1,
            "3": 21,
            "4": 20,
            "5": 10,
            "6": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "new_synth_825",
        "straightlined_code": "aList = ['A','A','B','C','C','D','D','A','E','F','G','E','H','F','F','F','I','J','J','J']\n# Remove duplicates from a list\nunique_values = []\nfor i in aList:\n    if i not in unique_values:\n        unique_values.append(i)\nanswer = unique_values"
    },
    {
        "code": "def f(a, b):\n    c = a\n    while b > 0:\n        b -= 1\n        c += a\n    return c",
        "input": "2, 5",
        "output": "12",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 5,
            "5": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "new_synth_828",
        "straightlined_code": "a, b = 2, 5\nc = a\nwhile b > 0:\n    b -= 1\n    c += a\nanswer = c"
    },
    {
        "code": "def f(arr, val):\n    index = 0\n    for i in range(len(arr)):\n        if val == arr[i]:\n            index = i\n    return index",
        "input": "['a', 'b', 'c'], 'c'",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1,
            "5": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "new_synth_829",
        "straightlined_code": "arr, val = ['a', 'b', 'c'], 'c'\nindex = 0\nfor i in range(len(arr)):\n    if val == arr[i]:\n        index = i\nanswer = index"
    },
    {
        "code": "def f(lst):\n    new_lst = []\n    for ele in lst:\n        if ele != lst[0]:\n            new_lst.append(ele)\n    return new_lst",
        "input": "[0, 1, 1, 1, 2, 3]",
        "output": "[1, 1, 1, 2, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "4": 5,
            "5": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "new_synth_830",
        "straightlined_code": "lst = [0, 1, 1, 1, 2, 3]\nnew_lst = []\nfor ele in lst:\n    if ele != lst[0]:\n        new_lst.append(ele)\nanswer = new_lst"
    },
    {
        "code": "def f(a):\n    new_list = [ch.upper() for ch in a if ch in 'aeiou']\n    return ''.join(new_list)",
        "input": "'a_A_b_B3 '",
        "output": "'A'",
        "line_execution_counts": {
            "1": 10,
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "new_synth_831",
        "straightlined_code": "a = 'a_A_b_B3 '\nnew_list = [ch.upper() for ch in a if ch in 'aeiou']\nanswer = ''.join(new_list)"
    },
    {
        "code": "def f(arr):\n    new_arr = []\n    for e in arr:\n        if e.isnumeric():\n            new_arr.append(int(e))\n    return new_arr",
        "input": "['3', '4', '5']",
        "output": "[3, 4, 5]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "5": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "new_synth_833",
        "straightlined_code": "arr = ['3', '4', '5']\nnew_arr = []\nfor e in arr:\n    if e.isnumeric():\n        new_arr.append(int(e))\nanswer = new_arr"
    },
    {
        "code": "def f(s):\n    s = s[::-1]\n    count = 0\n    for c in s:\n        if c.isalpha():\n            count += 1\n    return count",
        "input": "'raruwa'",
        "output": "6",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 6,
            "5": 6,
            "6": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "new_synth_834",
        "straightlined_code": "s = 'raruwa'\ns = s[::-1]\ncount = 0\nfor c in s:\n    if c.isalpha():\n        count += 1\nanswer = count"
    },
    {
        "code": "def f(s):\n    return ''.join(s[i:i+1] for i in range(len(s)) if s[i] not in ['_', '-'])",
        "input": "'__Aa_-bB___'",
        "output": "'AabB'",
        "line_execution_counts": {
            "1": 13
        },
        "ast_size": 45,
        "error": null,
        "id": "new_synth_835",
        "straightlined_code": "s = '__Aa_-bB___'\nanswer = ''.join(s[i:i+1] for i in range(len(s)) if s[i] not in ['_', '-'])"
    },
    {
        "code": "def f(text, n):\n    return ''.join(c.upper() if i%2 else c for i, c in enumerate(text))",
        "input": "\"asdfghjk\", 10",
        "output": "'aSdFgHjK'",
        "line_execution_counts": {
            "1": 10
        },
        "ast_size": 36,
        "error": null,
        "id": "new_synth_837",
        "straightlined_code": "text, n = \"asdfghjk\", 10\nanswer = ''.join(c.upper() if i%2 else c for i, c in enumerate(text))"
    },
    {
        "code": "def f(a, b):\n    if len(a) > len(b):\n        a, b = b, a\n    for ch in b:\n        if ch not in a:\n            return False\n    return True",
        "input": "\"wxyz\", \"wxyzw\"",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "3": 6,
            "4": 5,
            "6": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "new_synth_838",
        "straightlined_code": "a, b = \"wxyz\", \"wxyzw\"\nif len(a) > len(b):\n    a, b = b, a\nfor ch in b:\n    if ch not in a:\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(a):\n    c = len(a)\n    b = 0\n    for x in a:\n        if x not in 'aeiou':\n            b += 1\n    return b / c",
        "input": "'$35.89'",
        "output": "1.0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 6,
            "5": 6,
            "6": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "new_synth_842",
        "straightlined_code": "a = '$35.89'\nc = len(a)\nb = 0\nfor x in a:\n    if x not in 'aeiou':\n        b += 1\nanswer = b / c"
    },
    {
        "code": "def f(text, suffix):\n    if text.endswith(suffix):\n        return text[:-len(suffix)]\n    return text",
        "input": "'zejrohaj', 'owc'",
        "output": "'zejrohaj'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "sample_16",
        "straightlined_code": "text, suffix = 'zejrohaj', 'owc'\nif text.endswith(suffix):\n    answer = text[:-len(suffix)]\nanswer = text"
    },
    {
        "code": "def f(text):\n    if text.isidentifier():\n        return ''.join(c for c in text if c.isdigit())\n    else:\n        return ''.join(text)",
        "input": "'816'",
        "output": "'816'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_49",
        "straightlined_code": "text = '816'\nif text.isidentifier():\n    answer = ''.join(c for c in text if c.isdigit())\nelse:\n    answer = ''.join(text)"
    },
    {
        "code": "def f(user):\n    if len(list(user.keys())) > len(list(user.values())):\n        return tuple(user.keys())\n    return tuple(user.values())",
        "input": "{\"eating\" : \"ja\", \"books\" : \"nee\", \"piano\" : \"coke\", \"excitement\" : \"zoo\"}",
        "output": "('ja', 'nee', 'coke', 'zoo')",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 47,
        "error": null,
        "id": "sample_62",
        "straightlined_code": "user = {\"eating\" : \"ja\", \"books\" : \"nee\", \"piano\" : \"coke\", \"excitement\" : \"zoo\"}\nif len(list(user.keys())) > len(list(user.values())):\n    answer = tuple(user.keys())\nanswer = tuple(user.values())"
    },
    {
        "code": "def f(nums, index):\n    return nums[index] % 42 + nums.pop(index) * 2",
        "input": "[3, 2, 0, 3, 7], 3",
        "output": "9",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_65",
        "straightlined_code": "nums, index = [3, 2, 0, 3, 7], 3\nanswer = nums[index] % 42 + nums.pop(index) * 2"
    },
    {
        "code": "def f(student_marks, name):\n    if name in student_marks:\n        value = student_marks.pop(name)\n        return value\n    return 'Name unknown'",
        "input": "{'882afmfp': 56}, '6f53p'",
        "output": "'Name unknown'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_69",
        "straightlined_code": "student_marks, name = {'882afmfp': 56}, '6f53p'\nif name in student_marks:\n    value = student_marks.pop(name)\n    answer = value\nanswer = 'Name unknown'"
    },
    {
        "code": "def f(array, elem):\n    ind = array.index(elem)\n    return ind * 2 + array[-ind - 1] * 3",
        "input": "[-1, 2, 1, -8, 2], 2",
        "output": "-22",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_75",
        "straightlined_code": "array, elem = [-1, 2, 1, -8, 2], 2\nind = array.index(elem)\nanswer = ind * 2 + array[-ind - 1] * 3"
    },
    {
        "code": "def f(text, character):\n    subject = text[text.rfind(character):]\n    return subject*text.count(character)",
        "input": "'h ,lpvvkohh,u', 'i'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_77",
        "straightlined_code": "text, character = 'h ,lpvvkohh,u', 'i'\nsubject = text[text.rfind(character):]\nanswer = subject*text.count(character)"
    },
    {
        "code": "def f(text):\n    if text and text.isupper():\n        cs = str.maketrans(string.ascii_uppercase, string.ascii_lowercase)\n        return text.translate(cs)\n    return text.lower()[:3]",
        "input": "'mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n'",
        "output": "'mty'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "sample_78",
        "straightlined_code": "text = 'mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n'\nif text and text.isupper():\n    cs = str.maketrans(string.ascii_uppercase, string.ascii_lowercase)\n    answer = text.translate(cs)\nanswer = text.lower()[:3]"
    },
    {
        "code": "def f(s1, s2):\n    if s2.endswith(s1):\n        s2 = s2[:len(s1) * -1]\n    return s2",
        "input": "\"he\", \"hello\"",
        "output": "'hello'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_88",
        "straightlined_code": "s1, s2 = \"he\", \"hello\"\nif s2.endswith(s1):\n    s2 = s2[:len(s1) * -1]\nanswer = s2"
    },
    {
        "code": "def f(st):\n    if st.lower().rindex('h', st.lower().rindex('i')) >= st.lower().rindex('i'):\n        return 'Hey'\n    else:\n        return 'Hi'",
        "input": "'Hi there'",
        "output": "'Hey'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 38,
        "error": null,
        "id": "sample_140",
        "straightlined_code": "st = 'Hi there'\nif st.lower().rindex('h', st.lower().rindex('i')) >= st.lower().rindex('i'):\n    answer = 'Hey'\nelse:\n    answer = 'Hi'"
    },
    {
        "code": "def f(nums):\n    middle = len(nums)//2\n    return nums[middle:] + nums[0:middle]",
        "input": "[1, 1, 1]",
        "output": "[1, 1, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_147",
        "straightlined_code": "nums = [1, 1, 1]\nmiddle = len(nums)//2\nanswer = nums[middle:] + nums[0:middle]"
    },
    {
        "code": "def f(text, suffix, num):\n    str_num = str(num)\n    return text.endswith(suffix + str_num)",
        "input": "'friends and love', 'and', 3",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_153",
        "straightlined_code": "text, suffix, num = 'friends and love', 'and', 3\nstr_num = str(num)\nanswer = text.endswith(suffix + str_num)"
    },
    {
        "code": "def f(s, c):\n    s = s.split(' ')\n    return ((c + \"  \") + (\"  \".join(s[::-1])))",
        "input": "'Hello There', '*'",
        "output": "'*  There  Hello'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_154",
        "straightlined_code": "s, c = 'Hello There', '*'\ns = s.split(' ')\nanswer = ((c + \"  \") + (\"  \".join(s[::-1])))"
    },
    {
        "code": "def f(text, limit, char):\n    if limit < len(text):\n        return text[0:limit]\n    return text.ljust(limit, char)",
        "input": "'tqzym', 5, 'c'",
        "output": "'tqzym'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_156",
        "straightlined_code": "text, limit, char = 'tqzym', 5, 'c'\nif limit < len(text):\n    answer = text[0:limit]\nanswer = text.ljust(limit, char)"
    },
    {
        "code": "def f(dictionary):\n    while not dictionary.get(1, len(dictionary)):\n        dictionary.clear()\n        break\n    return dictionary",
        "input": "{1: 47698, 1: 32849, 1: 38381, 3: 83607}",
        "output": "{1: 38381, 3: 83607}",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_160",
        "straightlined_code": "dictionary = {1: 47698, 1: 32849, 1: 38381, 3: 83607}\nwhile not dictionary.get(1, len(dictionary)):\n    dictionary.clear()\n    break\nanswer = dictionary"
    },
    {
        "code": "def f(text, value):\n    left, _, right = text.partition(value)\n    return right + left",
        "input": "'difkj rinpx', 'k'",
        "output": "'j rinpxdif'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_161",
        "straightlined_code": "text, value = 'difkj rinpx', 'k'\nleft, _, right = text.partition(value)\nanswer = right + left"
    },
    {
        "code": "def f(text, new_value, index):\n    key = text.maketrans(text[index], new_value)\n    return text.translate(key)",
        "input": "'spain', 'b', 4",
        "output": "'spaib'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_168",
        "straightlined_code": "text, new_value, index = 'spain', 'b', 4\nkey = text.maketrans(text[index], new_value)\nanswer = text.translate(key)"
    },
    {
        "code": "def f(array):\n    for i in range(len(array)):\n        if array[i] < 0:\n            array.pop(i)\n    return array",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "sample_172",
        "straightlined_code": "array = []\nfor i in range(len(array)):\n    if array[i] < 0:\n        array.pop(i)\nanswer = array"
    },
    {
        "code": "def f(lst):\n    lst[1:4] = lst[1:4][::-1]\n    return lst",
        "input": "[1, 2, 3]",
        "output": "[1, 3, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_174",
        "straightlined_code": "lst = [1, 2, 3]\nlst[1:4] = lst[1:4][::-1]\nanswer = lst"
    },
    {
        "code": "def f(string):\n    count = string.count(':')\n    return string.replace(':', '', count - 1)",
        "input": "'1::1'",
        "output": "'1:1'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_193",
        "straightlined_code": "string = '1::1'\ncount = string.count(':')\nanswer = string.replace(':', '', count - 1)"
    },
    {
        "code": "def f(text):\n    text = text.replace(' x', ' x.')\n    if text.istitle(): return 'correct'\n    text = text.replace(' x.', ' x')\n    return 'mixed'",
        "input": "\"398 Is A Poor Year To Sow\"",
        "output": "'correct'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_196",
        "straightlined_code": "text = \"398 Is A Poor Year To Sow\"\ntext = text.replace(' x', ' x.')\nif text.istitle(): answer = 'correct'\ntext = text.replace(' x.', ' x')\nanswer = 'mixed'"
    },
    {
        "code": "def f(text, strip_chars):\n    return text[::-1].strip(strip_chars)[::-1]",
        "input": "'tcmfsmj', 'cfj'",
        "output": "'tcmfsm'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "sample_198",
        "straightlined_code": "text, strip_chars = 'tcmfsmj', 'cfj'\nanswer = text[::-1].strip(strip_chars)[::-1]"
    },
    {
        "code": "def f(str, char):\n    base = char * (str.count(char) + 1)\n    return str.removesuffix(base)",
        "input": "'mnmnj krupa...##!@#!@#$$@##', '@'",
        "output": "'mnmnj krupa...##!@#!@#$$@##'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_199",
        "straightlined_code": "str, char = 'mnmnj krupa...##!@#!@#$$@##', '@'\nbase = char * (str.count(char) + 1)\nanswer = str.removesuffix(base)"
    },
    {
        "code": "def f(name):\n    return [name[0], name[1][::-1][0]]",
        "input": "\"master. \"",
        "output": "['m', 'a']",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_204",
        "straightlined_code": "name = \"master. \"\nanswer = [name[0], name[1][::-1][0]]"
    },
    {
        "code": "def f(string, sep):\n    cnt = string.count(sep)\n    return((string+sep) * cnt)[::-1]",
        "input": "'caabcfcabfc', 'ab'",
        "output": "'bacfbacfcbaacbacfbacfcbaac'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_218",
        "straightlined_code": "string, sep = 'caabcfcabfc', 'ab'\ncnt = string.count(sep)\nreturn((string+sep) * cnt)[::-1]"
    },
    {
        "code": "def f(text, delim):\n    first, second = text.split(delim)\n    return second + delim + first",
        "input": "'bpxa24fc5.', '.'",
        "output": "'.bpxa24fc5'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_221",
        "straightlined_code": "text, delim = 'bpxa24fc5.', '.'\nfirst, second = text.split(delim)\nanswer = second + delim + first"
    },
    {
        "code": "def f(text, repl):\n    trans = str.maketrans(text.lower(), repl.lower())\n    return text.translate(trans)",
        "input": "'upper case', 'lower case'",
        "output": "'lwwer case'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_254",
        "straightlined_code": "text, repl = 'upper case', 'lower case'\ntrans = str.maketrans(text.lower(), repl.lower())\nanswer = text.translate(trans)"
    },
    {
        "code": "def f(nums, start, k):\n    nums[start:start+k] = nums[start:start + k][::-1]\n    return nums",
        "input": "[1, 2, 3, 4, 5, 6], 4, 2",
        "output": "[1, 2, 3, 4, 6, 5]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 42,
        "error": null,
        "id": "sample_260",
        "straightlined_code": "nums, start, k = [1, 2, 3, 4, 5, 6], 4, 2\nnums[start:start+k] = nums[start:start + k][::-1]\nanswer = nums"
    },
    {
        "code": "def f(text, space):\n    if space < 0:\n        return text\n    return text.ljust(len(text) // 2 + space)",
        "input": "'sowpf', -7",
        "output": "'sowpf'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_267",
        "straightlined_code": "text, space = 'sowpf', -7\nif space < 0:\n    answer = text\nanswer = text.ljust(len(text) // 2 + space)"
    },
    {
        "code": "def f(dic):\n    dic2 = dict(zip(dic.values(), dic.keys()))\n    return dic2",
        "input": "{-1: \"a\", 0: \"b\", 1: \"c\"}",
        "output": "{'a': -1, 'b': 0, 'c': 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_275",
        "straightlined_code": "dic = {-1: \"a\", 0: \"b\", 1: \"c\"}\ndic2 = dict(zip(dic.values(), dic.keys()))\nanswer = dic2"
    },
    {
        "code": "def f(text, char):\n    if not text.endswith(char):\n        return f(char + text, char)\n    return text",
        "input": "'staovk', 'k'",
        "output": "'staovk'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_299",
        "straightlined_code": "text, char = 'staovk', 'k'\nif not text.endswith(char):\n    answer = f(char + text, char)\nanswer = text"
    },
    {
        "code": "def f(text):\n    text = text.replace('#', '1').replace('$', '5')\n    return 'yes' if text.isnumeric() else 'no'",
        "input": "'A'",
        "output": "'no'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_311",
        "straightlined_code": "text = 'A'\ntext = text.replace('#', '1').replace('$', '5')\nanswer = 'yes' if text.isnumeric() else 'no'"
    },
    {
        "code": "def f(text, a, b):\n    text = text.replace(a, b)\n    return text.replace(b, a)",
        "input": "' vup a zwwo oihee amuwuuw! ', 'a', 'u'",
        "output": "' vap a zwwo oihee amawaaw! '",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_317",
        "straightlined_code": "text, a, b = ' vup a zwwo oihee amuwuuw! ', 'a', 'u'\ntext = text.replace(a, b)\nanswer = text.replace(b, a)"
    },
    {
        "code": "def f(a, b):\n    if a < b:\n        return (b, a)\n    return (a, b)",
        "input": "'ml', 'mv'",
        "output": "('mv', 'ml')",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_345",
        "straightlined_code": "a, b = 'ml', 'mv'\nif a < b:\n    answer = (b, a)\nanswer = (a, b)"
    },
    {
        "code": "def f(a, b):\n    if b in a:\n        return b.join(a.partition(a[a.index(b) + 1]))\n    else:\n        return a",
        "input": "'sierizam', 'iz'",
        "output": "'sieriizzizam'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "sample_375",
        "straightlined_code": "a, b = 'sierizam', 'iz'\nif b in a:\n    answer = b.join(a.partition(a[a.index(b) + 1]))\nelse:\n    answer = a"
    },
    {
        "code": "def f(text, delimiter):\n    text = text.rpartition(delimiter)\n    return text[0] + text[-1]",
        "input": "'xxjarczx', 'x'",
        "output": "'xxjarcz'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_380",
        "straightlined_code": "text, delimiter = 'xxjarczx', 'x'\ntext = text.rpartition(delimiter)\nanswer = text[0] + text[-1]"
    },
    {
        "code": "def f(ets):\n    while ets:\n        k, v = ets.popitem()\n        ets[k] = v**2\n    return ets",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_396",
        "straightlined_code": "ets = {}\nwhile ets:\n    k, v = ets.popitem()\n    ets[k] = v**2\nanswer = ets"
    },
    {
        "code": "def f(text, suffix):\n    if suffix and text.endswith(suffix):\n        return text[:- len(suffix)]\n    return text",
        "input": "'mathematics', 'example'",
        "output": "'mathematics'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "sample_401",
        "straightlined_code": "text, suffix = 'mathematics', 'example'\nif suffix and text.endswith(suffix):\n    answer = text[:- len(suffix)]\nanswer = text"
    },
    {
        "code": "def f(text, pref):\n    if isinstance(pref, list):\n        return ', '.join(text.startswith(x) for x in pref)\n    else:\n        return text.startswith(pref)",
        "input": "'Hello World', 'W'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "sample_411",
        "straightlined_code": "text, pref = 'Hello World', 'W'\nif isinstance(pref, list):\n    answer = ', '.join(text.startswith(x) for x in pref)\nelse:\n    answer = text.startswith(pref)"
    },
    {
        "code": "def f(s):\n    return '{}{}{}'.format(s[3:], s[2], s[5:8])",
        "input": "'jbucwc'",
        "output": "'cwcuc'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_413",
        "straightlined_code": "s = 'jbucwc'\nanswer = '{}{}{}'.format(s[3:], s[2], s[5:8])"
    },
    {
        "code": "def f(text, value):\n    if not value in text:\n        return ''\n    return text.rpartition(value)[0]",
        "input": "'mmfbifen', 'i'",
        "output": "'mmfb'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_419",
        "straightlined_code": "text, value = 'mmfbifen', 'i'\nif not value in text:\n    answer = ''\nanswer = text.rpartition(value)[0]"
    },
    {
        "code": "def f(str, n):\n    if len(str) < n:\n        return str\n    else:\n        return str.removeprefix(str[:n])",
        "input": "\"try.\", 5",
        "output": "'try.'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_421",
        "straightlined_code": "str, n = \"try.\", 5\nif len(str) < n:\n    answer = str\nelse:\n    answer = str.removeprefix(str[:n])"
    },
    {
        "code": "def f(nums):\n    for i in range(len(nums)):\n        if not i % 2:\n            nums.append(nums[i] * nums[i + 1])\n    return nums",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "sample_428",
        "straightlined_code": "nums = []\nfor i in range(len(nums)):\n    if not i % 2:\n        nums.append(nums[i] * nums[i + 1])\nanswer = nums"
    },
    {
        "code": "def f(length, text):\n    if len(text) == length:\n        return text[::-1]\n    return False",
        "input": "-5, 'G5ogb6f,c7e.EMm'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_432",
        "straightlined_code": "length, text = -5, 'G5ogb6f,c7e.EMm'\nif len(text) == length:\n    answer = text[::-1]\nanswer = False"
    },
    {
        "code": "def f(text, search_chars, replace_chars):\n    trans_table = str.maketrans(search_chars, replace_chars)\n    return text.translate(trans_table)",
        "input": "'mmm34mIm', 'mm3', ',po'",
        "output": "'pppo4pIp'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_458",
        "straightlined_code": "text, search_chars, replace_chars = 'mmm34mIm', 'mm3', ',po'\ntrans_table = str.maketrans(search_chars, replace_chars)\nanswer = text.translate(trans_table)"
    },
    {
        "code": "def f(array, index):\n    if index < 0:\n        index = len(array) + index\n    return array[index]",
        "input": "[1], 0",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_475",
        "straightlined_code": "array, index = [1], 0\nif index < 0:\n    index = len(array) + index\nanswer = array[index]"
    },
    {
        "code": "def f(text, value):\n    if isinstance(value, str):\n        return text.count(value) + text.count(value.lower())\n    return text.count(value)",
        "input": "'eftw{\u044c\u0422\u0441k_1', '\\\\'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "sample_496",
        "straightlined_code": "text, value = 'eftw{\u044c\u0422\u0441k_1', '\\\\'\nif isinstance(value, str):\n    answer = text.count(value) + text.count(value.lower())\nanswer = text.count(value)"
    },
    {
        "code": "def f(text, delim):\n    return text[:text[::-1].find(delim)][::-1]",
        "input": "'dsj osq wi w', ' '",
        "output": "'d'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_500",
        "straightlined_code": "text, delim = 'dsj osq wi w', ' '\nanswer = text[:text[::-1].find(delim)][::-1]"
    },
    {
        "code": "def f(value, width):\n    if value >= 0:\n        return str(value).zfill(width)\n\n    if value < 0:\n        return '-' + str(-value).zfill(width)\n    return ''",
        "input": "5, 1",
        "output": "'5'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_509",
        "straightlined_code": "value, width = 5, 1\nif value >= 0:\n    answer = str(value).zfill(width)\n\nif value < 0:\n    answer = '-' + str(-value).zfill(width)\nanswer = ''"
    },
    {
        "code": "def f(s):\n    return len(s) == s.count('0') + s.count('1')",
        "input": "'102'",
        "output": "False",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_512",
        "straightlined_code": "s = '102'\nanswer = len(s) == s.count('0') + s.count('1')"
    },
    {
        "code": "def f(album_sales):\n    while len(album_sales) != 1:\n        album_sales.append(album_sales.pop(0))\n    return album_sales[0]",
        "input": "[6]",
        "output": "6",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "sample_520",
        "straightlined_code": "album_sales = [6]\nwhile len(album_sales) != 1:\n    album_sales.append(album_sales.pop(0))\nanswer = album_sales[0]"
    },
    {
        "code": "def f(item):\n    modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ')\n    return modified[0].upper() + modified[1:]",
        "input": "'.,,,,,. \u0645\u0646\u0628\u062a'",
        "output": "'.,,,,, , \u0645\u0646\u0628\u062a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_543",
        "straightlined_code": "item = '.,,,,,. \u0645\u0646\u0628\u062a'\nmodified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ')\nanswer = modified[0].upper() + modified[1:]"
    },
    {
        "code": "def f(text, suffix):\n    if suffix and text and text.endswith(suffix):\n        return text.removesuffix(suffix)\n    else:\n        return text",
        "input": "'spider', 'ed'",
        "output": "'spider'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_548",
        "straightlined_code": "text, suffix = 'spider', 'ed'\nif suffix and text and text.endswith(suffix):\n    answer = text.removesuffix(suffix)\nelse:\n    answer = text"
    },
    {
        "code": "def f(str):\n    d = str.rpartition('ar')\n    return ' '.join((d[0], d[1], d[2]))",
        "input": "'xxxarmmarxx'",
        "output": "'xxxarmm ar xx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "sample_557",
        "straightlined_code": "str = 'xxxarmmarxx'\nd = str.rpartition('ar')\nanswer = ' '.join((d[0], d[1], d[2]))"
    },
    {
        "code": "def f(n):\n    n = str(n)\n    return n[0] + '.'+n[1:].replace('-', '_')",
        "input": "\"first-second-third\"",
        "output": "'f.irst_second_third'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_559",
        "straightlined_code": "n = \"first-second-third\"\nn = str(n)\nanswer = n[0] + '.'+n[1:].replace('-', '_')"
    },
    {
        "code": "def f(text, digit):\n    #different than previous? Just count instances digit\n    count = text.count(digit)\n    return int(digit) * count",
        "input": "'7Ljnw4Lj', '7'",
        "output": "7",
        "line_execution_counts": {
            "2": 1,
            "3": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "sample_561",
        "straightlined_code": "text, digit = '7Ljnw4Lj', '7'\n#different than previous? Just count instances digit\ncount = text.count(digit)\nanswer = int(digit) * count"
    },
    {
        "code": "def f(text, n):\n    length = len(text)\n    return text[length*(n%4):length ]",
        "input": "'abc', 1",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_598",
        "straightlined_code": "text, n = 'abc', 1\nlength = len(text)\nanswer = text[length*(n%4):length ]"
    },
    {
        "code": "def f(in_list, num):\n    in_list.append(num)\n    return in_list.index(max(in_list[:-1]))",
        "input": "[-1, 12, -6, -2], -1",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_615",
        "straightlined_code": "in_list, num = [-1, 12, -6, -2], -1\nin_list.append(num)\nanswer = in_list.index(max(in_list[:-1]))"
    },
    {
        "code": "def f(string, substring):\n    while string.startswith(substring):\n        string = string[len(substring):len(string)]\n    return string",
        "input": "'', 'A'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_650",
        "straightlined_code": "string, substring = '', 'A'\nwhile string.startswith(substring):\n    string = string[len(substring):len(string)]\nanswer = string"
    },
    {
        "code": "def f(s, from_c, to_c):\n    table = s.maketrans(from_c, to_c)\n    return s.translate(table)",
        "input": "'aphid', 'i', '?'",
        "output": "'aph?d'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_654",
        "straightlined_code": "s, from_c, to_c = 'aphid', 'i', '?'\ntable = s.maketrans(from_c, to_c)\nanswer = s.translate(table)"
    },
    {
        "code": "def f(array, ind, elem):\n    array.insert(-5 if ind < 0 else len(array) if ind > len(array) else ind + 1, elem)\n    return array",
        "input": "[1, 5, 8, 2, 0, 3], 2, 7",
        "output": "[1, 5, 8, 7, 2, 0, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 46,
        "error": null,
        "id": "sample_681",
        "straightlined_code": "array, ind, elem = [1, 5, 8, 2, 0, 3], 2, 7\narray.insert(-5 if ind < 0 else len(array) if ind > len(array) else ind + 1, elem)\nanswer = array"
    },
    {
        "code": "def f(n):\n    if str(n).find('.') != -1:\n        return str(int(n)+2.5)\n    return str(n)",
        "input": "'800'",
        "output": "'800'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_690",
        "straightlined_code": "n = '800'\nif str(n).find('.') != -1:\n    answer = str(int(n)+2.5)\nanswer = str(n)"
    },
    {
        "code": "def f(text, char):\n    count = text.count(char*2)\n    return text[count:]",
        "input": "'vzzv2sg', 'z'",
        "output": "'zzv2sg'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_703",
        "straightlined_code": "text, char = 'vzzv2sg', 'z'\ncount = text.count(char*2)\nanswer = text[count:]"
    },
    {
        "code": "def f(st, pattern):\n    for p in pattern:\n        if not st.startswith(p): return False\n        st = st[len(p):]\n    return True",
        "input": "'qwbnjrxs', ['jr', 'b', 'r', 'qw']",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_739",
        "straightlined_code": "st, pattern = 'qwbnjrxs', ['jr', 'b', 'r', 'qw']\nfor p in pattern:\n    if not st.startswith(p): answer = False\n    st = st[len(p):]\nanswer = True"
    },
    {
        "code": "def f(text):\n    string_a, string_b = text.split(',')\n    return -(len(string_a) + (len(string_b)))",
        "input": "'dog,cat'",
        "output": "-6",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "sample_743",
        "straightlined_code": "text = 'dog,cat'\nstring_a, string_b = text.split(',')\nanswer = -(len(string_a) + (len(string_b)))"
    },
    {
        "code": "def f(d):\n    i = iter(d.items())\n    return next(i), next(i)",
        "input": "{'a': 123, 'b': 456, 'c': 789}",
        "output": "(('a', 123), ('b', 456))",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "sample_748",
        "straightlined_code": "d = {'a': 123, 'b': 456, 'c': 789}\ni = iter(d.items())\nanswer = next(i), next(i)"
    },
    {
        "code": "def f(replace, text, hide):\n    while hide in text:\n        replace += 'ax'\n        text = text.replace(hide, replace, 1)\n    return text",
        "input": "'###', \"ph>t#A#BiEcDefW#ON#iiNCU\", '.'",
        "output": "'ph>t#A#BiEcDefW#ON#iiNCU'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "sample_755",
        "straightlined_code": "replace, text, hide = '###', \"ph>t#A#BiEcDefW#ON#iiNCU\", '.'\nwhile hide in text:\n    replace += 'ax'\n    text = text.replace(hide, replace, 1)\nanswer = text"
    },
    {
        "code": "def f(text):\n    if text.isalnum() and all(i.isdigit() for i in text):\n        return 'integer'\n    return 'string'",
        "input": "''",
        "output": "'string'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_756",
        "straightlined_code": "text = ''\nif text.isalnum() and all(i.isdigit() for i in text):\n    answer = 'integer'\nanswer = 'string'"
    },
    {
        "code": "def f(text, suffix):\n    if suffix.startswith(\"/\"):\n        return text + suffix[1:]\n    return text",
        "input": "'hello.txt', '/'",
        "output": "'hello.txt'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_788",
        "straightlined_code": "text, suffix = 'hello.txt', '/'\nif suffix.startswith(\"/\"):\n    answer = text + suffix[1:]\nanswer = text"
    },
    {
        "code": "def f(l1, l2):\n    if len(l1) != len(l2):\n        return {}\n    return dict.fromkeys(l1, l2)",
        "input": "['a', 'b'], ['car', 'dog']",
        "output": "{'a': ['car', 'dog'], 'b': ['car', 'dog']}",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "sample_792",
        "straightlined_code": "l1, l2 = ['a', 'b'], ['car', 'dog']\nif len(l1) != len(l2):\n    answer = {}\nanswer = dict.fromkeys(l1, l2)"
    },
    {
        "code": "def f(str,toget):\n    if str.startswith(toget): return str[len(toget):]\n    else: return str",
        "input": "'fnuiyh', 'ni'",
        "output": "'fnuiyh'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "sample_796",
        "straightlined_code": "str, toget = 'fnuiyh', 'ni'\nif str.startswith(toget): answer = str[len(toget):]\nelse: answer = str"
    },
    {
        "code": "def f(text, pre):\n    if not text.startswith(pre):\n        return text\n    return text.removeprefix(pre)",
        "input": "'@hihu@!', '@hihu'",
        "output": "'@!'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "sample_798",
        "straightlined_code": "text, pre = '@hihu@!', '@hihu'\nif not text.startswith(pre):\n    answer = text\nanswer = text.removeprefix(pre)"
    },
    {
        "code": "def f(st):\n    if st[0] == '~':\n        e = st.rjust(10, 's')\n        return f(e)\n    else:\n        return st.rjust(10, 'n')",
        "input": "'eqe-;ew22'",
        "output": "'neqe-;ew22'",
        "line_execution_counts": {
            "1": 1,
            "5": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "sample_799",
        "straightlined_code": "st = 'eqe-;ew22'\nif st[0] == '~':\n    e = st.rjust(10, 's')\n    answer = f(e)\nelse:\n    answer = st.rjust(10, 'n')"
    },
    {
        "code": "def f(str, n):\n    return (str.split(' ')[0][n], str.split(' ')[-1][n])",
        "input": "'3333', 2",
        "output": "('3', '3')",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "new_synth_797",
        "straightlined_code": "str, n = '3333', 2\nanswer = (str.split(' ')[0][n], str.split(' ')[-1][n])"
    },
    {
        "code": "def f(n):\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n - 1",
        "input": "4",
        "output": "5",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_801",
        "straightlined_code": "n = 4\nif n % 2 == 0:\n    answer = n + 1\nelse:\n    answer = n - 1"
    },
    {
        "code": "def f(text, symbol):\n    return text.replace('a', symbol).replace('i', symbol).replace('o', symbol)",
        "input": "'tet', 'r'",
        "output": "'tet'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "new_synth_802",
        "straightlined_code": "text, symbol = 'tet', 'r'\nanswer = text.replace('a', symbol).replace('i', symbol).replace('o', symbol)"
    },
    {
        "code": "def f(n):\n    return 10 * (10 * n - 2) // 10 - 2 * n",
        "input": "37",
        "output": "294",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "new_synth_803",
        "straightlined_code": "n = 37\nanswer = 10 * (10 * n - 2) // 10 - 2 * n"
    },
    {
        "code": "def f(d):\n    i = iter(d.items())\n    return (next(i), next(i))[0][1]",
        "input": "{1: 'a', 2: 'b', 3: 'c'}",
        "output": "'a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 34,
        "error": null,
        "id": "new_synth_805",
        "straightlined_code": "d = {1: 'a', 2: 'b', 3: 'c'}\ni = iter(d.items())\nanswer = (next(i), next(i))[0][1]"
    },
    {
        "code": "def f(s):\n    if len(s) == 0:\n        return s\n    return s[1:] + s[0]",
        "input": "'sofia'",
        "output": "'ofias'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "new_synth_816",
        "straightlined_code": "s = 'sofia'\nif len(s) == 0:\n    answer = s\nanswer = s[1:] + s[0]"
    },
    {
        "code": "def f(t):\n    return (lambda t: t[0] ** t[1])(tuple(t))",
        "input": "[3, 2]",
        "output": "9",
        "line_execution_counts": {
            "1": 2
        },
        "ast_size": 26,
        "error": null,
        "id": "new_synth_824",
        "straightlined_code": "t = [3, 2]\nanswer = (lambda t: t[0] ** t[1])(tuple(t))"
    },
    {
        "code": "def f(num):\n    if num < 10:\n        return 0\n    count = 0\n    while num:\n        num //= 10\n        count += 1\n    return count",
        "input": "0",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "new_synth_836",
        "straightlined_code": "num = 0\nif num < 10:\n    answer = 0\ncount = 0\nwhile num:\n    num //= 10\n    count += 1\nanswer = count"
    },
    {
        "code": "def f(text):\n    # return first word of text\n    if ' ' in text:\n        return text[:text.find(' ')]\n    else:\n        return text",
        "input": "'foo bar baz'",
        "output": "'foo'",
        "line_execution_counts": {
            "2": 1,
            "3": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_845",
        "straightlined_code": "text = 'foo bar baz'\n# answer = first word of text\nif ' ' in text:\n    answer = text[:text.find(' ')]\nelse:\n    answer = text"
    },
    {
        "code": "def f(x, y):\n    if x > y:\n        return True\n    elif x == y:\n        return False\n    else:\n        return x > 0",
        "input": "2, 1",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 29,
        "error": null,
        "id": "new_synth_853",
        "straightlined_code": "x, y = 2, 1\nif x > y:\n    answer = True\nelif x == y:\n    answer = False\nelse:\n    answer = x > 0"
    },
    {
        "code": "def f(s):\n    if s[-1] == 'o':\n        return f(s[:-1]) + 1\n    return 0",
        "input": "'book'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "new_synth_874",
        "straightlined_code": "s = 'book'\nif s[-1] == 'o':\n    answer = f(s[:-1]) + 1\nanswer = 0"
    },
    {
        "code": "def f(a, b, c):\n    if a == b and b == c:\n        return a\n    return 0",
        "input": "1, 1, 1",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 26,
        "error": null,
        "id": "new_synth_902",
        "straightlined_code": "a, b, c = 1, 1, 1\nif a == b and b == c:\n    answer = a\nanswer = 0"
    },
    {
        "code": "def f(text):\n    text = text.replace('A', 'E').replace('E', 'I').replace('I', 'O').replace('O', 'U').replace('U', 'A')\n    return text",
        "input": "'aeiou_aeiou'",
        "output": "'aeiou_aeiou'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "new_synth_923",
        "straightlined_code": "text = 'aeiou_aeiou'\ntext = text.replace('A', 'E').replace('E', 'I').replace('I', 'O').replace('O', 'U').replace('U', 'A')\nanswer = text"
    },
    {
        "code": "def f(L):\n    i = L.index(max(L))\n    return L[i:]",
        "input": "[1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "[5, 4, 3, 2, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_937",
        "straightlined_code": "L = [1, 2, 3, 4, 5, 4, 3, 2, 1]\ni = L.index(max(L))\nanswer = L[i:]"
    },
    {
        "code": "def f(x):\n    # Return x/2 if x is divisible by 4, otherwise return x/3\n    return int(x/2) if x % 4 == 0 else int(x/3)",
        "input": "24",
        "output": "12",
        "line_execution_counts": {
            "2": 1
        },
        "ast_size": 30,
        "error": null,
        "id": "new_synth_942",
        "straightlined_code": "x = 24\n# Return x/2 if x is divisible by 4, otherwise answer = x/3\nanswer = int(x/2) if x % 4 == 0 else int(x/3)"
    },
    {
        "code": "def f(l, n):\n    # return l with elements equal to n removed\n    # Hint: return a new list without modifying l.\n    # Hint: try to do this without using a for-loop\n    return l[:l.index(n)] + l[l.index(n)+1:]",
        "input": "[1,2,3], 2",
        "output": "[1, 3]",
        "line_execution_counts": {
            "4": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "new_synth_980",
        "straightlined_code": "l, n = [1,2,3], 2\n# answer = l with elements equal to n removed\n# Hint: answer = a new list without modifying l.\n# Hint: try to do this without using a for-loop\nanswer = l[:l.index(n)] + l[l.index(n)+1:]"
    },
    {
        "code": "def f(seq):\n    if len(seq) > 0:\n        for i in range(len(seq)):\n            if seq[i] == 'X':\n                return i\n        else:\n            return -1\n    else:\n        return 0",
        "input": "''",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "8": 1
        },
        "ast_size": 43,
        "error": null,
        "id": "new_synth_990",
        "straightlined_code": "seq = ''\nif len(seq) > 0:\n    for i in range(len(seq)):\n        if seq[i] == 'X':\n            answer = i\n    else:\n        answer = -1\nelse:\n    answer = 0"
    },
    {
        "code": "def f(x, a, b):\n    return a if x < a else b if x > b else x",
        "input": "1, 2, 3",
        "output": "2",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 27,
        "error": null,
        "id": "new_synth_996",
        "straightlined_code": "x, a, b = 1, 2, 3\nanswer = a if x < a else b if x > b else x"
    },
    {
        "code": "def f(L):\n    return len(L) > 1 and L[-1] > L[-2]",
        "input": "[1, 2, 3, 4, 5]",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 31,
        "error": null,
        "id": "new_synth_999",
        "straightlined_code": "L = [1, 2, 3, 4, 5]\nanswer = len(L) > 1 and L[-1] > L[-2]"
    },
    {
        "code": "def f(num):\n    if num < 2:\n        return 1\n    return num * f(num - 1)",
        "input": "0",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_1000",
        "straightlined_code": "num = 0\nif num < 2:\n    answer = 1\nanswer = num * f(num - 1)"
    },
    {
        "code": "def f(m):\n    if \".\" in m:\n        return m[m.index(\".\")+1:]\n    return m",
        "input": "\"a.b.c.d.e\"",
        "output": "'b.c.d.e'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "new_synth_1001",
        "straightlined_code": "m = \"a.b.c.d.e\"\nif \".\" in m:\n    answer = m[m.index(\".\")+1:]\nanswer = m"
    },
    {
        "code": "def f(str1, str2, sub):\n    if sub in str2:\n        return str2.find(sub)\n    return -1",
        "input": "'happy birthday', 'birthday', 'i'",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_1009",
        "straightlined_code": "str1, str2, sub = 'happy birthday', 'birthday', 'i'\nif sub in str2:\n    answer = str2.find(sub)\nanswer = -1"
    },
    {
        "code": "def f(L):\n    return len(L) > 1 and L[0] in L[1:]",
        "input": "[3,3,4,5]",
        "output": "True",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "new_synth_1010",
        "straightlined_code": "L = [3,3,4,5]\nanswer = len(L) > 1 and L[0] in L[1:]"
    },
    {
        "code": "def f(n):\n    return 0.5*n + 15 if n > 10 else n + 3 if n > 5 else n + 5",
        "input": "0",
        "output": "5",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 35,
        "error": null,
        "id": "new_synth_1041",
        "straightlined_code": "n = 0\nanswer = 0.5*n + 15 if n > 10 else n + 3 if n > 5 else n + 5"
    },
    {
        "code": "def f(nums):\n    middle = len(nums)//2\n    return nums[middle:] + nums[0:middle]",
        "input": "[1, 2, 3]",
        "output": "[2, 3, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "new_synth_1044",
        "straightlined_code": "nums = [1, 2, 3]\nmiddle = len(nums)//2\nanswer = nums[middle:] + nums[0:middle]"
    },
    {
        "code": "def f(text, digit):\n    #different than previous? Just count instances digit\n    count = text.count(digit)\n    return int(digit) * count",
        "input": "'7Ljnw4Lj', '7'",
        "output": "7",
        "line_execution_counts": {
            "2": 1,
            "3": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_1045",
        "straightlined_code": "text, digit = '7Ljnw4Lj', '7'\n#different than previous? Just count instances digit\ncount = text.count(digit)\nanswer = int(digit) * count"
    },
    {
        "code": "def f(str):\n    x = str.rpartition('abc')\n    return x[0]+x[1]+x[2]",
        "input": "'asdfjklabcx'",
        "output": "'asdfjklabcx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "new_synth_1046",
        "straightlined_code": "str = 'asdfjklabcx'\nx = str.rpartition('abc')\nanswer = x[0]+x[1]+x[2]"
    },
    {
        "code": "def f(out, mapping):\n    for key in mapping:\n        if len(re.findall(r'{\\w}', out)) == 0:\n            return out\n        out = out.format_map(mapping)\n    return out",
        "input": "'{{{{}}}}', {}",
        "output": "'{{{{}}}}'",
        "line_execution_counts": {
            "1": 1,
            "5": 1
        },
        "ast_size": 41,
        "error": null,
        "id": "new_synth_1047",
        "straightlined_code": "out, mapping = '{{{{}}}}', {}\nfor key in mapping:\n    if len(re.findall(r'{\\w}', out)) == 0:\n        answer = out\n    out = out.format_map(mapping)\nanswer = out"
    },
    {
        "code": "def f(s, lst):\n    if s in lst:\n        return lst.index(s)\n    lst.append(s)\n    return len(lst) - 1",
        "input": "'x', ['x', 'y', 'z']",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "new_synth_1049",
        "straightlined_code": "s, lst = 'x', ['x', 'y', 'z']\nif s in lst:\n    answer = lst.index(s)\nlst.append(s)\nanswer = len(lst) - 1"
    },
    {
        "code": "def f(n):\n    if n % 400 == 0 or n % 4 == 0 and n % 100 != 0:\n        return 1\n    else:\n        return 0",
        "input": "2016",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "new_synth_1052",
        "straightlined_code": "n = 2016\nif n % 400 == 0 or n % 4 == 0 and n % 100 != 0:\n    answer = 1\nelse:\n    answer = 0"
    },
    {
        "code": "def f(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return x + y\n    else:\n        return f(x // 2, y // 2)",
        "input": "2, 2",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "new_synth_1057",
        "straightlined_code": "x, y = 2, 2\nif x % 2 == 0 and y % 2 == 0:\n    answer = x + y\nelse:\n    answer = f(x // 2, y // 2)"
    },
    {
        "code": "def f(n, a, b):\n    return a * (n / b) + (n % b)",
        "input": "0, 0, 1",
        "output": "0.0",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_1058",
        "straightlined_code": "n, a, b = 0, 0, 1\nanswer = a * (n / b) + (n % b)"
    },
    {
        "code": "def f(s):\n    t = [s[i] for i in range(len(s)) if i % 2 == 0]\n    return ''.join(t)",
        "input": "\"\"",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "new_synth_1059",
        "straightlined_code": "s = \"\"\nt = [s[i] for i in range(len(s)) if i % 2 == 0]\nanswer = ''.join(t)"
    },
    {
        "code": "def f(v, n):\n    while n > 0:\n        v *= v\n        n -= 1\n    return v",
        "input": "1, 0",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_1061",
        "straightlined_code": "v, n = 1, 0\nwhile n > 0:\n    v *= v\n    n -= 1\nanswer = v"
    },
    {
        "code": "def f(s):\n    if len(s) <= 1:\n        return s\n    else:\n        s = s.replace(s[0], '', 1) + s[0]\n    return f(s)",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 44,
        "error": null,
        "id": "new_synth_1063",
        "straightlined_code": "s = ''\nif len(s) <= 1:\n    answer = s\nelse:\n    s = s.replace(s[0], '', 1) + s[0]\nanswer = f(s)"
    },
    {
        "code": "def f(d):\n    for key in d:\n        d[key] = d[key] ** 2\n    return d",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "new_synth_1064",
        "straightlined_code": "d = {}\nfor key in d:\n    d[key] = d[key] ** 2\nanswer = d"
    },
    {
        "code": "def f(n):\n    if n == 1 or n == 0:\n        return 1\n    return n + f(n - 1)",
        "input": "0",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 32,
        "error": null,
        "id": "new_synth_1065",
        "straightlined_code": "n = 0\nif n == 1 or n == 0:\n    answer = 1\nanswer = n + f(n - 1)"
    },
    {
        "code": "def f(d, v):\n    if d == 0:\n        return v\n    return f(d-1, d-1)",
        "input": "0, 'asd'",
        "output": "'asd'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 28,
        "error": null,
        "id": "new_synth_1066",
        "straightlined_code": "d, v = 0, 'asd'\nif d == 0:\n    answer = v\nanswer = f(d-1, d-1)"
    },
    {
        "code": "def f(n):\n    return -(-n//2) if n & 1 else n//2",
        "input": "25",
        "output": "13",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 25,
        "error": null,
        "id": "new_synth_1067",
        "straightlined_code": "n = 25\nanswer = -(-n//2) if n & 1 else n//2"
    },
    {
        "code": "def f(n, m):\n    if n < 0 or m < 0:\n        return n * m\n    return f(m, n % m)",
        "input": "-10, -10",
        "output": "100",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 37,
        "error": null,
        "id": "new_synth_1069",
        "straightlined_code": "n, m = -10, -10\nif n < 0 or m < 0:\n    answer = n * m\nanswer = f(m, n % m)"
    },
    {
        "code": "def f(l):\n    for index, value in enumerate(l):\n        if value == 'a':\n            l[index] = 'b'\n    return l",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 33,
        "error": null,
        "id": "new_synth_1073",
        "straightlined_code": "l = []\nfor index, value in enumerate(l):\n    if value == 'a':\n        l[index] = 'b'\nanswer = l"
    },
    {
        "code": "def f(n):\n    return 33 % 31 % 29 % 23 % 17 % 13 % 11 % 7 % 5 % 3 % 2 % n",
        "input": "78",
        "output": "0",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 40,
        "error": null,
        "id": "new_synth_1074",
        "straightlined_code": "n = 78\nanswer = 33 % 31 % 29 % 23 % 17 % 13 % 11 % 7 % 5 % 3 % 2 % n"
    },
    {
        "code": "def f(x):\n    if len(x) == 0:\n        return True\n    if len(x) == 1:\n        return not x[0]\n    return x[0] != x[1]",
        "input": "[]",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 45,
        "error": null,
        "id": "new_synth_1076",
        "straightlined_code": "x = []\nif len(x) == 0:\n    answer = True\nif len(x) == 1:\n    answer = not x[0]\nanswer = x[0] != x[1]"
    },
    {
        "code": "def f(s, n):\n    if s == '' or n <= 0:\n        return s\n    return s[0 : s.find('a', n)]",
        "input": "'ab', 1",
        "output": "'a'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 36,
        "error": null,
        "id": "new_synth_1079",
        "straightlined_code": "s, n = 'ab', 1\nif s == '' or n <= 0:\n    answer = s\nanswer = s[0 : s.find('a', n)]"
    },
    {
        "code": "def f(s, e):\n    if len(s) < len(e) or e not in s:\n        return s\n    return s[s.index(e) + len(e) :]",
        "input": "'', 'a'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 49,
        "error": null,
        "id": "new_synth_1081",
        "straightlined_code": "s, e = '', 'a'\nif len(s) < len(e) or e not in s:\n    answer = s\nanswer = s[s.index(e) + len(e) :]"
    },
    {
        "code": "def f(a, b, c):\n    n = int((b - c) / (a + b))\n    return n + n * a + (n + 1) * b",
        "input": "3, 6, 5",
        "output": "6",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 48,
        "error": null,
        "id": "new_synth_1082",
        "straightlined_code": "a, b, c = 3, 6, 5\nn = int((b - c) / (a + b))\nanswer = n + n * a + (n + 1) * b"
    },
    {
        "code": "def f(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return f(n - 1) + f(n - 2)",
        "input": "0",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 39,
        "error": null,
        "id": "new_synth_1086",
        "straightlined_code": "n = 0\nif n == 0:\n    answer = 0\nif n == 1:\n    answer = 1\nanswer = f(n - 1) + f(n - 2)"
    },
    {
        "code": "def f(list):\n    original = list[:]\n    while len(list) > 1:\n        list.pop(len(list) - 1)\n        for i in range(len(list)):\n            list.pop(i)\n    list = original[:]\n    if list:\n        list.pop(0)\n    return list",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1,
            "7": 1,
            "9": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_7",
        "straightlined_code": "list = []\noriginal = list[:]\nwhile len(list) > 1:\n    list.pop(len(list) - 1)\n    for i in range(len(list)):\n        list.pop(i)\nlist = original[:]\nif list:\n    list.pop(0)\nanswer = list"
    },
    {
        "code": "def f(a, b):\n    for key, value in b.items():\n        if key not in a:\n            a[key] = [value]\n        else:\n            a[key].append(value)\n    return a",
        "input": "{}, {'foo': 'bar'}",
        "output": "{'foo': ['bar']}",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_11",
        "straightlined_code": "a, b = {}, {'foo': 'bar'}\nfor key, value in b.items():\n    if key not in a:\n        a[key] = [value]\n    else:\n        a[key].append(value)\nanswer = a"
    },
    {
        "code": "def f(s, x):\n    count = 0\n    while s[:len(x)] == x and count < len(s)-len(x):\n        s = s[len(x):]\n        count += len(x)\n    return s",
        "input": "'If you want to live a happy life! Daniel', 'Daniel'",
        "output": "'If you want to live a happy life! Daniel'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "sample_12",
        "straightlined_code": "s, x = 'If you want to live a happy life! Daniel', 'Daniel'\ncount = 0\nwhile s[:len(x)] == x and count < len(s)-len(x):\n    s = s[len(x):]\n    count += len(x)\nanswer = s"
    },
    {
        "code": "def f(items, target):\n    for i in items.split():\n        if i in target:\n            return items.index(i)+1\n        if i.index('.') == len(i)-1 or i.index('.') == 0:\n            return 'error'\n    return '.'",
        "input": "\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"",
        "output": "'error'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_26",
        "straightlined_code": "items, target = \"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"\nfor i in items.split():\n    if i in target:\n        answer = items.index(i)+1\n    if i.index('.') == len(i)-1 or i.index('.') == 0:\n        answer = 'error'\nanswer = '.'"
    },
    {
        "code": "def f(w):\n    ls = list(w)\n    omw = ''\n    while len(ls) > 0:\n        omw += ls.pop(0)\n        if len(ls) * 2 > len(w):\n            return w[len(ls):] == omw\n    return False",
        "input": "'flak'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 68,
        "error": null,
        "id": "sample_27",
        "straightlined_code": "w = 'flak'\nls = list(w)\nomw = ''\nwhile len(ls) > 0:\n    omw += ls.pop(0)\n    if len(ls) * 2 > len(w):\n        answer = w[len(ls):] == omw\nanswer = False"
    },
    {
        "code": "def f(text):\n    ls = list(text)\n    for i in range(0, len(ls)):\n        if ls[i]!='+':\n            ls.insert(i, '+')\n            ls.insert(i, '*')\n            break\n    return '+'.join(ls)",
        "input": "'nzoh'",
        "output": "'*+++n+z+o+h'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 60,
        "error": null,
        "id": "sample_44",
        "straightlined_code": "text = 'nzoh'\nls = list(text)\nfor i in range(0, len(ls)):\n    if ls[i]!='+':\n        ls.insert(i, '+')\n        ls.insert(i, '*')\n        break\nanswer = '+'.join(ls)"
    },
    {
        "code": "def f(text):\n    length = len(text)\n    half = length // 2\n    encode = text[:half].encode('ascii')\n    if text[half:] == encode.decode():\n        return True\n    else:\n        return False",
        "input": "'bbbbr'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "7": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_47",
        "straightlined_code": "text = 'bbbbr'\nlength = len(text)\nhalf = length // 2\nencode = text[:half].encode('ascii')\nif text[half:] == encode.decode():\n    answer = True\nelse:\n    answer = False"
    },
    {
        "code": "def f(s):\n    a = [char for char in s if char != ' ']\n    b = a\n    for c in reversed(a):\n        if c == ' ':\n            b.pop()\n        else:\n            break\n    return ''.join(b)",
        "input": "'hi '",
        "output": "'hi'",
        "line_execution_counts": {
            "1": 4,
            "2": 1,
            "3": 1,
            "4": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_59",
        "straightlined_code": "s = 'hi '\na = [char for char in s if char != ' ']\nb = a\nfor c in reversed(a):\n    if c == ' ':\n        b.pop()\n    else:\n        break\nanswer = ''.join(b)"
    },
    {
        "code": "def f(text):\n    texts = text.split()\n    if texts:\n        xtexts = [t for t in texts if t.isascii() and t not in ('nada', '0')]\n        return max(xtexts, key=len) if xtexts else 'nada'\n    return 'nada'",
        "input": "\"\"",
        "output": "'nada'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_61",
        "straightlined_code": "text = \"\"\ntexts = text.split()\nif texts:\n    xtexts = [t for t in texts if t.isascii() and t not in ('nada', '0')]\n    answer = max(xtexts, key=len) if xtexts else 'nada'\nanswer = 'nada'"
    },
    {
        "code": "def f(text, prefix):\n    prefix_length = len(prefix)\n    if text.startswith(prefix):\n        return text[(prefix_length - 1) // 2:\n                    (prefix_length + 1) // 2 * -1:-1]\n    else:\n        return text",
        "input": "'happy', 'ha'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_66",
        "straightlined_code": "text, prefix = 'happy', 'ha'\nprefix_length = len(prefix)\nif text.startswith(prefix):\n    answer = text[(prefix_length - 1) // 2:\n                (prefix_length + 1) // 2 * -1:-1]\nelse:\n    answer = text"
    },
    {
        "code": "def f(text, pref):\n    if text.startswith(pref):\n        n = len(pref)\n        text = '.'.join(text[n:].split('.')[1:] + text[:n].split('.')[:-1])\n    return text",
        "input": "'omeunhwpvr.dq', 'omeunh'",
        "output": "'dq'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 65,
        "error": null,
        "id": "sample_68",
        "straightlined_code": "text, pref = 'omeunhwpvr.dq', 'omeunh'\nif text.startswith(pref):\n    n = len(pref)\n    text = '.'.join(text[n:].split('.')[1:] + text[:n].split('.')[:-1])\nanswer = text"
    },
    {
        "code": "def f(arr):\n    arr = list(arr)\n    arr.clear()\n    arr.append('1')\n    arr.append('2')\n    arr.append('3')\n    arr.append('4')\n    return ','.join(arr)",
        "input": "[0, 1, 2, 3, 4]",
        "output": "'1,2,3,4'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_79",
        "straightlined_code": "arr = [0, 1, 2, 3, 4]\narr = list(arr)\narr.clear()\narr.append('1')\narr.append('2')\narr.append('3')\narr.append('4')\nanswer = ','.join(arr)"
    },
    {
        "code": "def f(dic, inx):\n    try:\n        dic[list(dic)[list(dic).index(inx)]] = list(dic)[list(dic).index(inx)].lower()\n    except ValueError:\n        pass\n    return list(dic.items())",
        "input": "{\"Bulls\": 23, \"White Sox\": 45}, \"Bulls\"",
        "output": "[('Bulls', 'bulls'), ('White Sox', 45)]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "sample_81",
        "straightlined_code": "dic, inx = {\"Bulls\": 23, \"White Sox\": 45}, \"Bulls\"\ntry:\n    dic[list(dic)[list(dic).index(inx)]] = list(dic)[list(dic).index(inx)].lower()\nexcept ValueError:\n    pass\nanswer = list(dic.items())"
    },
    {
        "code": "def f(text):\n    dic = dict()\n    for char in text:\n        dic[char] = dic.get(char, 0) + 1\n    for key in dic:\n        if dic[key] > 1:\n            dic[key] = 1\n    return dic",
        "input": "\"a\"",
        "output": "{'a': 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 2,
            "5": 1,
            "7": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_104",
        "straightlined_code": "text = \"a\"\ndic = dict()\nfor char in text:\n    dic[char] = dic.get(char, 0) + 1\nfor key in dic:\n    if dic[key] > 1:\n        dic[key] = 1\nanswer = dic"
    },
    {
        "code": "def f(var):\n    amount = len(var) if type(var) == list else 0\n    if type(var) == dict:\n        amount = len(var.keys())\n    nonzero = amount if amount > 0 else 0\n    return nonzero",
        "input": "1",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_108",
        "straightlined_code": "var = 1\namount = len(var) if type(var) == list else 0\nif type(var) == dict:\n    amount = len(var.keys())\nnonzero = amount if amount > 0 else 0\nanswer = nonzero"
    },
    {
        "code": "def f(countries):\n    language_country = dict()\n    for country, language in countries.items():\n        if language not in language_country:\n            language_country[language] = []\n        language_country[language].append(country)\n    return language_country",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_120",
        "straightlined_code": "countries = {}\nlanguage_country = dict()\nfor country, language in countries.items():\n    if language not in language_country:\n        language_country[language] = []\n    language_country[language].append(country)\nanswer = language_country"
    },
    {
        "code": "def f(txt, sep, sep_count):\n    o = ''\n    while sep_count > 0 and txt.count(sep) > 0:\n        o += txt.rsplit(sep, 1)[0] + sep\n        txt = txt.rsplit(sep, 1)[1]\n        sep_count -= 1\n    return o + txt",
        "input": "'i like you', ' ', -1",
        "output": "'i like you'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "sample_124",
        "straightlined_code": "txt, sep, sep_count = 'i like you', ' ', -1\no = ''\nwhile sep_count > 0 and txt.count(sep) > 0:\n    o += txt.rsplit(sep, 1)[0] + sep\n    txt = txt.rsplit(sep, 1)[1]\n    sep_count -= 1\nanswer = o + txt"
    },
    {
        "code": "def f(text):\n    s = text.rpartition('o')\n    div, div2 = (s[0] == '' and '-' or s[0]), (s[2] == '' and '-' or s[2])\n    return s[1] + div + s[1] + div2",
        "input": "'kkxkxxfck'",
        "output": "'-kkxkxxfck'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 79,
        "error": null,
        "id": "sample_126",
        "straightlined_code": "text = 'kkxkxxfck'\ns = text.rpartition('o')\ndiv, div2 = (s[0] == '' and '-' or s[0]), (s[2] == '' and '-' or s[2])\nanswer = s[1] + div + s[1] + div2"
    },
    {
        "code": "def f(n):\n    t = 0\n    b = ''\n    digits = list(map(int, str(n)))\n    for d in digits:\n        if d == 0: t += 1\n        else: break\n    for _ in range(t):\n        b += str(1) + '0' + str(4)\n    b += str(n)\n    return b",
        "input": "372359",
        "output": "'372359'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1,
            "9": 1,
            "10": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "sample_134",
        "straightlined_code": "n = 372359\nt = 0\nb = ''\ndigits = list(map(int, str(n)))\nfor d in digits:\n    if d == 0: t += 1\n    else: break\nfor _ in range(t):\n    b += str(1) + '0' + str(4)\nb += str(n)\nanswer = b"
    },
    {
        "code": "def f(text, chars):\n    listchars = list(chars)\n    first = listchars.pop()\n    for i in listchars:\n        text = text[0:text.find(i)]+i+text[text.find(i)+1:]\n    return text",
        "input": "'tflb omn rtt', 'm'",
        "output": "'tflb omn rtt'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_138",
        "straightlined_code": "text, chars = 'tflb omn rtt', 'm'\nlistchars = list(chars)\nfirst = listchars.pop()\nfor i in listchars:\n    text = text[0:text.find(i)]+i+text[text.find(i)+1:]\nanswer = text"
    },
    {
        "code": "def f(text, to_place):\n    after_place = text[:text.find(to_place, 0) + 1]\n    before_place = text[text.find(to_place, 0) + 1:]\n    return after_place + before_place",
        "input": "'some text', 'some'",
        "output": "'some text'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_176",
        "straightlined_code": "text, to_place = 'some text', 'some'\nafter_place = text[:text.find(to_place, 0) + 1]\nbefore_place = text[text.find(to_place, 0) + 1:]\nanswer = after_place + before_place"
    },
    {
        "code": "def f(digits):\n    digits.reverse()\n    if len(digits) < 2:\n        return digits\n    for i in range(0, len(digits), 2):\n        digits[i], digits[i+1] = digits[i+1], digits[i]\n    return digits",
        "input": "[1,2]",
        "output": "[1, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 2,
            "5": 1,
            "6": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "sample_184",
        "straightlined_code": "digits = [1,2]\ndigits.reverse()\nif len(digits) < 2:\n    answer = digits\nfor i in range(0, len(digits), 2):\n    digits[i], digits[i+1] = digits[i+1], digits[i]\nanswer = digits"
    },
    {
        "code": "def f(d, index):\n    length = len(d.items())\n    idx = index % length\n    v = d.popitem()[1]\n    for _ in range(idx):\n        d.popitem()\n    return v",
        "input": "{27:39}, 1",
        "output": "39",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "6": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_187",
        "straightlined_code": "d, index = {27:39}, 1\nlength = len(d.items())\nidx = index % length\nv = d.popitem()[1]\nfor _ in range(idx):\n    d.popitem()\nanswer = v"
    },
    {
        "code": "def f(n, m, num):\n    x_list = list(range(n, m+1))\n    j = 0\n    while True:\n        j = (j + num) % len(x_list)\n        if x_list[j] % 2 == 0:\n            return x_list[j]",
        "input": "46, 48, 21",
        "output": "46",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 64,
        "error": null,
        "id": "sample_210",
        "straightlined_code": "n, m, num = 46, 48, 21\nx_list = list(range(n, m+1))\nj = 0\nwhile True:\n    j = (j + num) % len(x_list)\n    if x_list[j] % 2 == 0:\n        answer = x_list[j]"
    },
    {
        "code": "def f(sample):\n    i = -1\n    while sample.find('/', i+1) != -1:\n        i = sample.find('/', i+1)\n    return sample.rindex('/', 0, i)",
        "input": "'present/here/car%2Fwe'",
        "output": "7",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_214",
        "straightlined_code": "sample = 'present/here/car%2Fwe'\ni = -1\nwhile sample.find('/', i+1) != -1:\n    i = sample.find('/', i+1)\nanswer = sample.rindex('/', 0, i)"
    },
    {
        "code": "def f(text):\n    new_text = text\n    while len(text) > 1 and text[0] == text[-1]:\n        new_text = text = text[1:-1]\n    return new_text",
        "input": "')'",
        "output": "')'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_215",
        "straightlined_code": "text = ')'\nnew_text = text\nwhile len(text) > 1 and text[0] == text[-1]:\n    new_text = text = text[1:-1]\nanswer = new_text"
    },
    {
        "code": "def f(array, value):\n    array.reverse()\n    array.pop()\n    odd = []\n    while len(array) > 0:\n        tmp = {}\n        tmp[array.pop()] = value\n        odd.append(tmp)\n    result = {}\n    while len(odd) > 0:\n        result.update(odd.pop())\n    return result",
        "input": "['23'], 123",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "8": 1,
            "9": 1,
            "11": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "sample_224",
        "straightlined_code": "array, value = ['23'], 123\narray.reverse()\narray.pop()\nodd = []\nwhile len(array) > 0:\n    tmp = {}\n    tmp[array.pop()] = value\n    odd.append(tmp)\nresult = {}\nwhile len(odd) > 0:\n    result.update(odd.pop())\nanswer = result"
    },
    {
        "code": "def f(text, char):\n    position = len(text)\n    if char in text:\n        position = text.index(char)\n        if position > 1:\n            position = (position + 1) % len(text)\n    return position",
        "input": "'wduhzxlfk', 'w'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "6": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_234",
        "straightlined_code": "text, char = 'wduhzxlfk', 'w'\nposition = len(text)\nif char in text:\n    position = text.index(char)\n    if position > 1:\n        position = (position + 1) % len(text)\nanswer = position"
    },
    {
        "code": "def f(array, arr):\n    result = []\n    for s in arr:\n        result += list(filter(lambda l: l != '', s.split(arr[array.index(s)])))\n    return result",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_235",
        "straightlined_code": "array, arr = [], []\nresult = []\nfor s in arr:\n    result += list(filter(lambda l: l != '', s.split(arr[array.index(s)])))\nanswer = result"
    },
    {
        "code": "def f(text, char):\n    if char in text:\n        suff, char, pref = text.partition(char)\n        pref = suff[:-len(char)] + suff[len(char):] + char + pref\n        return suff + char + pref\n    return text",
        "input": "'uzlwaqiaj', 'u'",
        "output": "'uuzlwaqiaj'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 77,
        "error": null,
        "id": "sample_237",
        "straightlined_code": "text, char = 'uzlwaqiaj', 'u'\nif char in text:\n    suff, char, pref = text.partition(char)\n    pref = suff[:-len(char)] + suff[len(char):] + char + pref\n    answer = suff + char + pref\nanswer = text"
    },
    {
        "code": "def f(float_number):\n    number = str(float_number)\n    dot = number.find('.')\n    if dot != -1:\n        return number[:dot] + '.' + number[dot+1:].ljust(2, '0')\n    return number + '.00'",
        "input": "3.121",
        "output": "'3.121'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_240",
        "straightlined_code": "float_number = 3.121\nnumber = str(float_number)\ndot = number.find('.')\nif dot != -1:\n    answer = number[:dot] + '.' + number[dot+1:].ljust(2, '0')\nanswer = number + '.00'"
    },
    {
        "code": "def f(book):\n    a = book.rsplit(':', 1)\n    if a[0].split(' ')[-1] == a[1].split(' ')[0]:\n        return f(' '.join(a[0].split(' ')[:-1]) + ' ' + a[1])\n    return book",
        "input": "\"udhv zcvi nhtnfyd :erwuyawa pun\"",
        "output": "'udhv zcvi nhtnfyd :erwuyawa pun'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 79,
        "error": null,
        "id": "sample_242",
        "straightlined_code": "book = \"udhv zcvi nhtnfyd :erwuyawa pun\"\na = book.rsplit(':', 1)\nif a[0].split(' ')[-1] == a[1].split(' ')[0]:\n    answer = f(' '.join(a[0].split(' ')[:-1]) + ' ' + a[1])\nanswer = book"
    },
    {
        "code": "def f(text, fill, size):\n    if size < 0:\n        size = -size\n    if len(text) > size:\n        return text[len(text) - size:]\n    return text.rjust(size, fill)",
        "input": "'no asw', 'j', 1",
        "output": "'w'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_255",
        "straightlined_code": "text, fill, size = 'no asw', 'j', 1\nif size < 0:\n    size = -size\nif len(text) > size:\n    answer = text[len(text) - size:]\nanswer = text.rjust(size, fill)"
    },
    {
        "code": "thigh_o_one = [1, 2, 7, 8, 9]\nthigh_o_two = [1, 2, 7, 9]\ndef f(L, m, start, step):\n    L.insert(start, m)\n    for x in range(start-1, 0, -step):\n        start -= 1\n        L.insert(start, L.pop(L.index(m)-1))\n    return L",
        "input": "thigh_o_two[:], 3, 3, 2",
        "output": "[1, 2, 7, 3, 9]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 2,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 83,
        "error": null,
        "id": "sample_258",
        "straightlined_code": "L, m, start, step = thigh_o_two[:], 3, 3, 2\nL.insert(start, m)\nfor x in range(start-1, 0, -step):\n    start -= 1\n    L.insert(start, L.pop(L.index(m)-1))\nanswer = L"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    score = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"}\n    result = []\n    for i in range(count):\n        result.append(score.get(nums[i]))\n    return ''.join(result)",
        "input": "[4, 5]",
        "output": "'BA'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 3,
            "5": 2,
            "6": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "sample_262",
        "straightlined_code": "nums = [4, 5]\ncount = len(nums)\nscore = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"}\nresult = []\nfor i in range(count):\n    result.append(score.get(nums[i]))\nanswer = ''.join(result)"
    },
    {
        "code": "def f(s, separator):\n    for i in range(len(s)):\n        if s[i] == separator:\n            new_s = list(s)\n            new_s[i] = '/'\n            return ' '.join(new_s)",
        "input": "'h grateful k', ' '",
        "output": "'h / g r a t e f u l   k'",
        "line_execution_counts": {
            "1": 2,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_268",
        "straightlined_code": "s, separator = 'h grateful k', ' '\nfor i in range(len(s)):\n    if s[i] == separator:\n        new_s = list(s)\n        new_s[i] = '/'\n        answer = ' '.join(new_s)"
    },
    {
        "code": "def f(array):\n    zero_len = (len(array) - 1) % 3\n    for i in range(zero_len):\n        array[i] = '0'\n    for i in range(zero_len + 1, len(array), 3):\n        array[i - 1:i + 2] = ['0', '0', '0']\n    return array",
        "input": "[9, 2]",
        "output": "['0', 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "6": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_269",
        "straightlined_code": "array = [9, 2]\nzero_len = (len(array) - 1) % 3\nfor i in range(zero_len):\n    array[i] = '0'\nfor i in range(zero_len + 1, len(array), 3):\n    array[i - 1:i + 2] = ['0', '0', '0']\nanswer = array"
    },
    {
        "code": "def f(a):\n    if len(a) >= 2 and a[0] > 0 and a[1] > 0:\n        a.reverse()\n        return a\n    a.append(0)\n    return a",
        "input": "[]",
        "output": "[0]",
        "line_execution_counts": {
            "1": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_276",
        "straightlined_code": "a = []\nif len(a) >= 2 and a[0] > 0 and a[1] > 0:\n    a.reverse()\n    answer = a\na.append(0)\nanswer = a"
    },
    {
        "code": "def f(text):\n    ans = ''\n    while text != '':\n        x, sep, text = text.partition('(')\n        ans = x + sep.replace('(', '|') + ans\n        ans = ans + text[0] + ans\n        text = text[1:]\n    return ans",
        "input": "\"\"",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "7": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_279",
        "straightlined_code": "text = \"\"\nans = ''\nwhile text != '':\n    x, sep, text = text.partition('(')\n    ans = x + sep.replace('(', '|') + ans\n    ans = ans + text[0] + ans\n    text = text[1:]\nanswer = ans"
    },
    {
        "code": "def f(array, x, i):\n    if i < -len(array) or i > len(array) - 1:\n        return 'no'\n    temp = array[i]\n    array[i] = x\n    return array",
        "input": "[1,2,3,4,5,6,7,8,9,10], 11, 4",
        "output": "[1, 2, 3, 4, 11, 6, 7, 8, 9, 10]",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_286",
        "straightlined_code": "array, x, i = [1,2,3,4,5,6,7,8,9,10], 11, 4\nif i < -len(array) or i > len(array) - 1:\n    answer = 'no'\ntemp = array[i]\narray[i] = x\nanswer = array"
    },
    {
        "code": "def f(dictionary, arr):\n    dictionary.update({arr[0]: [arr[1]]})\n    if len(dictionary[arr[0]]) == arr[1]:\n        dictionary[arr[0]] = arr[0]\n    return dictionary",
        "input": "{}, ['a', 2]",
        "output": "{'a': [2]}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_291",
        "straightlined_code": "dictionary, arr = {}, ['a', 2]\ndictionary.update({arr[0]: [arr[1]]})\nif len(dictionary[arr[0]]) == arr[1]:\n    dictionary[arr[0]] = arr[0]\nanswer = dictionary"
    },
    {
        "code": "def f(n, m, text):\n    if text.strip() == '':\n        return text\n    head, mid, tail = text[0], text[1:-1], text[-1]\n    joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n    return joined",
        "input": "\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"",
        "output": "'2$z&5H3*1a@#a*1hris'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 87,
        "error": null,
        "id": "sample_294",
        "straightlined_code": "n, m, text = \"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"\nif text.strip() == '':\n    answer = text\nhead, mid, tail = text[0], text[1:-1], text[-1]\njoined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\nanswer = joined"
    },
    {
        "code": "def f(fruits):\n    if fruits[-1] == fruits[0]:\n        return 'no'\n    else:\n        fruits.pop(0)\n        fruits.pop()\n        fruits.pop(0)\n        fruits.pop()\n        return fruits",
        "input": "['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']",
        "output": "['pear', 'banana', 'pear']",
        "line_execution_counts": {
            "1": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_295",
        "straightlined_code": "fruits = ['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']\nif fruits[-1] == fruits[0]:\n    answer = 'no'\nelse:\n    fruits.pop(0)\n    fruits.pop()\n    fruits.pop(0)\n    fruits.pop()\n    answer = fruits"
    },
    {
        "code": "def f(nums):\n    count = 1\n    for i in range(count, len(nums) - 1, 2):\n        nums[i] = max(nums[i], nums[count-1])\n        count += 1\n    return nums",
        "input": "[1, 2, 3]",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_300",
        "straightlined_code": "nums = [1, 2, 3]\ncount = 1\nfor i in range(count, len(nums) - 1, 2):\n    nums[i] = max(nums[i], nums[count-1])\n    count += 1\nanswer = nums"
    },
    {
        "code": "def f(text):\n    if ',' in text:\n        before, _, after = text.partition(',')\n        return after + ' ' + before\n    return ',' + text.partition(' ')[-1] + ' 0'",
        "input": "'244, 105, -90'",
        "output": "' 105, -90 244'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_314",
        "straightlined_code": "text = '244, 105, -90'\nif ',' in text:\n    before, _, after = text.partition(',')\n    answer = after + ' ' + before\nanswer = ',' + text.partition(' ')[-1] + ' 0'"
    },
    {
        "code": "def f(update, starting):\n    d = starting.copy()\n    for k in update:\n        if k in d:\n            d[k] += update[k]\n        else:\n            d[k] = update[k]\n    return d",
        "input": "{}, {'desciduous': 2}",
        "output": "{'desciduous': 2}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "7": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_321",
        "straightlined_code": "update, starting = {}, {'desciduous': 2}\nd = starting.copy()\nfor k in update:\n    if k in d:\n        d[k] += update[k]\n    else:\n        d[k] = update[k]\nanswer = d"
    },
    {
        "code": "def f(nums):\n    asc, desc = nums.copy(), []\n    asc.reverse()\n    desc = asc[:len(asc)//2]\n    return desc + asc + desc",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_324",
        "straightlined_code": "nums = []\nasc, desc = nums.copy(), []\nasc.reverse()\ndesc = asc[:len(asc)//2]\nanswer = desc + asc + desc"
    },
    {
        "code": "def f(s):\n    l = list(s)\n    for i in range(len(l)):\n        l[i] = l[i].lower()\n        if not l[i].isdigit():\n            return False\n    return True",
        "input": "\"\"",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_325",
        "straightlined_code": "s = \"\"\nl = list(s)\nfor i in range(len(l)):\n    l[i] = l[i].lower()\n    if not l[i].isdigit():\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(text):\n    for i in range(len(text)):\n        if text[i] == text[i].upper() and text[i-1].islower():\n            return True\n    return False",
        "input": "'jh54kkk6'",
        "output": "True",
        "line_execution_counts": {
            "1": 3,
            "2": 3,
            "3": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_329",
        "straightlined_code": "text = 'jh54kkk6'\nfor i in range(len(text)):\n    if text[i] == text[i].upper() and text[i-1].islower():\n        answer = True\nanswer = False"
    },
    {
        "code": "def f(strand, zmnc):\n    poz = strand.find(zmnc)\n    while poz != -1:\n        strand = strand[poz + 1:]\n        poz = strand.find(zmnc)\n    return strand.rfind(zmnc)",
        "input": "'', 'abc'",
        "output": "-1",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_331",
        "straightlined_code": "strand, zmnc = '', 'abc'\npoz = strand.find(zmnc)\nwhile poz != -1:\n    strand = strand[poz + 1:]\n    poz = strand.find(zmnc)\nanswer = strand.rfind(zmnc)"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    if count == 0:\n        nums = [0] * int(nums.pop())\n    elif count % 2 == 0:\n        nums.clear()\n    else:\n        del nums[:count//2:]\n    return nums",
        "input": "[-6, -2, 1, -3, 0, 1]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "5": 1,
            "8": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_332",
        "straightlined_code": "nums = [-6, -2, 1, -3, 0, 1]\ncount = len(nums)\nif count == 0:\n    nums = [0] * int(nums.pop())\nelif count % 2 == 0:\n    nums.clear()\nelse:\n    del nums[:count//2:]\nanswer = nums"
    },
    {
        "code": "def f(places, lazy):\n    places.sort()\n    for lazy in lazy:\n        places.remove(lazy)\n    if len(places) == 1:\n        return 1\n    for i, place in enumerate(places):\n        if places.count(place+1) == 0:\n            return i+1\n    return i+1",
        "input": "[375, 564, 857, 90, 728, 92], [728]",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "6": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "sample_333",
        "straightlined_code": "places, lazy = [375, 564, 857, 90, 728, 92], [728]\nplaces.sort()\nfor lazy in lazy:\n    places.remove(lazy)\nif len(places) == 1:\n    answer = 1\nfor i, place in enumerate(places):\n    if places.count(place+1) == 0:\n        answer = i+1\nanswer = i+1"
    },
    {
        "code": "def f(text, to_remove):\n    new_text = list(text)\n    if to_remove in new_text:\n        index = new_text.index(to_remove)\n        new_text.remove(to_remove)\n        new_text.insert(index, '?')\n        new_text.remove('?')\n    return ''.join(new_text)",
        "input": "'sjbrlfqmw', 'l'",
        "output": "'sjbrfqmw'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "sample_335",
        "straightlined_code": "text, to_remove = 'sjbrlfqmw', 'l'\nnew_text = list(text)\nif to_remove in new_text:\n    index = new_text.index(to_remove)\n    new_text.remove(to_remove)\n    new_text.insert(index, '?')\n    new_text.remove('?')\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(text):\n    uppercase_index = text.find('A')\n    if uppercase_index >= 0:\n        return text[:uppercase_index] + text[text.find('a') + 1 :]\n    else:\n        return ''.join(sorted(text))",
        "input": "'E jIkx HtDpV G'",
        "output": "'   DEGHIVjkptx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_340",
        "straightlined_code": "text = 'E jIkx HtDpV G'\nuppercase_index = text.find('A')\nif uppercase_index >= 0:\n    answer = text[:uppercase_index] + text[text.find('a') + 1 :]\nelse:\n    answer = ''.join(sorted(text))"
    },
    {
        "code": "def f(array, num):\n    reverse = False\n    if num < 0:\n        reverse = True\n        num *= -1\n    array = array[::-1] * num\n    l = len(array)\n    \n    if reverse:\n        array = array[::-1]\n    return array",
        "input": "[1, 2], 1",
        "output": "[2, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1,
            "6": 1,
            "8": 1,
            "10": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_356",
        "straightlined_code": "array, num = [1, 2], 1\nreverse = False\nif num < 0:\n    reverse = True\n    num *= -1\narray = array[::-1] * num\nl = len(array)\n\nif reverse:\n    array = array[::-1]\nanswer = array"
    },
    {
        "code": "def f(nums):\n    nums.sort()\n    n = len(nums)\n    new_nums = [nums[n//2]]\n    \n    if n % 2 == 0:\n        new_nums = [nums[n//2 - 1], nums[n//2]]\n    \n    for i in range(0, n//2):\n        new_nums.insert(0, nums[n-i-1])\n        new_nums.append(nums[i])\n    return new_nums",
        "input": "[1]",
        "output": "[1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1,
            "8": 1,
            "11": 1
        },
        "ast_size": 114,
        "error": null,
        "id": "sample_363",
        "straightlined_code": "nums = [1]\nnums.sort()\nn = len(nums)\nnew_nums = [nums[n//2]]\n\nif n % 2 == 0:\n    new_nums = [nums[n//2 - 1], nums[n//2]]\n\nfor i in range(0, n//2):\n    new_nums.insert(0, nums[n-i-1])\n    new_nums.append(nums[i])\nanswer = new_nums"
    },
    {
        "code": "def f(nums, rmvalue):\n    res = nums[:]\n    while rmvalue in res:\n        popped = res.pop(res.index(rmvalue))\n        if popped != rmvalue:\n            res.append(popped)\n    return res",
        "input": "[6, 2, 1, 1, 4, 1], 5",
        "output": "[6, 2, 1, 1, 4, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_367",
        "straightlined_code": "nums, rmvalue = [6, 2, 1, 1, 4, 1], 5\nres = nums[:]\nwhile rmvalue in res:\n    popped = res.pop(res.index(rmvalue))\n    if popped != rmvalue:\n        res.append(popped)\nanswer = res"
    },
    {
        "code": "def f(var):\n    if var.isdigit():\n        return \"int\"\n    elif var.replace('.', '', 1).isdigit():\n        return \"float\"\n    elif var.count(' ') == len(var) - 1:\n        return \"str\"\n    elif len(var) == 1:\n        return \"char\"\n    else:\n        return \"tuple\"",
        "input": "\" 99 777\"",
        "output": "'tuple'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1,
            "7": 1,
            "10": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_369",
        "straightlined_code": "var = \" 99 777\"\nif var.isdigit():\n    answer = \"int\"\nelif var.replace('.', '', 1).isdigit():\n    answer = \"float\"\nelif var.count(' ') == len(var) - 1:\n    answer = \"str\"\nelif len(var) == 1:\n    answer = \"char\"\nelse:\n    answer = \"tuple\""
    },
    {
        "code": "def f(dic, key):\n    dic = dict(dic)\n    v = dic.pop(key, 0)\n    if v == 0:\n        return 'No such key!'\n    while len(dic) > 0:\n        dic[dic.popitem()[1]] = dic.popitem()[0]\n    return int(dic.popitem()[0])",
        "input": "dict(did=0), 'u'",
        "output": "'No such key!'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 74,
        "error": null,
        "id": "sample_378",
        "straightlined_code": "dic, key = dict(did=0), 'u'\ndic = dict(dic)\nv = dic.pop(key, 0)\nif v == 0:\n    answer = 'No such key!'\nwhile len(dic) > 0:\n    dic[dic.popitem()[1]] = dic.popitem()[0]\nanswer = int(dic.popitem()[0])"
    },
    {
        "code": "def f(text, chars):\n    result = list(text)\n    while chars in result[-3::-2]:\n        result.remove(result[-3])\n        result.remove(result[-3])\n    return ''.join(result).strip('.')",
        "input": "'ellod!p.nkyp.exa.bi.y.hain', '.n.in.ha.y'",
        "output": "'ellod!p.nkyp.exa.bi.y.hain'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "5": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_383",
        "straightlined_code": "text, chars = 'ellod!p.nkyp.exa.bi.y.hain', '.n.in.ha.y'\nresult = list(text)\nwhile chars in result[-3::-2]:\n    result.remove(result[-3])\n    result.remove(result[-3])\nanswer = ''.join(result).strip('.')"
    },
    {
        "code": "def f(text, characters):\n    character_list = list(characters) + [' ', '_']\n\n    i = 0\n    while i < len(text) and text[i] in character_list:\n        i += 1\n\n    return text[i:]",
        "input": "\"2nm_28in\", \"nm\"",
        "output": "'2nm_28in'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1,
            "7": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_388",
        "straightlined_code": "text, characters = \"2nm_28in\", \"nm\"\ncharacter_list = list(characters) + [' ', '_']\n\ni = 0\nwhile i < len(text) and text[i] in character_list:\n    i += 1\n\nanswer = text[i:]"
    },
    {
        "code": "def f(text):\n    ls = text[::-1]\n    text2 = ''\n    for i in range(len(ls) - 3, 0, -3):\n        text2 += '---'.join(ls[i:i + 3]) + '---'\n    return text2[:-3]",
        "input": "'scala'",
        "output": "'a---c---s'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_393",
        "straightlined_code": "text = 'scala'\nls = text[::-1]\ntext2 = ''\nfor i in range(len(ls) - 3, 0, -3):\n    text2 += '---'.join(ls[i:i + 3]) + '---'\nanswer = text2[:-3]"
    },
    {
        "code": "def f(s):\n    for i in range(len(s)):\n        if s[i].isdecimal():\n            return i + (s[i] == '0')\n        elif s[i] == '0':\n            return -1\n    return -1",
        "input": "\"11\"",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_395",
        "straightlined_code": "s = \"11\"\nfor i in range(len(s)):\n    if s[i].isdecimal():\n        answer = i + (s[i] == '0')\n    elif s[i] == '0':\n        answer = -1\nanswer = -1"
    },
    {
        "code": "def f(text, old, new):\n    if len(old) > 3:\n        return text\n    if old in text and ' ' not in text:\n        return text.replace(old, new*len(old))\n    while old in text:\n        text = text.replace(old, new)\n    return text",
        "input": "'avacado', 'va', '-'",
        "output": "'a--cado'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 71,
        "error": null,
        "id": "sample_399",
        "straightlined_code": "text, old, new = 'avacado', 'va', '-'\nif len(old) > 3:\n    answer = text\nif old in text and ' ' not in text:\n    answer = text.replace(old, new*len(old))\nwhile old in text:\n    text = text.replace(old, new)\nanswer = text"
    },
    {
        "code": "def f(xs):\n    new_x = xs[0] - 1\n    xs.pop(0)\n    while(new_x <= xs[0]):\n        xs.pop(0)\n        new_x -= 1\n    xs.insert(0, new_x)\n    return xs",
        "input": "[6, 3, 4, 1, 2, 3, 5]",
        "output": "[5, 3, 4, 1, 2, 3, 5]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_405",
        "straightlined_code": "xs = [6, 3, 4, 1, 2, 3, 5]\nnew_x = xs[0] - 1\nxs.pop(0)\nwhile(new_x <= xs[0]):\n    xs.pop(0)\n    new_x -= 1\nxs.insert(0, new_x)\nanswer = xs"
    },
    {
        "code": "def f(text):\n    ls = list(text)\n    ls[0], ls[-1] = ls[-1].upper(), ls[0].upper()\n    return ''.join(ls).istitle()",
        "input": "'Josh'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_406",
        "straightlined_code": "text = 'Josh'\nls = list(text)\nls[0], ls[-1] = ls[-1].upper(), ls[0].upper()\nanswer = ''.join(ls).istitle()"
    },
    {
        "code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()\n    return text",
        "input": "'querist', 'u'",
        "output": "'querisT'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_409",
        "straightlined_code": "text, char = 'querist', 'u'\nif text:\n    text = text.removeprefix(char)\n    text = text.removeprefix(text[-1])\n    text = text[:-1] + text[-1].capitalize()\nanswer = text"
    },
    {
        "code": "def f(d):\n    dCopy = d.copy()\n    for key, value in dCopy.items():\n        for i in range(len(value)):\n            value[i] = value[i].upper()\n    return dCopy",
        "input": "{'X': ['x', 'y']}",
        "output": "{'X': ['X', 'Y']}",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 3,
            "4": 2,
            "5": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_414",
        "straightlined_code": "d = {'X': ['x', 'y']}\ndCopy = d.copy()\nfor key, value in dCopy.items():\n    for i in range(len(value)):\n        value[i] = value[i].upper()\nanswer = dCopy"
    },
    {
        "code": "def f(text, old, new):\n    index = text.rfind(old, 0, text.find(old))\n    result = list(text)\n    while index > 0:\n        result[index:index+len(old)] = new\n        index = text.rfind(old, 0, index)\n    return ''.join(result)",
        "input": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1'",
        "output": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 77,
        "error": null,
        "id": "sample_416",
        "straightlined_code": "text, old, new = 'jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1'\nindex = text.rfind(old, 0, text.find(old))\nresult = list(text)\nwhile index > 0:\n    result[index:index+len(old)] = new\n    index = text.rfind(old, 0, index)\nanswer = ''.join(result)"
    },
    {
        "code": "def f(s, p):\n    arr = s.partition(p)\n    part_one, part_two, part_three = len(arr[0]), len(arr[1]), len(arr[2])\n    if part_one >= 2 and part_two <= 2 and part_three >= 2:\n        return (arr[0][::-1] + arr[1] + arr[2][::-1] + '#')\n    return (arr[0] + arr[1] + arr[2])",
        "input": "\"qqqqq\", \"qqq\"",
        "output": "'qqqqq'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 123,
        "error": null,
        "id": "sample_418",
        "straightlined_code": "s, p = \"qqqqq\", \"qqq\"\narr = s.partition(p)\npart_one, part_two, part_three = len(arr[0]), len(arr[1]), len(arr[2])\nif part_one >= 2 and part_two <= 2 and part_three >= 2:\n    answer = (arr[0][::-1] + arr[1] + arr[2][::-1] + '#')\nanswer = (arr[0] + arr[1] + arr[2])"
    },
    {
        "code": "def f(s):\n    s = s.replace('\"', '')\n    lst = list(s)\n    col = 0\n    count = 1\n    while col < len(lst) and lst[col] in \".:,\":\n        if lst[col] == \".\":\n            count = ls[col] + 1\n        col += 1\n    return s[col+count:]",
        "input": "'\"Makers of a Statement\"'",
        "output": "'akers of a Statement'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "9": 1
        },
        "ast_size": 90,
        "error": null,
        "id": "sample_424",
        "straightlined_code": "s = '\"Makers of a Statement\"'\ns = s.replace('\"', '')\nlst = list(s)\ncol = 0\ncount = 1\nwhile col < len(lst) and lst[col] in \".:,\":\n    if lst[col] == \".\":\n        count = ls[col] + 1\n    col += 1\nanswer = s[col+count:]"
    },
    {
        "code": "def f(text):\n    text = text.split(',')\n    text.pop(0)\n    text.insert(0, text.pop(text.index('T')))\n    return 'T' + ',' + ','.join(text)",
        "input": "\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"",
        "output": "'T,T,Sspp,G ,.tB,Vxk,Cct'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_433",
        "straightlined_code": "text = \"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"\ntext = text.split(',')\ntext.pop(0)\ntext.insert(0, text.pop(text.index('T')))\nanswer = 'T' + ',' + ','.join(text)"
    },
    {
        "code": "def f(numbers, num, val):\n    while len(numbers) < num:\n        numbers.insert(len(numbers) // 2, val)\n    for _ in range(len(numbers) // (num - 1) - 4):\n        numbers.insert(len(numbers) // 2, val)\n    return ' '.join(numbers)",
        "input": "[], 0, 1",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 76,
        "error": null,
        "id": "sample_435",
        "straightlined_code": "numbers, num, val = [], 0, 1\nwhile len(numbers) < num:\n    numbers.insert(len(numbers) // 2, val)\nfor _ in range(len(numbers) // (num - 1) - 4):\n    numbers.insert(len(numbers) // 2, val)\nanswer = ' '.join(numbers)"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    for i in range(count-1, 0, -2):\n        nums.insert(i, nums.pop(0) + nums.pop(0))\n    return nums",
        "input": "[-5, 3, -2, -3, -1, 3, 5]",
        "output": "[5, -2, 2, -5]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_444",
        "straightlined_code": "nums = [-5, 3, -2, -3, -1, 3, 5]\ncount = len(nums)\nfor i in range(count-1, 0, -2):\n    nums.insert(i, nums.pop(0) + nums.pop(0))\nanswer = nums"
    },
    {
        "code": "def f(names):\n    parts = names.split(',')\n    for i, part in enumerate(parts):\n        parts[i] = part.replace(' and', '+').title().replace('+', ' and')\n    return ', '.join(parts)",
        "input": "\"carrot, banana, and strawberry\"",
        "output": "'Carrot,  Banana,  and Strawberry'",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_445",
        "straightlined_code": "names = \"carrot, banana, and strawberry\"\nparts = names.split(',')\nfor i, part in enumerate(parts):\n    parts[i] = part.replace(' and', '+').title().replace('+', ' and')\nanswer = ', '.join(parts)"
    },
    {
        "code": "def f(strs):\n    strs = strs.split()\n    for i in range(1, len(strs), 2):\n        strs[i] = ''.join(reversed(strs[i]))\n    return ' '.join(strs)",
        "input": "'K zBK'",
        "output": "'K KBz'",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_450",
        "straightlined_code": "strs = 'K zBK'\nstrs = strs.split()\nfor i in range(1, len(strs), 2):\n    strs[i] = ''.join(reversed(strs[i]))\nanswer = ' '.join(strs)"
    },
    {
        "code": "def f(text, char):\n    text = list(text)\n    for count, item in enumerate(text):\n        if item == char:\n            text.remove(item)\n            return ''.join(text)\n    return text",
        "input": "'pn', 'p'",
        "output": "'n'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_451",
        "straightlined_code": "text, char = 'pn', 'p'\ntext = list(text)\nfor count, item in enumerate(text):\n    if item == char:\n        text.remove(item)\n        answer = ''.join(text)\nanswer = text"
    },
    {
        "code": "def f(text, amount):\n    length = len(text)\n    pre_text = '|'\n    if amount >= length:\n        extra_space = amount - length\n        pre_text += ' ' * (extra_space // 2)\n        return pre_text + text + pre_text\n    return text",
        "input": "'GENERAL NAGOOR', 5",
        "output": "'GENERAL NAGOOR'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "7": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_460",
        "straightlined_code": "text, amount = 'GENERAL NAGOOR', 5\nlength = len(text)\npre_text = '|'\nif amount >= length:\n    extra_space = amount - length\n    pre_text += ' ' * (extra_space // 2)\n    answer = pre_text + text + pre_text\nanswer = text"
    },
    {
        "code": "def f(ans):\n    if ans.isdecimal():\n        total = int(ans) * 4 - 50\n        total -= len([c for c in list(ans) if c not in '02468']) * 100\n        return total\n    return 'NAN'",
        "input": "'0'",
        "output": "-50",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_464",
        "straightlined_code": "ans = '0'\nif ans.isdecimal():\n    total = int(ans) * 4 - 50\n    total -= len([c for c in list(ans) if c not in '02468']) * 100\n    answer = total\nanswer = 'NAN'"
    },
    {
        "code": "def f(text):\n    length = len(text)\n    index = 0\n    while index < length and text[index].isspace():\n        index += 1\n    return text[index:index+5]",
        "input": "'-----\\t\\n\\tth\\n-----'",
        "output": "'-----'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_466",
        "straightlined_code": "text = '-----\\t\\n\\tth\\n-----'\nlength = len(text)\nindex = 0\nwhile index < length and text[index].isspace():\n    index += 1\nanswer = text[index:index+5]"
    },
    {
        "code": "def f(text, position, value):\n   length = len(text)\n   index = position % (length)\n   if position < 0:\n       index = length // 2\n   new_text = list(text)\n   new_text.insert(index, value)\n   new_text.pop(length-1)\n   return ''.join(new_text)",
        "input": "'sduyai', 1, 'y'",
        "output": "'syduyi'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1,
            "6": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "sample_469",
        "straightlined_code": "text, position, value = 'sduyai', 1, 'y'\nlength = len(text)\nindex = position % (length)\nif position < 0:\n    index = length // 2\nnew_text = list(text)\nnew_text.insert(index, value)\nnew_text.pop(length-1)\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(val, text):\n    indices = [index for index in range(len(text)) if text[index] == val]\n    if len(indices) == 0:\n        return -1\n    else:\n        return indices[0]",
        "input": "'o', 'fnmart'",
        "output": "-1",
        "line_execution_counts": {
            "1": 7,
            "2": 1,
            "3": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_471",
        "straightlined_code": "val, text = 'o', 'fnmart'\nindices = [index for index in range(len(text)) if text[index] == val]\nif len(indices) == 0:\n    answer = -1\nelse:\n    answer = indices[0]"
    },
    {
        "code": "def f(values, item1, item2):\n    if values[-1] == item2:\n        if values[0] not in values[1:]:\n            values.append(values[0])\n    elif values[-1] == item1:\n        if values[0] == item2:\n            values.append(values[0])\n    return values",
        "input": "[1, 1], 2, 3",
        "output": "[1, 1]",
        "line_execution_counts": {
            "1": 1,
            "4": 1,
            "7": 1
        },
        "ast_size": 79,
        "error": null,
        "id": "sample_481",
        "straightlined_code": "values, item1, item2 = [1, 1], 2, 3\nif values[-1] == item2:\n    if values[0] not in values[1:]:\n        values.append(values[0])\nelif values[-1] == item1:\n    if values[0] == item2:\n        values.append(values[0])\nanswer = values"
    },
    {
        "code": "def f(tokens):\n    tokens = tokens.split()\n    if len(tokens) == 2:\n        tokens = list(reversed(tokens))\n    result = ' '.join([tokens[0].ljust(5), tokens[1].ljust(5)])\n    return result",
        "input": "'gsd avdropj'",
        "output": "'avdropj gsd  '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_485",
        "straightlined_code": "tokens = 'gsd avdropj'\ntokens = tokens.split()\nif len(tokens) == 2:\n    tokens = list(reversed(tokens))\nresult = ' '.join([tokens[0].ljust(5), tokens[1].ljust(5)])\nanswer = result"
    },
    {
        "code": "def f(text, char):\n    count = text.count(char)\n    chars = list(text)\n    if count > 0:\n        index = chars.index(char) + 1\n        chars[:index:index+1] = [c for c in chars[index:index+count:1]]\n    return ''.join(chars)",
        "input": "'tezmgvn 651h', '6'",
        "output": "'5ezmgvn 651h'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 2,
            "6": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "sample_488",
        "straightlined_code": "text, char = 'tezmgvn 651h', '6'\ncount = text.count(char)\nchars = list(text)\nif count > 0:\n    index = chars.index(char) + 1\n    chars[:index:index+1] = [c for c in chars[index:index+count:1]]\nanswer = ''.join(chars)"
    },
    {
        "code": "def f(text, value):\n    ls = list(text)\n    if (ls.count(value)) % 2 == 0:\n        while value in ls:\n            ls.remove(value)\n    else:\n        ls.clear()\n    return ''.join(ls)",
        "input": "'abbkebaniuwurzvr', 'm'",
        "output": "'abbkebaniuwurzvr'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "7": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_492",
        "straightlined_code": "text, value = 'abbkebaniuwurzvr', 'm'\nls = list(text)\nif (ls.count(value)) % 2 == 0:\n    while value in ls:\n        ls.remove(value)\nelse:\n    ls.clear()\nanswer = ''.join(ls)"
    },
    {
        "code": "def f(s):\n    if str.isascii(s[-5:]):\n        return s[-5:], s[0:][:3]\n    elif str.isascii(s[:5]):\n        return s[:5], s[-5:][3:]\n    else:\n        return s",
        "input": "'a1234\u00e5r'",
        "output": "('a1234', '\u00e5r')",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_495",
        "straightlined_code": "s = 'a1234\u00e5r'\nif str.isascii(s[-5:]):\n    answer = s[-5:], s[0:][:3]\nelif str.isascii(s[:5]):\n    answer = s[:5], s[-5:][3:]\nelse:\n    answer = s"
    },
    {
        "code": "def f(d):\n    result = [None] * len(d)\n    a = b = 0\n    while d:\n        result[a] = d.popitem(a == b)\n        a, b = b, (b+1) % len(result)\n    return result",
        "input": "{}",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 70,
        "error": null,
        "id": "sample_503",
        "straightlined_code": "d = {}\nresult = [None] * len(d)\na = b = 0\nwhile d:\n    result[a] = d.popitem(a == b)\n    a, b = b, (b+1) % len(result)\nanswer = result"
    },
    {
        "code": "def f(n):\n    p = ''\n    if n%2 == 1:\n        p+='sn'\n    else:\n        return n*n\n    for x in range(1, n+1):\n        if x%2 == 0:\n            p+='to'\n        else:\n            p+='ts'\n    return p",
        "input": "1",
        "output": "'snts'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 2,
            "7": 1,
            "10": 1,
            "11": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_506",
        "straightlined_code": "n = 1\np = ''\nif n%2 == 1:\n    p+='sn'\nelse:\n    answer = n*n\nfor x in range(1, n+1):\n    if x%2 == 0:\n        p+='to'\n    else:\n        p+='ts'\nanswer = p"
    },
    {
        "code": "def f(text, sep, maxsplit):\n    splitted = text.rsplit(sep, maxsplit)\n    length = len(splitted)\n    new_splitted = splitted[:length // 2]\n    new_splitted.reverse()\n    new_splitted += splitted[length // 2:]\n    return sep.join(new_splitted)",
        "input": "'ertubwi', 'p', 5",
        "output": "'ertubwi'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "sample_508",
        "straightlined_code": "text, sep, maxsplit = 'ertubwi', 'p', 5\nsplitted = text.rsplit(sep, maxsplit)\nlength = len(splitted)\nnew_splitted = splitted[:length // 2]\nnew_splitted.reverse()\nnew_splitted += splitted[length // 2:]\nanswer = sep.join(new_splitted)"
    },
    {
        "code": "def f(label1, char, label2, index):\n    m = label1.rindex(char)\n    if m >= index:\n        return label2[:m - index + 1]\n    return label1 + label2[index - m - 1:]",
        "input": "'ekwies', 's', 'rpg', 1",
        "output": "'rpg'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_526",
        "straightlined_code": "label1, char, label2, index = 'ekwies', 's', 'rpg', 1\nm = label1.rindex(char)\nif m >= index:\n    answer = label2[:m - index + 1]\nanswer = label1 + label2[index - m - 1:]"
    },
    {
        "code": "def f(n, array):\n    final = [array.copy()] \n    for i in range(n):\n        arr = array.copy()\n        arr.extend(final[-1])\n        final.append(arr)\n    return final",
        "input": "1, [1, 2, 3]",
        "output": "[[1, 2, 3], [1, 2, 3, 1, 2, 3]]",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_532",
        "straightlined_code": "n, array = 1, [1, 2, 3]\nfinal = [array.copy()] \nfor i in range(n):\n    arr = array.copy()\n    arr.extend(final[-1])\n    final.append(arr)\nanswer = final"
    },
    {
        "code": "def f(query, base):\n    net_sum = 0\n    for (key, val) in base.items():\n        if key[0] == query and len(key) == 3:\n            net_sum -= val\n        elif key[-1] == query and len(key) == 3:\n            net_sum += val\n    return net_sum",
        "input": "'a', {}",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "7": 1
        },
        "ast_size": 78,
        "error": null,
        "id": "sample_533",
        "straightlined_code": "query, base = 'a', {}\nnet_sum = 0\nfor (key, val) in base.items():\n    if key[0] == query and len(key) == 3:\n        net_sum -= val\n    elif key[-1] == query and len(key) == 3:\n        net_sum += val\nanswer = net_sum"
    },
    {
        "code": "def f(text):\n    a = text.split('\\n')\n    b = []\n    for i in range(len(a)):\n        c = a[i].replace('\\t', '    ')\n        b.append(c)\n    return '\\n'.join(b)",
        "input": "\"\\t\\t\\ttab tab tabulates\"",
        "output": "'            tab tab tabulates'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_544",
        "straightlined_code": "text = \"\\t\\t\\ttab tab tabulates\"\na = text.split('\\n')\nb = []\nfor i in range(len(a)):\n    c = a[i].replace('\\t', '    ')\n    b.append(c)\nanswer = '\\n'.join(b)"
    },
    {
        "code": "def f(d):\n    result = {}\n    for k, v in d.items():\n        if isinstance(k, float):\n            for i in v:\n                result[i] = k\n        else:\n            result[k] = v\n    return result",
        "input": "{2: 0.76, 5: [3, 6, 9, 12]}",
        "output": "{2: 0.76, 5: [3, 6, 9, 12]}",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "7": 2,
            "8": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_552",
        "straightlined_code": "d = {2: 0.76, 5: [3, 6, 9, 12]}\nresult = {}\nfor k, v in d.items():\n    if isinstance(k, float):\n        for i in v:\n            result[i] = k\n    else:\n        result[k] = v\nanswer = result"
    },
    {
        "code": "def f(string, code):\n    t = ''\n    try:\n        t = string.encode(code)\n        if t.endswith(b'\\n'):\n            t = t[:-1]\n        t = t.decode('UTF-8')\n        return t\n    except:\n        return t",
        "input": "\"towaru\", \"UTF-8\"",
        "output": "'towaru'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_566",
        "straightlined_code": "string, code = \"towaru\", \"UTF-8\"\nt = ''\ntry:\n    t = string.encode(code)\n    if t.endswith(b'\\n'):\n        t = t[:-1]\n    t = t.decode('UTF-8')\n    answer = t\nexcept:\n    answer = t"
    },
    {
        "code": "def f(s, n):\n    ls = s.rsplit()\n    out = []\n    while len(ls) >= n:\n        out += ls[-n:]\n        ls = ls[:-n]\n    return ls + ['_'.join(out)]",
        "input": "'one two three four five', 3",
        "output": "['one', 'two', 'three_four_five']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_567",
        "straightlined_code": "s, n = 'one two three four five', 3\nls = s.rsplit()\nout = []\nwhile len(ls) >= n:\n    out += ls[-n:]\n    ls = ls[:-n]\nanswer = ls + ['_'.join(out)]"
    },
    {
        "code": "def f(data, num):\n    new_dict = {}\n    temp = list(data.items())\n    for i in range(len(temp) - 1, num - 1, -1):\n        new_dict[temp[i]] = None\n    return temp[num:] + list(new_dict.items())",
        "input": "{1: 9, 2: 10, 3: 1}, 1",
        "output": "[(2, 10), (3, 1), ((3, 1), None), ((2, 10), None)]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 1
        },
        "ast_size": 72,
        "error": null,
        "id": "sample_572",
        "straightlined_code": "data, num = {1: 9, 2: 10, 3: 1}, 1\nnew_dict = {}\ntemp = list(data.items())\nfor i in range(len(temp) - 1, num - 1, -1):\n    new_dict[temp[i]] = None\nanswer = temp[num:] + list(new_dict.items())"
    },
    {
        "code": "def f(text):\n    if text.istitle():\n        if len(text) > 1 and text.lower() != text:\n            return text[0].lower() + text[1:]\n    elif text.isalpha():\n        return text.capitalize()\n    return text",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "4": 1,
            "6": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_579",
        "straightlined_code": "text = ''\nif text.istitle():\n    if len(text) > 1 and text.lower() != text:\n        answer = text[0].lower() + text[1:]\nelif text.isalpha():\n    answer = text.capitalize()\nanswer = text"
    },
    {
        "code": "def f(text):\n    count = text.count(text[0])\n    ls = list(text)\n    for _ in range(count):\n        ls.remove(ls[0])\n    return ''.join(ls)",
        "input": "';,,,?'",
        "output": "',,,?'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_585",
        "straightlined_code": "text = ';,,,?'\ncount = text.count(text[0])\nls = list(text)\nfor _ in range(count):\n    ls.remove(ls[0])\nanswer = ''.join(ls)"
    },
    {
        "code": "def f(array, elem):\n    result = array.copy()\n    while result:\n        key, value = result.popitem()\n        if elem == key or elem == value:\n            result.update(array)\n        del result[key]\n    return result",
        "input": "{}, 1",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "7": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "sample_609",
        "straightlined_code": "array, elem = {}, 1\nresult = array.copy()\nwhile result:\n    key, value = result.popitem()\n    if elem == key or elem == value:\n        result.update(array)\n    del result[key]\nanswer = result"
    },
    {
        "code": "def f(keys, value):\n    d = dict.fromkeys(keys, value)\n    for i, k in enumerate(d.copy(), 1):\n        if d[k] == d[i]:\n            del d[i]\n    return d",
        "input": "[1, 2, 1, 1], 3",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 2,
            "5": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_610",
        "straightlined_code": "keys, value = [1, 2, 1, 1], 3\nd = dict.fromkeys(keys, value)\nfor i, k in enumerate(d.copy(), 1):\n    if d[k] == d[i]:\n        del d[i]\nanswer = d"
    },
    {
        "code": "def f(s):\n    left, sep, right = s.rpartition('.')\n    new = sep.join([right, left])\n    _, sep, _ = new.rpartition('.')\n    return new.replace(sep, ', ')",
        "input": "'galgu'",
        "output": "', g, a, l, g, u, '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_622",
        "straightlined_code": "s = 'galgu'\nleft, sep, right = s.rpartition('.')\nnew = sep.join([right, left])\n_, sep, _ = new.rpartition('.')\nanswer = new.replace(sep, ', ')"
    },
    {
        "code": "def f(text, char):\n    char_index = text.find(char)\n    result = []\n    if char_index > 0:\n        result = list(text[:char_index])\n    result.extend(list(char)+list(text[char_index+len(char):]))\n    return ''.join(result)",
        "input": "'llomnrpc', 'x'",
        "output": "'xllomnrpc'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 76,
        "error": null,
        "id": "sample_624",
        "straightlined_code": "text, char = 'llomnrpc', 'x'\nchar_index = text.find(char)\nresult = []\nif char_index > 0:\n    result = list(text[:char_index])\nresult.extend(list(char)+list(text[char_index+len(char):]))\nanswer = ''.join(result)"
    },
    {
        "code": "def f(text, dng):\n    if dng not in text:\n        return text\n    if text[-len(dng):] == dng:\n        return text[:-len(dng)]\n    return text[:-1] + f(text[:-2], dng)",
        "input": "'catNG', 'NG'",
        "output": "'cat'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_629",
        "straightlined_code": "text, dng = 'catNG', 'NG'\nif dng not in text:\n    answer = text\nif text[-len(dng):] == dng:\n    answer = text[:-len(dng)]\nanswer = text[:-1] + f(text[:-2], dng)"
    },
    {
        "code": "def f(perc, full):\n    reply = \"\"\n    i = 0\n    while perc[i] == full[i] and i < len(full) and i < len(perc):\n        if perc[i] == full[i]:\n            reply += \"yes \"\n        else:\n            reply += \"no \"\n        i += 1\n    return reply",
        "input": "\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"",
        "output": "'yes '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "8": 1,
            "9": 1
        },
        "ast_size": 81,
        "error": null,
        "id": "sample_639",
        "straightlined_code": "perc, full = \"xabxfiwoexahxaxbxs\", \"xbabcabccb\"\nreply = \"\"\ni = 0\nwhile perc[i] == full[i] and i < len(full) and i < len(perc):\n    if perc[i] == full[i]:\n        reply += \"yes \"\n    else:\n        reply += \"no \"\n    i += 1\nanswer = reply"
    },
    {
        "code": "def f(list1, list2):\n    l = list1[:]\n    while len(l) > 0:\n        if l[-1] in list2:\n            l.pop()\n        else:\n            return l[-1]\n    return 'missing'",
        "input": "[0, 4, 5, 6], [13, 23, -5, 0]",
        "output": "6",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_648",
        "straightlined_code": "list1, list2 = [0, 4, 5, 6], [13, 23, -5, 0]\nl = list1[:]\nwhile len(l) > 0:\n    if l[-1] in list2:\n        l.pop()\n    else:\n        answer = l[-1]\nanswer = 'missing'"
    },
    {
        "code": "def f(string):\n    if not string or not string[0].isnumeric:\n        return 'INVALID'\n    cur = 0\n    for i in range(len(string)):\n        cur = cur * 10 + int(string[i])\n    return str(cur)",
        "input": "'3'",
        "output": "'3'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 2,
            "5": 1,
            "6": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_652",
        "straightlined_code": "string = '3'\nif not string or not string[0].isnumeric:\n    answer = 'INVALID'\ncur = 0\nfor i in range(len(string)):\n    cur = cur * 10 + int(string[i])\nanswer = str(cur)"
    },
    {
        "code": "def f(d1, d2):\n    mmax = 0\n    for k1 in d1:\n        if p := len(d1[k1])+len(d2.get(k1, [])):\n            if p > mmax:\n                mmax = p\n    return mmax",
        "input": "{ 0: [], 1: [] }, { 0: [0, 0, 0, 0], 2: [2, 2, 2] }",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_666",
        "straightlined_code": "d1, d2 = { 0: [], 1: [] }, { 0: [0, 0, 0, 0], 2: [2, 2, 2] }\nmmax = 0\nfor k1 in d1:\n    if p := len(d1[k1])+len(d2.get(k1, [])):\n        if p > mmax:\n            mmax = p\nanswer = mmax"
    },
    {
        "code": "def f(text):\n    new_text = []\n    for i in range(len(text) // 3):\n        new_text.append(f\"< {text[i * 3: i * 3 + 3]} level={i} >\")\n    last_item = text[len(text) // 3 * 3:]\n    new_text.append(f\"< {last_item} level={len(text) // 3} >\")\n    return new_text",
        "input": "'C7'",
        "output": "['< C7 level=0 >']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 99,
        "error": null,
        "id": "sample_667",
        "straightlined_code": "text = 'C7'\nnew_text = []\nfor i in range(len(text) // 3):\n    new_text.append(f\"< {text[i * 3: i * 3 + 3]} level={i} >\")\nlast_item = text[len(text) // 3 * 3:]\nnew_text.append(f\"< {last_item} level={len(text) // 3} >\")\nanswer = new_text"
    },
    {
        "code": "def f(text, position, value):\n    length = len(text)\n    index = (position % (length + 2)) - 1\n    if index >= length or index < 0:\n        return text\n    text[index] = value\n    return ''.join(text)",
        "input": "\"1zd\", 0, 'm'",
        "output": "'1zd'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_672",
        "straightlined_code": "text, position, value = \"1zd\", 0, 'm'\nlength = len(text)\nindex = (position % (length + 2)) - 1\nif index >= length or index < 0:\n    answer = text\ntext[index] = value\nanswer = ''.join(text)"
    },
    {
        "code": "def f(text):\n    ls = list(text)\n    for x in range(len(ls)-1, -1, -1):\n        if len(ls) <= 1: break\n        if ls[x] not in 'zyxwvutsrqponmlkjihgfedcba': ls.pop(ls[x])\n    return ''.join(ls)",
        "input": "'qq'",
        "output": "'qq'",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 2,
            "5": 1
        },
        "ast_size": 71,
        "error": null,
        "id": "sample_674",
        "straightlined_code": "text = 'qq'\nls = list(text)\nfor x in range(len(ls)-1, -1, -1):\n    if len(ls) <= 1: break\n    if ls[x] not in 'zyxwvutsrqponmlkjihgfedcba': ls.pop(ls[x])\nanswer = ''.join(ls)"
    },
    {
        "code": "def f(text, length):\n    length = -length if length < 0 else length\n    output = ''\n    for idx in range(length):\n        if text[idx % len(text)] != ' ':\n            output += text[idx % len(text)]\n        else:\n            break\n    return output",
        "input": "'I got 1 and 0.', 5",
        "output": "'I'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 2,
            "5": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 70,
        "error": null,
        "id": "sample_677",
        "straightlined_code": "text, length = 'I got 1 and 0.', 5\nlength = -length if length < 0 else length\noutput = ''\nfor idx in range(length):\n    if text[idx % len(text)] != ' ':\n        output += text[idx % len(text)]\n    else:\n        break\nanswer = output"
    },
    {
        "code": "def f(array):\n    a = []\n    array.reverse()\n    for i in range(len(array)):\n        if array[i] != 0:\n            a.append(array[i])\n    a.reverse()\n    return a",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_692",
        "straightlined_code": "array = []\na = []\narray.reverse()\nfor i in range(len(array)):\n    if array[i] != 0:\n        a.append(array[i])\na.reverse()\nanswer = a"
    },
    {
        "code": "def f(d):\n    result = {}\n    for ki, li in d.items():\n        result.update({ki: []})\n        for kj, dj in enumerate(li):\n            result[ki].append({})\n            for kk, l in dj.items():\n                result[ki][kj][kk] = l.copy()\n    return result",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "8": 1
        },
        "ast_size": 89,
        "error": null,
        "id": "sample_695",
        "straightlined_code": "d = {}\nresult = {}\nfor ki, li in d.items():\n    result.update({ki: []})\n    for kj, dj in enumerate(li):\n        result[ki].append({})\n        for kk, l in dj.items():\n            result[ki][kj][kk] = l.copy()\nanswer = result"
    },
    {
        "code": "def f(s, sep):\n    sep_index = s.find(sep)\n    prefix = s[:sep_index]\n    middle = s[sep_index:sep_index + len(sep)]\n    right_str = s[sep_index + len(sep):]\n    return prefix, middle, right_str",
        "input": "\"not it\", \"\"",
        "output": "('', '', 'not it')",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 70,
        "error": null,
        "id": "sample_697",
        "straightlined_code": "s, sep = \"not it\", \"\"\nsep_index = s.find(sep)\nprefix = s[:sep_index]\nmiddle = s[sep_index:sep_index + len(sep)]\nright_str = s[sep_index + len(sep):]\nanswer = prefix, middle, right_str"
    },
    {
        "code": "def f(text, elem):\n    if elem != '':\n        while text.startswith(elem):\n            text = text.replace(elem, '')\n        while elem.startswith(text):\n            elem = elem.replace(text, '')\n    return [elem, text]",
        "input": "\"some\", \"1\"",
        "output": "['1', 'some']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "6": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_699",
        "straightlined_code": "text, elem = \"some\", \"1\"\nif elem != '':\n    while text.startswith(elem):\n        text = text.replace(elem, '')\n    while elem.startswith(text):\n        elem = elem.replace(text, '')\nanswer = [elem, text]"
    },
    {
        "code": "def f(r, w):\n    a = []\n    if r[0] == w[0] and w[-1] == r[-1]:\n        a.append(r)\n        a.append(w)\n    else:\n        a.append(w)\n        a.append(r)\n    return a",
        "input": "\"ab\", \"xy\"",
        "output": "['xy', 'ab']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 76,
        "error": null,
        "id": "sample_706",
        "straightlined_code": "r, w = \"ab\", \"xy\"\na = []\nif r[0] == w[0] and w[-1] == r[-1]:\n    a.append(r)\n    a.append(w)\nelse:\n    a.append(w)\n    a.append(r)\nanswer = a"
    },
    {
        "code": "def f(text, position):\n    length = len(text)\n    index = position % (length + 1)\n    if position < 0 or index < 0:\n        index = -1\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)",
        "input": "'undbs l', 1",
        "output": "'udbs l'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "sample_707",
        "straightlined_code": "text, position = 'undbs l', 1\nlength = len(text)\nindex = position % (length + 1)\nif position < 0 or index < 0:\n    index = -1\nnew_text = list(text)\nnew_text.pop(index)\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(text):\n    (k, l) = (0, len(text) - 1)\n    while not text[l].isalpha():\n        l -= 1\n    while not text[k].isalpha():\n        k += 1\n    if k != 0 or l != len(text) - 1:\n        return text[k: l+1]\n    else:\n        return text[0]",
        "input": "\"timetable, 2mil\"",
        "output": "'t'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1,
            "6": 1,
            "9": 1
        },
        "ast_size": 95,
        "error": null,
        "id": "sample_717",
        "straightlined_code": "text = \"timetable, 2mil\"\n(k, l) = (0, len(text) - 1)\nwhile not text[l].isalpha():\n    l -= 1\nwhile not text[k].isalpha():\n    k += 1\nif k != 0 or l != len(text) - 1:\n    answer = text[k: l+1]\nelse:\n    answer = text[0]"
    },
    {
        "code": "def f(code):\n    lines = code.split(']')\n    result = []\n    level = 0\n    for line in lines:\n        result.append(line[0] + ' ' + '  ' * level + line[1:])\n        level += line.count('{') - line.count('}')\n    return '\\n'.join(result)",
        "input": "\"if (x) {y = 1;} else {z = 1;}\"",
        "output": "'i f (x) {y = 1;} else {z = 1;}'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 2,
            "5": 1,
            "6": 1,
            "7": 1
        },
        "ast_size": 81,
        "error": null,
        "id": "sample_719",
        "straightlined_code": "code = \"if (x) {y = 1;} else {z = 1;}\"\nlines = code.split(']')\nresult = []\nlevel = 0\nfor line in lines:\n    result.append(line[0] + ' ' + '  ' * level + line[1:])\n    level += line.count('{') - line.count('}')\nanswer = '\\n'.join(result)"
    },
    {
        "code": "def f(text):\n    result = []\n    for i, ch in enumerate(text):\n        if ch == ch.lower():\n            continue\n        if len(text) - 1 - i < text.rindex(ch.lower()):\n            result.append(ch)\n    return ''.join(result)",
        "input": "'ru'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 2,
            "7": 1
        },
        "ast_size": 72,
        "error": null,
        "id": "sample_728",
        "straightlined_code": "text = 'ru'\nresult = []\nfor i, ch in enumerate(text):\n    if ch == ch.lower():\n        continue\n    if len(text) - 1 - i < text.rindex(ch.lower()):\n        result.append(ch)\nanswer = ''.join(result)"
    },
    {
        "code": "def f(nums):\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] % 2 == 0:\n            nums.remove(nums[i])\n    return nums",
        "input": "[5, 3, 3, 7]",
        "output": "[5, 3, 3, 7]",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "4": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_734",
        "straightlined_code": "nums = [5, 3, 3, 7]\nfor i in range(len(nums) - 2, -1, -1):\n    if nums[i] % 2 == 0:\n        nums.remove(nums[i])\nanswer = nums"
    },
    {
        "code": "def f(plot, delin):\n    if delin in plot:\n        split = plot.index(delin)\n        first = plot[:split]\n        second = plot[split + 1:]\n        return first + second\n    else:\n        return plot",
        "input": "[1, 2, 3, 4], 3",
        "output": "[1, 2, 4]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_740",
        "straightlined_code": "plot, delin = [1, 2, 3, 4], 3\nif delin in plot:\n    split = plot.index(delin)\n    first = plot[:split]\n    second = plot[split + 1:]\n    answer = first + second\nelse:\n    answer = plot"
    },
    {
        "code": "def f(address):\n    suffix_start = address.index('@') + 1\n    if address[suffix_start:].count('.') > 1:\n        address = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\n    return address",
        "input": "'minimc@minimc.io'",
        "output": "'minimc@minimc.io'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_745",
        "straightlined_code": "address = 'minimc@minimc.io'\nsuffix_start = address.index('@') + 1\nif address[suffix_start:].count('.') > 1:\n    address = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\nanswer = address"
    },
    {
        "code": "def f(text):\n    if text == '42.42':\n        return True\n    for i in range(3, len(text) - 3):\n        if text[i] == '.' and text[i - 3:].isdigit() and text[:i].isdigit():\n            return True\n    return False",
        "input": "\"123E-10\"",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "3": 2,
            "4": 1,
            "6": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_747",
        "straightlined_code": "text = \"123E-10\"\nif text == '42.42':\n    answer = True\nfor i in range(3, len(text) - 3):\n    if text[i] == '.' and text[i - 3:].isdigit() and text[:i].isdigit():\n        answer = True\nanswer = False"
    },
    {
        "code": "def f(text, sub):\n    index = []\n    starting = 0\n    while starting != -1:\n        starting = text.find(sub, starting)\n        if starting != -1:\n            index.append(starting)\n            starting += len(sub)\n    return index",
        "input": "'egmdartoa', 'good'",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "8": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_759",
        "straightlined_code": "text, sub = 'egmdartoa', 'good'\nindex = []\nstarting = 0\nwhile starting != -1:\n    starting = text.find(sub, starting)\n    if starting != -1:\n        index.append(starting)\n        starting += len(sub)\nanswer = index"
    },
    {
        "code": "def f(text, old, new):\n    text2 = text.replace(old, new)\n    old2 = old[::-1]\n    while old2 in text2:\n        text2 = text2.replace(old2, new)\n    return text2",
        "input": "\"some test string\", \"some\", \"any\"",
        "output": "'any test string'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_764",
        "straightlined_code": "text, old, new = \"some test string\", \"some\", \"any\"\ntext2 = text.replace(old, new)\nold2 = old[::-1]\nwhile old2 in text2:\n    text2 = text2.replace(old2, new)\nanswer = text2"
    },
    {
        "code": "def f(line, char):\n    count = line.count(char)\n    for i in range(count+1, 0, -1):\n        line = line.center(len(line)+i // len(char), char)\n    return line",
        "input": "'$78'.upper(), '$'",
        "output": "'$$78$$'",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_770",
        "straightlined_code": "line, char = '$78'.upper(), '$'\ncount = line.count(char)\nfor i in range(count+1, 0, -1):\n    line = line.center(len(line)+i // len(char), char)\nanswer = line"
    },
    {
        "code": "def f(nums):\n    count = len(nums)\n    for i in range(0, count // 2):\n        nums[i], nums[count-i-1] = nums[count-i-1], nums[i]\n    return nums",
        "input": "[2, 6, 1, 3, 1]",
        "output": "[1, 3, 1, 6, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 70,
        "error": null,
        "id": "sample_775",
        "straightlined_code": "nums = [2, 6, 1, 3, 1]\ncount = len(nums)\nfor i in range(0, count // 2):\n    nums[i], nums[count-i-1] = nums[count-i-1], nums[i]\nanswer = nums"
    },
    {
        "code": "def f(dictionary):\n    a = dictionary.copy()\n    for key in a:\n        if key%2 != 0:\n            del a[key]\n            a['$'+str(key)] = a[key]\n    return a",
        "input": "{}",
        "output": "{}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "6": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_776",
        "straightlined_code": "dictionary = {}\na = dictionary.copy()\nfor key in a:\n    if key%2 != 0:\n        del a[key]\n        a['$'+str(key)] = a[key]\nanswer = a"
    },
    {
        "code": "def f(names, excluded):\n    excluded = excluded\n    for i in range(len(names)):\n        if excluded in names[i]:\n            names[i] = names[i].replace(excluded, \"\")\n    return names",
        "input": "[\"avc  a .d e\"], \"\"",
        "output": "['avc  a .d e']",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_777",
        "straightlined_code": "names, excluded = [\"avc  a .d e\"], \"\"\nexcluded = excluded\nfor i in range(len(names)):\n    if excluded in names[i]:\n        names[i] = names[i].replace(excluded, \"\")\nanswer = names"
    },
    {
        "code": "def f(s, ch):\n    if ch not in s:\n        return ''\n    s = s.partition(ch)[2][::-1]\n    for i in range(len(s)):\n        s = s.partition(ch)[2][::-1]\n    return s",
        "input": "'shivajimonto6', '6'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1,
            "6": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_781",
        "straightlined_code": "s, ch = 'shivajimonto6', '6'\nif ch not in s:\n    answer = ''\ns = s.partition(ch)[2][::-1]\nfor i in range(len(s)):\n    s = s.partition(ch)[2][::-1]\nanswer = s"
    },
    {
        "code": "def f(text, comparison):\n    length = len(comparison)\n    if length <= len(text):\n        for i in range(length):\n            if comparison[length - i - 1] != text[len(text) - i - 1]:\n                return i\n    return length",
        "input": "\"managed\", \"\"",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "6": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_783",
        "straightlined_code": "text, comparison = \"managed\", \"\"\nlength = len(comparison)\nif length <= len(text):\n    for i in range(length):\n        if comparison[length - i - 1] != text[len(text) - i - 1]:\n            answer = i\nanswer = length"
    },
    {
        "code": "def f(integer, n):\n    i = 1\n    text = str(integer)\n    while (i+len(text) < n):\n        i += len(text)\n    return text.zfill(i+len(text))",
        "input": "8999,2",
        "output": "'08999'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_791",
        "straightlined_code": "integer, n = 8999,2\ni = 1\ntext = str(integer)\nwhile (i+len(text) < n):\n    i += len(text)\nanswer = text.zfill(i+len(text))"
    },
    {
        "code": "def f(list1, list2):\n    list3 = []\n    for i in range(max(len(list1), len(list2))):\n        list3.append((list1[i] + list2[i]) if (i < len(list1) and i < len(list2)) else list1[i] if i < len(list1) else list2[i])\n    return list3",
        "input": "[[1, 2], [3, 4]], [[5, 6], [7, 8]]",
        "output": "[[1, 2, 5, 6], [3, 4, 7, 8]]",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 1
        },
        "ast_size": 95,
        "error": null,
        "id": "new_synth_808",
        "straightlined_code": "list1, list2 = [[1, 2], [3, 4]], [[5, 6], [7, 8]]\nlist3 = []\nfor i in range(max(len(list1), len(list2))):\n    list3.append((list1[i] + list2[i]) if (i < len(list1) and i < len(list2)) else list1[i] if i < len(list1) else list2[i])\nanswer = list3"
    },
    {
        "code": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return count, ''.join(new_text)",
        "input": "'DSUWeqExTQdCMGpqur', 'a', 'x'",
        "output": "(0, 'xxxxxxxxxxxxxxxxxx')",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 19,
            "4": 18,
            "5": 18,
            "7": 18,
            "8": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "sample_5",
        "straightlined_code": "text, lower, upper = 'DSUWeqExTQdCMGpqur', 'a', 'x'\ncount = 0\nnew_text = list()\nfor char in text:\n    char = lower if char.isdecimal() else upper\n    if char in ['p', 'C']:\n        count += 1\n    new_text.append(char)\nanswer = count, ''.join(new_text)"
    },
    {
        "code": "def f(dic):\n    for k,v in sorted(dic.items(), key=lambda x: len(str(x)))[:-1]:\n        dic.pop(k)\n    return list(dic.items())",
        "input": "{'11': 52, '65': 34, 'a': 12, '4': 52, '74': 31}",
        "output": "[('74', 31)]",
        "line_execution_counts": {
            "1": 10,
            "2": 4,
            "3": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_6",
        "straightlined_code": "dic = {'11': 52, '65': 34, 'a': 12, '4': 52, '74': 31}\nfor k,v in sorted(dic.items(), key=lambda x: len(str(x)))[:-1]:\n    dic.pop(k)\nanswer = list(dic.items())"
    },
    {
        "code": "def f(x, y):\n    tmp = ''.join(['0' if c == '9' else '9' for c in y[::-1]])\n    if (x.isnumeric() and tmp.isnumeric()):\n        return x + tmp\n    else:\n        return x",
        "input": "\"\", \"sdasdnakjsda80\"",
        "output": "''",
        "line_execution_counts": {
            "1": 15,
            "2": 1,
            "5": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_19",
        "straightlined_code": "x, y = \"\", \"sdasdnakjsda80\"\ntmp = ''.join(['0' if c == '9' else '9' for c in y[::-1]])\nif (x.isnumeric() and tmp.isnumeric()):\n    answer = x + tmp\nelse:\n    answer = x"
    },
    {
        "code": "def f(array):\n    result = []\n    for elem in array:\n        if elem.isascii() or (isinstance(elem, int) and not str(abs(elem)).isascii()):\n            result.append(elem)\n    return result",
        "input": "[\"a\", \"b\", \"c\"]",
        "output": "['a', 'b', 'c']",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "5": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_30",
        "straightlined_code": "array = [\"a\", \"b\", \"c\"]\nresult = []\nfor elem in array:\n    if elem.isascii() or (isinstance(elem, int) and not str(abs(elem)).isascii()):\n        result.append(elem)\nanswer = result"
    },
    {
        "code": "def f(lists):\n    dic = {}\n    for n in lists:\n        if n in dic:\n            dic[n].append(lists.pop(lists.index(n)))\n        else:\n            dic[n] = lists[:lists.index(n) + 1]\n    return str(dic).replace(' ', '')",
        "input": "[5, 2, 7, 2, 3, 5]",
        "output": "'{5:[5,5],2:[5,2,2],7:[5,2,7]}'",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "6": 3,
            "4": 2,
            "7": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_33",
        "straightlined_code": "lists = [5, 2, 7, 2, 3, 5]\ndic = {}\nfor n in lists:\n    if n in dic:\n        dic[n].append(lists.pop(lists.index(n)))\n    else:\n        dic[n] = lists[:lists.index(n) + 1]\nanswer = str(dic).replace(' ', '')"
    },
    {
        "code": "def f(text):\n    a = []\n    for i in range(len(text)):\n        if not text[i].isdecimal():\n            a.append(text[i])\n    return ''.join(a)",
        "input": "\"seiq7229 d27\"",
        "output": "'seiq d'",
        "line_execution_counts": {
            "1": 1,
            "2": 13,
            "3": 12,
            "4": 6,
            "5": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_52",
        "straightlined_code": "text = \"seiq7229 d27\"\na = []\nfor i in range(len(text)):\n    if not text[i].isdecimal():\n        a.append(text[i])\nanswer = ''.join(a)"
    },
    {
        "code": "def f(text):\n    occ = {}\n    for ch in text:\n        name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}\n        name = name.get(ch, ch)\n        occ[name] = occ.get(name, 0) + 1\n    return [x for _, x in occ.items()]",
        "input": "\"URW rNB\"",
        "output": "[1, 1, 1, 1, 1, 1, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 8,
            "3": 7,
            "4": 7,
            "5": 7,
            "6": 8
        },
        "ast_size": 73,
        "error": null,
        "id": "sample_53",
        "straightlined_code": "text = \"URW rNB\"\nocc = {}\nfor ch in text:\n    name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}\n    name = name.get(ch, ch)\n    occ[name] = occ.get(name, 0) + 1\nanswer = [x for _, x in occ.items()]"
    },
    {
        "code": "def f(text, size):\n    counter = len(text)\n    for i in range(size-int(size%2)):\n        text = ' '+text+' '\n        counter += 2\n        if counter >= size:\n            return text",
        "input": "\"7\", 10",
        "output": "'     7     '",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 5,
            "4": 5,
            "5": 5,
            "6": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_64",
        "straightlined_code": "text, size = \"7\", 10\ncounter = len(text)\nfor i in range(size-int(size%2)):\n    text = ' '+text+' '\n    counter += 2\n    if counter >= size:\n        answer = text"
    },
    {
        "code": "def f(nums):\n    nums = [y for y in nums if y > 0]\n    if len(nums) <= 3:\n        return nums\n    nums.reverse()\n    half = len(nums)//2\n    return nums[:half] + [0]*5 + nums[half:]",
        "input": "[10, 3, 2, 2, 6, 0]",
        "output": "[6, 2, 0, 0, 0, 0, 0, 2, 3, 10]",
        "line_execution_counts": {
            "1": 7,
            "2": 1,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 74,
        "error": null,
        "id": "sample_76",
        "straightlined_code": "nums = [10, 3, 2, 2, 6, 0]\nnums = [y for y in nums if y > 0]\nif len(nums) <= 3:\n    answer = nums\nnums.reverse()\nhalf = len(nums)//2\nanswer = nums[:half] + [0]*5 + nums[half:]"
    },
    {
        "code": "def f(text):\n    arr = text.split()\n    result = []\n    for item in arr:\n        if item.endswith('day'):\n            item += 'y'\n        else:\n            item += 'day'\n        result.append(item)\n    return ' '.join(result)",
        "input": "\"nwv mef ofme bdryl\"",
        "output": "'nwvday mefday ofmeday bdrylday'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 5,
            "4": 4,
            "7": 4,
            "8": 4,
            "9": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_84",
        "straightlined_code": "text = \"nwv mef ofme bdryl\"\narr = text.split()\nresult = []\nfor item in arr:\n    if item.endswith('day'):\n        item += 'y'\n    else:\n        item += 'day'\n    result.append(item)\nanswer = ' '.join(result)"
    },
    {
        "code": "def f(n):\n    values = {0: 3, 1: 4.5, 2: '-'}\n    res = {}\n    for i, j in values.items():\n        if i % n != 2:\n            res[j] = n // 2\n    return sorted(res)",
        "input": "12",
        "output": "[3, 4.5]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 2,
            "6": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_85",
        "straightlined_code": "n = 12\nvalues = {0: 3, 1: 4.5, 2: '-'}\nres = {}\nfor i, j in values.items():\n    if i % n != 2:\n        res[j] = n // 2\nanswer = sorted(res)"
    },
    {
        "code": "def f(text):\n    result = []\n    for i in range(len(text)):\n        if not text[i].isascii():\n            return False\n        elif text[i].isalnum():\n            result.append(text[i].upper())\n        else:\n            result.append(text[i])\n    return ''.join(result)",
        "input": "\"ua6hajq\"",
        "output": "'UA6HAJQ'",
        "line_execution_counts": {
            "1": 1,
            "2": 8,
            "3": 7,
            "5": 7,
            "6": 7,
            "9": 1
        },
        "ast_size": 78,
        "error": null,
        "id": "sample_107",
        "straightlined_code": "text = \"ua6hajq\"\nresult = []\nfor i in range(len(text)):\n    if not text[i].isascii():\n        answer = False\n    elif text[i].isalnum():\n        result.append(text[i].upper())\n    else:\n        result.append(text[i])\nanswer = ''.join(result)"
    },
    {
        "code": "def f(text):\n    a = ['']\n    b = ''\n    for i in text:\n        if not i.isspace():\n            a.append(b)\n            b = ''\n        else:\n            b += i\n    return len(a)",
        "input": "\"       \"",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 8,
            "4": 7,
            "8": 7,
            "9": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_110",
        "straightlined_code": "text = \"       \"\na = ['']\nb = ''\nfor i in text:\n    if not i.isspace():\n        a.append(b)\n        b = ''\n    else:\n        b += i\nanswer = len(a)"
    },
    {
        "code": "def f(marks):\n    highest = 0\n    lowest = 100\n    for value in marks.values():\n        if value > highest:\n            highest = value\n        if value < lowest:\n            lowest = value\n    return highest, lowest",
        "input": "{'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83}",
        "output": "(89, 4)",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 6,
            "5": 2,
            "6": 6,
            "7": 2,
            "8": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_111",
        "straightlined_code": "marks = {'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83}\nhighest = 0\nlowest = 100\nfor value in marks.values():\n    if value > highest:\n        highest = value\n    if value < lowest:\n        lowest = value\nanswer = highest, lowest"
    },
    {
        "code": "def f(line):\n    count = 0\n    a = []\n    for i in range(len(line)):\n        count += 1\n        if count%2==0:\n            a.append(line[i].swapcase())\n        else:\n            a.append(line[i])\n    return ''.join(a)",
        "input": "\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"",
        "output": "'987YhnShAShD 93275yRgsgBgssHfBsFB'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 34,
            "4": 33,
            "5": 33,
            "8": 17,
            "6": 16,
            "9": 1
        },
        "ast_size": 72,
        "error": null,
        "id": "sample_113",
        "straightlined_code": "line = \"987yhNSHAshd 93275yrgSgbgSshfbsfB\"\ncount = 0\na = []\nfor i in range(len(line)):\n    count += 1\n    if count%2==0:\n        a.append(line[i].swapcase())\n    else:\n        a.append(line[i])\nanswer = ''.join(a)"
    },
    {
        "code": "def f(text):\n    res = []\n    for ch in text.encode('utf-8'):\n        if ch == 61:\n            break\n        if ch == 0:\n            pass\n        res.append(f'{ch}; '.encode('utf-8'))\n    return b''.join(res)",
        "input": "'os||agx5'",
        "output": "b'111; 115; 124; 124; 97; 103; 120; 53; '",
        "line_execution_counts": {
            "1": 1,
            "2": 9,
            "3": 8,
            "5": 8,
            "7": 8,
            "8": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_115",
        "straightlined_code": "text = 'os||agx5'\nres = []\nfor ch in text.encode('utf-8'):\n    if ch == 61:\n        break\n    if ch == 0:\n        pass\n    res.append(f'{ch}; '.encode('utf-8'))\nanswer = b''.join(res)"
    },
    {
        "code": "def f(text):\n    result = \"\"\n    for i in range(len(text)):\n        if i % 2 == 0:\n            result += text[i].swapcase()\n        else:\n            result += text[i]\n    return result",
        "input": "\"vsnlygltaw\"",
        "output": "'VsNlYgLtAw'",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 10,
            "4": 5,
            "6": 5,
            "7": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_119",
        "straightlined_code": "text = \"vsnlygltaw\"\nresult = \"\"\nfor i in range(len(text)):\n    if i % 2 == 0:\n        result += text[i].swapcase()\n    else:\n        result += text[i]\nanswer = result"
    },
    {
        "code": "def f(s):\n    nums = ''.join(filter(lambda c:c.isdecimal(), s))\n    if nums == '': return 'none'\n    m = max([int(num) for num in nums.split(',')])\n    return str(m)",
        "input": "'01,001'",
        "output": "'1001'",
        "line_execution_counts": {
            "1": 7,
            "2": 1,
            "3": 2,
            "4": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_121",
        "straightlined_code": "s = '01,001'\nnums = ''.join(filter(lambda c:c.isdecimal(), s))\nif nums == '': answer = 'none'\nm = max([int(num) for num in nums.split(',')])\nanswer = str(m)"
    },
    {
        "code": "def f(array, elem):\n    for idx, e in enumerate(array):\n        if e > elem and array[idx - 1] < elem:\n            array.insert(idx, elem)\n    return array",
        "input": "[1, 2, 3, 5, 8], 6",
        "output": "[1, 2, 3, 5, 6, 8]",
        "line_execution_counts": {
            "1": 7,
            "2": 6,
            "3": 1,
            "4": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_123",
        "straightlined_code": "array, elem = [1, 2, 3, 5, 8], 6\nfor idx, e in enumerate(array):\n    if e > elem and array[idx - 1] < elem:\n        array.insert(idx, elem)\nanswer = array"
    },
    {
        "code": "def f(text, res):\n    for c in '*\\n\"':\n        text = text.replace(c, '!' + str(res))\n    if text.startswith('!'):\n        text = text[len(str(res)):]\n    return text",
        "input": "'\"Leap and the net will appear', 123",
        "output": "'3Leap and the net will appear'",
        "line_execution_counts": {
            "1": 4,
            "2": 3,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_125",
        "straightlined_code": "text, res = '\"Leap and the net will appear', 123\nfor c in '*\\n\"':\n    text = text.replace(c, '!' + str(res))\nif text.startswith('!'):\n    text = text[len(str(res)):]\nanswer = text"
    },
    {
        "code": "def f(text):\n    odd = ''\n    even = ''\n    for i, c in enumerate(text):\n        if i % 2 == 0:\n            even += c\n        else:\n            odd += c\n    return even + odd.lower()",
        "input": "'Mammoth'",
        "output": "'Mmohamt'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 8,
            "4": 7,
            "5": 4,
            "7": 3,
            "8": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_128",
        "straightlined_code": "text = 'Mammoth'\nodd = ''\neven = ''\nfor i, c in enumerate(text):\n    if i % 2 == 0:\n        even += c\n    else:\n        odd += c\nanswer = even + odd.lower()"
    },
    {
        "code": "def f(m):\n    items = list(m.items())\n    for i in range(len(items)-2, -1, -1):\n        tmp = items[i]\n        items[i] = items[i+1] \n        items[i+1] = tmp\n    return ['{}={}', '{1}={0}'][len(items) % 2].format(\n        *m.keys(), **m\n    )",
        "input": "{'l':4, 'h':6, 'o':9}",
        "output": "'h=l'",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 2,
            "5": 2,
            "6": 3,
            "7": 2
        },
        "ast_size": 100,
        "error": null,
        "id": "sample_130",
        "straightlined_code": "m = {'l':4, 'h':6, 'o':9}\nitems = list(m.items())\nfor i in range(len(items)-2, -1, -1):\n    tmp = items[i]\n    items[i] = items[i+1] \n    items[i+1] = tmp\nanswer = ['{}={}', '{1}={0}'][len(items) % 2].format(\n    *m.keys(), **m\n)"
    },
    {
        "code": "def f(text):\n    a = len(text)\n    count = 0\n    while text:\n        if text.startswith('a'):\n            count += text.find(' ')\n        else:\n            count += text.find('\\n')\n        text = text[text.find('\\n')+1:text.find('\\n')+a+1]\n    return count",
        "input": "\"a\\nkgf\\nasd\\n\"",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 2,
            "8": 3,
            "7": 1,
            "9": 1
        },
        "ast_size": 79,
        "error": null,
        "id": "sample_131",
        "straightlined_code": "text = \"a\\nkgf\\nasd\\n\"\na = len(text)\ncount = 0\nwhile text:\n    if text.startswith('a'):\n        count += text.find(' ')\n    else:\n        count += text.find('\\n')\n    text = text[text.find('\\n')+1:text.find('\\n')+a+1]\nanswer = count"
    },
    {
        "code": "def f(nums):\n    count = 0\n    for i in range(len(nums)):\n        if len(nums) == 0:\n            break\n        if count % 2 == 0:\n            nums.pop()\n        else:\n            nums.pop(0)\n        count += 1\n    return nums",
        "input": "[3, 2, 0, 0, 2, 3]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "5": 6,
            "6": 3,
            "9": 6,
            "8": 3,
            "10": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_137",
        "straightlined_code": "nums = [3, 2, 0, 0, 2, 3]\ncount = 0\nfor i in range(len(nums)):\n    if len(nums) == 0:\n        break\n    if count % 2 == 0:\n        nums.pop()\n    else:\n        nums.pop(0)\n    count += 1\nanswer = nums"
    },
    {
        "code": "def f(forest, animal):\n    index = forest.index(animal)\n    result = list(forest)\n    while index < len(forest)-1:\n        result[index] = forest[index+1]\n        index += 1\n    if index == len(forest)-1:\n        result[index] = '-'\n    return ''.join(result)",
        "input": "'2imo 12 tfiqr.', 'm'",
        "output": "'2io 12 tfiqr.-'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 12,
            "4": 11,
            "5": 11,
            "6": 1,
            "7": 1,
            "8": 1
        },
        "ast_size": 85,
        "error": null,
        "id": "sample_148",
        "straightlined_code": "forest, animal = '2imo 12 tfiqr.', 'm'\nindex = forest.index(animal)\nresult = list(forest)\nwhile index < len(forest)-1:\n    result[index] = forest[index+1]\n    index += 1\nif index == len(forest)-1:\n    result[index] = '-'\nanswer = ''.join(result)"
    },
    {
        "code": "def f(tuple_list, joint):\n    string = ''\n    for num in tuple_list:\n        string += dict.fromkeys(str(num), joint * len(str(num))).popitem()[0] + joint\n    return string",
        "input": "(32332, 23543, 132323, 33300), ','",
        "output": "'2,4,2,0,'",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_149",
        "straightlined_code": "tuple_list, joint = (32332, 23543, 132323, 33300), ','\nstring = ''\nfor num in tuple_list:\n    string += dict.fromkeys(str(num), joint * len(str(num))).popitem()[0] + joint\nanswer = string"
    },
    {
        "code": "def f(text):\n    for c in text:\n        if c.isdigit():\n            if c == '0':\n                c = '.'\n            else:\n                c = '0' if c != '1' else '.'\n    return ''.join(list(text)).replace('.', '0')",
        "input": "'697 this is the ultimate 7 address to attack'",
        "output": "'697 this is the ultimate 7 address to attack'",
        "line_execution_counts": {
            "1": 45,
            "2": 44,
            "3": 4,
            "6": 4,
            "7": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_151",
        "straightlined_code": "text = '697 this is the ultimate 7 address to attack'\nfor c in text:\n    if c.isdigit():\n        if c == '0':\n            c = '.'\n        else:\n            c = '0' if c != '1' else '.'\nanswer = ''.join(list(text)).replace('.', '0')"
    },
    {
        "code": "def f(arr):\n    n = [item for item in arr if item%2 == 0]\n    m = n+arr\n    for i in m:\n        if m.index(i) >= len(n):\n            m.remove(i)\n    return m",
        "input": "[3, 6, 4, -2, 5]",
        "output": "[6, 4, -2, 6, 4, -2]",
        "line_execution_counts": {
            "1": 6,
            "2": 1,
            "3": 8,
            "4": 7,
            "5": 2,
            "6": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_158",
        "straightlined_code": "arr = [3, 6, 4, -2, 5]\nn = [item for item in arr if item%2 == 0]\nm = n+arr\nfor i in m:\n    if m.index(i) >= len(n):\n        m.remove(i)\nanswer = m"
    },
    {
        "code": "def f(XAAXX, s):\n    count = 0\n    idx = -1\n    while XAAXX.find('XXXX', idx+1) != -1:\n        idx = XAAXX.find('XXXX', idx+1) \n        count += 1 \n    compound = count * s.title()\n    return XAAXX.replace('XXXX', compound)",
        "input": "'aaXXXXbbXXXXccXXXXde', 'QW'",
        "output": "'aaQwQwQwbbQwQwQwccQwQwQwde'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 3,
            "6": 1,
            "7": 1
        },
        "ast_size": 72,
        "error": null,
        "id": "sample_167",
        "straightlined_code": "XAAXX, s = 'aaXXXXbbXXXXccXXXXde', 'QW'\ncount = 0\nidx = -1\nwhile XAAXX.find('XXXX', idx+1) != -1:\n    idx = XAAXX.find('XXXX', idx+1) \n    count += 1 \ncompound = count * s.title()\nanswer = XAAXX.replace('XXXX', compound)"
    },
    {
        "code": "def f(text):\n    ls = list(text)\n    total = (len(text) - 1) * 2\n    for i in range(1, total+1):\n        if i % 2:\n            ls.append('+')\n        else:\n            ls.insert(0, '+')\n    return ''.join(ls).rjust(total)",
        "input": "'taole'",
        "output": "'++++taole++++'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 9,
            "4": 8,
            "5": 4,
            "7": 4,
            "8": 1
        },
        "ast_size": 71,
        "error": null,
        "id": "sample_169",
        "straightlined_code": "text = 'taole'\nls = list(text)\ntotal = (len(text) - 1) * 2\nfor i in range(1, total+1):\n    if i % 2:\n        ls.append('+')\n    else:\n        ls.insert(0, '+')\nanswer = ''.join(ls).rjust(total)"
    },
    {
        "code": "def f(s, amount):\n    lines = s.splitlines()\n    w = max(map(lambda l: l.rfind(' '), lines))\n    ls = [[l, (w + 1) * amount - l.rfind(' ')] for l in lines]\n    for i, line in enumerate(ls):\n        ls[i][0] = line[0] + ' ' * line[1]\n    return '\\n'.join(map(lambda l: l[0], ls))",
        "input": "'\\n', 2",
        "output": "' '",
        "line_execution_counts": {
            "1": 1,
            "2": 2,
            "3": 2,
            "4": 2,
            "5": 1,
            "6": 2
        },
        "ast_size": 118,
        "error": null,
        "id": "sample_175",
        "straightlined_code": "s, amount = '\\n', 2\nlines = s.splitlines()\nw = max(map(lambda l: l.rfind(' '), lines))\nls = [[l, (w + 1) * amount - l.rfind(' ')] for l in lines]\nfor i, line in enumerate(ls):\n    ls[i][0] = line[0] + ' ' * line[1]\nanswer = '\\n'.join(map(lambda l: l[0], ls))"
    },
    {
        "code": "def f(text):\n    text = list(text)\n    for i in range(len(text)):\n        if i % 2 == 1:\n            text[i] = text[i].swapcase()\n    return ''.join(text)",
        "input": "'Hey DUdE THis $nd^ &*&this@#'",
        "output": "'HEy Dude tHIs $Nd^ &*&tHiS@#'",
        "line_execution_counts": {
            "1": 1,
            "2": 29,
            "3": 28,
            "4": 14,
            "5": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_177",
        "straightlined_code": "text = 'Hey DUdE THis $nd^ &*&this@#'\ntext = list(text)\nfor i in range(len(text)):\n    if i % 2 == 1:\n        text[i] = text[i].swapcase()\nanswer = ''.join(text)"
    },
    {
        "code": "def f(nums):\n    # Pass in a copy to avoid modifying nums\n    nums = nums[:]\n    count = len(nums)\n    for i in range(-count+1, 0):\n        nums.insert(0, nums[i])\n    return nums",
        "input": "[7, 1, 2, 6, 0, 2]",
        "output": "[2, 0, 6, 2, 1, 7, 1, 2, 6, 0, 2]",
        "line_execution_counts": {
            "2": 1,
            "3": 1,
            "4": 6,
            "5": 5,
            "6": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_179",
        "straightlined_code": "nums = [7, 1, 2, 6, 0, 2]\n# Pass in a copy to avoid modifying nums\nnums = nums[:]\ncount = len(nums)\nfor i in range(-count+1, 0):\n    nums.insert(0, nums[i])\nanswer = nums"
    },
    {
        "code": "def f(nums):\n    a = -1\n    b = nums[1:]\n    while a <= b[0]:\n        nums.remove(b[0])\n        a = 0\n        b = b[1:]\n    return nums",
        "input": "[-1, 5, 3, -2, -6, 8, 8]",
        "output": "[-1, -2, -6, 8, 8]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "6": 2,
            "7": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_180",
        "straightlined_code": "nums = [-1, 5, 3, -2, -6, 8, 8]\na = -1\nb = nums[1:]\nwhile a <= b[0]:\n    nums.remove(b[0])\n    a = 0\n    b = b[1:]\nanswer = nums"
    },
    {
        "code": "def f(text):\n    ls = text.split()\n    lines = \" \".join(ls[::3]).splitlines()\n    res = []\n    for i in range(2):\n        ln = ls[1::3]\n        if 3 * i + 1 < len(ln):\n            res.append(\" \".join(ln[3 * i:3 * (i + 1)]))\n    return lines + res",
        "input": "\"echo hello!!! nice!\"",
        "output": "['echo']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 3,
            "5": 2,
            "6": 2,
            "8": 1
        },
        "ast_size": 101,
        "error": null,
        "id": "sample_183",
        "straightlined_code": "text = \"echo hello!!! nice!\"\nls = text.split()\nlines = \" \".join(ls[::3]).splitlines()\nres = []\nfor i in range(2):\n    ln = ls[1::3]\n    if 3 * i + 1 < len(ln):\n        res.append(\" \".join(ln[3 * i:3 * (i + 1)]))\nanswer = lines + res"
    },
    {
        "code": "def f(L):\n    N = len(L)\n    for k in range(1, N//2 + 1):\n        i = k - 1\n        j = N - k\n        while i < j:\n            # swap elements:\n            L[i], L[j] = L[j], L[i]\n            # update i, j:\n            i += 1\n            j -= 1\n    return L",
        "input": "[16, 14, 12, 7, 9, 11]",
        "output": "[11, 14, 7, 12, 9, 16]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "5": 9,
            "7": 6,
            "9": 6,
            "10": 6,
            "11": 1
        },
        "ast_size": 93,
        "error": null,
        "id": "sample_185",
        "straightlined_code": "L = [16, 14, 12, 7, 9, 11]\nN = len(L)\nfor k in range(1, N//2 + 1):\n    i = k - 1\n    j = N - k\n    while i < j:\n        # swap elements:\n        L[i], L[j] = L[j], L[i]\n        # update i, j:\n        i += 1\n        j -= 1\nanswer = L"
    },
    {
        "code": "def f(a):\n    for _ in range(10):\n        for j in range(len(a)):\n            if a[j] != '#':\n                a = a[j:]\n                break\n        else:\n            a = \"\"\n            break\n    while a[-1] == '#':\n        a = a[:-1]\n    return a",
        "input": "\"##fiu##nk#he###wumun##\"",
        "output": "'fiu##nk#he###wumun'",
        "line_execution_counts": {
            "1": 11,
            "2": 12,
            "3": 12,
            "4": 10,
            "5": 10,
            "9": 3,
            "10": 2,
            "11": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "sample_205",
        "straightlined_code": "a = \"##fiu##nk#he###wumun##\"\nfor _ in range(10):\n    for j in range(len(a)):\n        if a[j] != '#':\n            a = a[j:]\n            break\n    else:\n        a = \"\"\n        break\nwhile a[-1] == '#':\n    a = a[:-1]\nanswer = a"
    },
    {
        "code": "def f(text, m, n):\n    text = \"{}{}{}\".format(text, text[:m], text[n:])\n    result = \"\"\n    for i in range(n, len(text)-m):\n        result = text[i] + result\n    return result",
        "input": "\"abcdefgabc\", 1, 2",
        "output": "'bagfedcacbagfedc'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 17,
            "4": 16,
            "5": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_220",
        "straightlined_code": "text, m, n = \"abcdefgabc\", 1, 2\ntext = \"{}{}{}\".format(text, text[:m], text[n:])\nresult = \"\"\nfor i in range(n, len(text)-m):\n    result = text[i] + result\nanswer = result"
    },
    {
        "code": "def f(array, target):\n    count, i = 0, 1\n    for j in range(1, len(array)):\n        if ((array[j] > array[j-1]) and (array[j] <= target)): count += i\n        elif array[j] <= array[j-1]: i = 1\n        else: i += 1\n    return count",
        "input": "[1, 2, -1, 4], 2",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 2,
            "5": 1,
            "6": 1
        },
        "ast_size": 94,
        "error": null,
        "id": "sample_223",
        "straightlined_code": "array, target = [1, 2, -1, 4], 2\ncount, i = 0, 1\nfor j in range(1, len(array)):\n    if ((array[j] > array[j-1]) and (array[j] <= target)): count += i\n    elif array[j] <= array[j-1]: i = 1\n    else: i += 1\nanswer = count"
    },
    {
        "code": "def f(dic, value):\n    result = []\n    for e in dic:\n        result.append(e[0])\n        if e[1] == value:\n            result.reverse()\n        else:\n            result.append(e[1])\n    return result",
        "input": "{'9m':2, 'mA':1, '10K':2, 'Lk':2}, 1",
        "output": "['9', 'm', 'm', 'A', '1', '0', 'L', 'k']",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 4,
            "7": 4,
            "8": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_229",
        "straightlined_code": "dic, value = {'9m':2, 'mA':1, '10K':2, 'Lk':2}, 1\nresult = []\nfor e in dic:\n    result.append(e[0])\n    if e[1] == value:\n        result.reverse()\n    else:\n        result.append(e[1])\nanswer = result"
    },
    {
        "code": "def f(text):\n    result = ''\n    i = len(text)-1\n    while i >= 0:\n        c = text[i]\n        if c.isalpha():\n            result += c\n        i -= 1\n    return result",
        "input": "'102x0zoq'",
        "output": "'qozx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 9,
            "4": 8,
            "5": 8,
            "6": 4,
            "7": 8,
            "8": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_230",
        "straightlined_code": "text = '102x0zoq'\nresult = ''\ni = len(text)-1\nwhile i >= 0:\n    c = text[i]\n    if c.isalpha():\n        result += c\n    i -= 1\nanswer = result"
    },
    {
        "code": "def f(years):\n    a10 = sum(1 for x in years if x <= 1900)\n    a90 = sum(1 for x in years if x > 1910)\n    if a10 > 3:\n        return 3\n    elif a90 > 3:\n        return 1\n    else:\n        return 2",
        "input": "[1872, 1995, 1945]",
        "output": "2",
        "line_execution_counts": {
            "1": 5,
            "2": 5,
            "3": 1,
            "5": 1,
            "8": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_231",
        "straightlined_code": "years = [1872, 1995, 1945]\na10 = sum(1 for x in years if x <= 1900)\na90 = sum(1 for x in years if x > 1910)\nif a10 > 3:\n    answer = 3\nelif a90 > 3:\n    answer = 1\nelse:\n    answer = 2"
    },
    {
        "code": "def f(text, changes):\n    result = ''\n    count = 0\n    changes = list(changes)\n    for char in text:\n        result += char if char in 'e' else changes[count % len(changes)]\n        count += (1 if char not in 'e' else 0)\n    return result",
        "input": "'fssnvd', 'yes'",
        "output": "'yesyes'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 7,
            "5": 6,
            "6": 6,
            "7": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_232",
        "straightlined_code": "text, changes = 'fssnvd', 'yes'\nresult = ''\ncount = 0\nchanges = list(changes)\nfor char in text:\n    result += char if char in 'e' else changes[count % len(changes)]\n    count += (1 if char not in 'e' else 0)\nanswer = result"
    },
    {
        "code": "def f(array):\n    if len(array) == 1:\n        return ''.join(array)\n    result = list(array)\n    i = 0\n    while i < len(array)-1:\n        for j in range(2):\n            result[i*2] = array[i]\n            i += 1\n    return ''.join(result)",
        "input": "['ac8', 'qk6', '9wg']",
        "output": "'ac8qk6qk6'",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1,
            "5": 2,
            "6": 3,
            "7": 2,
            "8": 2,
            "9": 1
        },
        "ast_size": 80,
        "error": null,
        "id": "sample_236",
        "straightlined_code": "array = ['ac8', 'qk6', '9wg']\nif len(array) == 1:\n    answer = ''.join(array)\nresult = list(array)\ni = 0\nwhile i < len(array)-1:\n    for j in range(2):\n        result[i*2] = array[i]\n        i += 1\nanswer = ''.join(result)"
    },
    {
        "code": "def f(text, symbols):\n    count = 0\n    if symbols:\n        for i in symbols:\n            count += 1\n        text = text * count\n    return text.rjust(len(text) + count*2)[:-2]",
        "input": "'', 'BC1ty'",
        "output": "'        '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 6,
            "4": 5,
            "5": 1,
            "6": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_244",
        "straightlined_code": "text, symbols = '', 'BC1ty'\ncount = 0\nif symbols:\n    for i in symbols:\n        count += 1\n    text = text * count\nanswer = text.rjust(len(text) + count*2)[:-2]"
    },
    {
        "code": "def f(s):\n    count = {}\n    for i in s:\n        if i.islower():\n            count[i.lower()] = s.count(i.lower()) + count.get(i.lower(), 0)\n        else:\n            count[i.lower()] = s.count(i.upper()) + count.get(i.lower(), 0)\n    return count",
        "input": "\"FSA\"",
        "output": "{'f': 1, 's': 1, 'a': 1}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "6": 3,
            "7": 1
        },
        "ast_size": 88,
        "error": null,
        "id": "sample_249",
        "straightlined_code": "s = \"FSA\"\ncount = {}\nfor i in s:\n    if i.islower():\n        count[i.lower()] = s.count(i.lower()) + count.get(i.lower(), 0)\n    else:\n        count[i.lower()] = s.count(i.upper()) + count.get(i.lower(), 0)\nanswer = count"
    },
    {
        "code": "def f(text, sub):\n    a = 0\n    b = len(text) - 1\n\n    while a <= b:\n        c = (a + b) // 2\n        if text.rfind(sub) >= c:\n            a = c + 1\n        else:\n            b = c - 1\n\n    return a",
        "input": "'dorfunctions', '2'",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "4": 4,
            "5": 3,
            "6": 3,
            "9": 3,
            "11": 1
        },
        "ast_size": 70,
        "error": null,
        "id": "sample_256",
        "straightlined_code": "text, sub = 'dorfunctions', '2'\na = 0\nb = len(text) - 1\n\nwhile a <= b:\n    c = (a + b) // 2\n    if text.rfind(sub) >= c:\n        a = c + 1\n    else:\n        b = c - 1\n\nanswer = a"
    },
    {
        "code": "def f(text):\n    new_text = []\n    for character in text:\n        if character.isupper():\n            new_text.insert(len(new_text) // 2, character)\n    if len(new_text) == 0:\n        new_text = ['-']\n    return ''.join(new_text)",
        "input": "'String matching is a big part of RexEx library.'",
        "output": "'RES'",
        "line_execution_counts": {
            "1": 1,
            "2": 48,
            "3": 47,
            "4": 3,
            "5": 1,
            "7": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_259",
        "straightlined_code": "text = 'String matching is a big part of RexEx library.'\nnew_text = []\nfor character in text:\n    if character.isupper():\n        new_text.insert(len(new_text) // 2, character)\nif len(new_text) == 0:\n    new_text = ['-']\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(nums, target):\n    lows, higgs = [], []\n    for i in nums:\n        if i < target:\n            lows.append(i)\n        else:\n            higgs.append(i)\n    lows.clear()\n    return lows, higgs",
        "input": "[12, 516, 5, 2, 3, 214, 51], 5",
        "output": "([], [12, 516, 5, 214, 51])",
        "line_execution_counts": {
            "1": 1,
            "2": 8,
            "3": 7,
            "6": 5,
            "4": 2,
            "7": 1,
            "8": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_261",
        "straightlined_code": "nums, target = [12, 516, 5, 2, 3, 214, 51], 5\nlows, higgs = [], []\nfor i in nums:\n    if i < target:\n        lows.append(i)\n    else:\n        higgs.append(i)\nlows.clear()\nanswer = lows, higgs"
    },
    {
        "code": "def f(nums):\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] % 2 == 1:\n            nums.insert(i+1, nums[i])\n    return nums",
        "input": "[2, 3, 4, 6, -2]",
        "output": "[2, 3, 3, 4, 6, -2]",
        "line_execution_counts": {
            "1": 6,
            "2": 5,
            "3": 1,
            "4": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_266",
        "straightlined_code": "nums = [2, 3, 4, 6, -2]\nfor i in range(len(nums)-1, -1, -1):\n    if nums[i] % 2 == 1:\n        nums.insert(i+1, nums[i])\nanswer = nums"
    },
    {
        "code": "def f(base_list, nums):\n    base_list.extend(nums)\n    res = base_list.copy()\n    for i in range(-len(nums), 0):\n        res.append(res[i])\n    return res",
        "input": "[9, 7, 5, 3, 1], [2, 4, 6, 8, 0]",
        "output": "[9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 6,
            "4": 5,
            "5": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_272",
        "straightlined_code": "base_list, nums = [9, 7, 5, 3, 1], [2, 4, 6, 8, 0]\nbase_list.extend(nums)\nres = base_list.copy()\nfor i in range(-len(nums), 0):\n    res.append(res[i])\nanswer = res"
    },
    {
        "code": "def f(name):\n    new_name =''\n    name = name[::-1]\n    for i in range(len(name)):\n        n = name[i]\n        if n !='.' and  new_name.count('.')<2:\n            new_name=n+new_name\n        else:\n            break\n    return new_name",
        "input": "'.NET'",
        "output": "'NET'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 4,
            "5": 4,
            "6": 3,
            "8": 1,
            "9": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_273",
        "straightlined_code": "name = '.NET'\nnew_name =''\nname = name[::-1]\nfor i in range(len(name)):\n    n = name[i]\n    if n !='.' and  new_name.count('.')<2:\n        new_name=n+new_name\n    else:\n        break\nanswer = new_name"
    },
    {
        "code": "def f(d):\n    sorted_pairs = sorted(list(d.items()), key=lambda x: len(str(str(x[0])+str(x[1]))))\n    return [(k, v) for k, v in sorted_pairs if k < v]\n    return ret",
        "input": "{55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6}",
        "output": "[(1, 3), (4, 555)]",
        "line_execution_counts": {
            "1": 8,
            "2": 8
        },
        "ast_size": 72,
        "error": null,
        "id": "sample_288",
        "straightlined_code": "d = {55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6}\nsorted_pairs = sorted(list(d.items()), key=lambda x: len(str(str(x[0])+str(x[1]))))\nanswer = [(k, v) for k, v in sorted_pairs if k < v]\nanswer = ret"
    },
    {
        "code": "def f(text):\n    new_text = list(text)\n    for i in range(len(new_text)):\n        character = new_text[i]\n        new_character = character.swapcase()\n        new_text[i] = new_character\n    return ''.join(new_text)",
        "input": "'dst vavf n dmv dfvm gamcu dgcvb.'",
        "output": "'DST VAVF N DMV DFVM GAMCU DGCVB.'",
        "line_execution_counts": {
            "1": 1,
            "2": 33,
            "3": 32,
            "4": 32,
            "5": 32,
            "6": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_298",
        "straightlined_code": "text = 'dst vavf n dmv dfvm gamcu dgcvb.'\nnew_text = list(text)\nfor i in range(len(new_text)):\n    character = new_text[i]\n    new_character = character.swapcase()\n    new_text[i] = new_character\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(text):\n    i = (len(text) + 1) // 2\n    result = list(text)\n    while i < len(text):\n        t = result[i].lower()\n        if t == result[i]:\n            i += 1\n        else:\n            result[i] = t\n        i += 2\n    return ''.join(result)",
        "input": "'mJkLbn'",
        "output": "'mJklbn'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "8": 1,
            "9": 2,
            "6": 1,
            "10": 1
        },
        "ast_size": 85,
        "error": null,
        "id": "sample_303",
        "straightlined_code": "text = 'mJkLbn'\ni = (len(text) + 1) // 2\nresult = list(text)\nwhile i < len(text):\n    t = result[i].lower()\n    if t == result[i]:\n        i += 1\n    else:\n        result[i] = t\n    i += 2\nanswer = ''.join(result)"
    },
    {
        "code": "def f(d):\n    key1 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n    val1 = d.pop(key1)\n    key2 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n    val2 = d.pop(key2)\n    return dict({key1: val1, key2: val2})",
        "input": "{2: 3, 17: 3, 16: 6, 18: 6, 87: 7}",
        "output": "{87: 7, 18: 6}",
        "line_execution_counts": {
            "1": 6,
            "2": 1,
            "3": 5,
            "4": 1,
            "5": 1
        },
        "ast_size": 93,
        "error": null,
        "id": "sample_304",
        "straightlined_code": "d = {2: 3, 17: 3, 16: 6, 18: 6, 87: 7}\nkey1 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\nval1 = d.pop(key1)\nkey2 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\nval2 = d.pop(key2)\nanswer = dict({key1: val1, key2: val2})"
    },
    {
        "code": "def f(text, char):\n    length = len(text)\n    index = -1\n    for i in range(length):\n        if text[i] == char:\n            index = i\n    if index == -1:\n        index = length // 2\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)",
        "input": "'o horseto', 'r'",
        "output": "'o hoseto'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 10,
            "4": 9,
            "5": 1,
            "6": 1,
            "8": 1,
            "9": 1,
            "10": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "sample_305",
        "straightlined_code": "text, char = 'o horseto', 'r'\nlength = len(text)\nindex = -1\nfor i in range(length):\n    if text[i] == char:\n        index = i\nif index == -1:\n    index = length // 2\nnew_text = list(text)\nnew_text.pop(index)\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(nums):\n    digits = []\n    for num in nums:\n        if (isinstance(num, str) and num.isnumeric()) or isinstance(num, int):\n            digits.append(num)\n    digits = list(map(int, digits))\n    return digits",
        "input": "[0, 6, '1', '2', 0]",
        "output": "[0, 6, 1, 2, 0]",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 5,
            "5": 1,
            "6": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_306",
        "straightlined_code": "nums = [0, 6, '1', '2', 0]\ndigits = []\nfor num in nums:\n    if (isinstance(num, str) and num.isnumeric()) or isinstance(num, int):\n        digits.append(num)\ndigits = list(map(int, digits))\nanswer = digits"
    },
    {
        "code": "def f(strands):\n    subs = strands\n    for i, j in enumerate(subs):\n        for _ in range(len(j) // 2):\n            subs[i] = subs[i][-1:] + subs[i][1:-1] + subs[i][0]\n    return ''.join(subs)",
        "input": "['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']",
        "output": "'__1.00r__j_a6__6'",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 15,
            "4": 5,
            "5": 1
        },
        "ast_size": 87,
        "error": null,
        "id": "sample_310",
        "straightlined_code": "strands = ['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']\nsubs = strands\nfor i, j in enumerate(subs):\n    for _ in range(len(j) // 2):\n        subs[i] = subs[i][-1:] + subs[i][1:-1] + subs[i][0]\nanswer = ''.join(subs)"
    },
    {
        "code": "def f(text):\n    index = 1\n    while index < len(text):\n        if text[index] != text[index - 1]:\n            index += 1\n        else:\n            text1 = text[:index]\n            text2 = text[index:].swapcase()\n            return text1 + text2\n    return text.swapcase()",
        "input": "'USaR'",
        "output": "'usAr'",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "9": 1
        },
        "ast_size": 77,
        "error": null,
        "id": "sample_320",
        "straightlined_code": "text = 'USaR'\nindex = 1\nwhile index < len(text):\n    if text[index] != text[index - 1]:\n        index += 1\n    else:\n        text1 = text[:index]\n        text2 = text[index:].swapcase()\n        answer = text1 + text2\nanswer = text.swapcase()"
    },
    {
        "code": "def f(lst):\n    new = list()\n    i = len(lst)-1\n    for _ in range(len(lst)):\n        if i%2 == 0:\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= 1\n    return new",
        "input": "[1, 7, -1, -3]",
        "output": "[-3, 1, 7, -1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 5,
            "4": 4,
            "7": 2,
            "8": 4,
            "5": 2,
            "9": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_327",
        "straightlined_code": "lst = [1, 7, -1, -3]\nnew = list()\ni = len(lst)-1\nfor _ in range(len(lst)):\n    if i%2 == 0:\n        new.append(-lst[i])\n    else:\n        new.append(lst[i])\n    i -= 1\nanswer = new"
    },
    {
        "code": "def f(txt):\n    d = []\n    for c in txt:\n        if c.isdigit():\n            continue\n        if c.islower():\n            d.append(c.upper())\n        elif c.isupper():\n            d.append(c.lower())\n    return ''.join(d)",
        "input": "\"5ll6\"",
        "output": "'LL'",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 2,
            "5": 2,
            "6": 2,
            "9": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_337",
        "straightlined_code": "txt = \"5ll6\"\nd = []\nfor c in txt:\n    if c.isdigit():\n        continue\n    if c.islower():\n        d.append(c.upper())\n    elif c.isupper():\n        d.append(c.lower())\nanswer = ''.join(d)"
    },
    {
        "code": "def f(text):\n    ls = list(text)\n    length = len(ls)\n    for i in range(length):\n        ls.insert(i, ls[i])\n    return ''.join(ls).ljust(length * 2)",
        "input": "'hzcw'",
        "output": "'hhhhhzcw'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 5,
            "4": 4,
            "5": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_347",
        "straightlined_code": "text = 'hzcw'\nls = list(text)\nlength = len(ls)\nfor i in range(length):\n    ls.insert(i, ls[i])\nanswer = ''.join(ls).ljust(length * 2)"
    },
    {
        "code": "def f(d):\n    size = len(d)\n    v = [0] * size\n    if size == 0:\n        return v\n    for i, e in enumerate(d.values()):\n        v[i] = e\n    return v",
        "input": "{'a': 1, 'b': 2, 'c': 3}",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "5": 4,
            "6": 3,
            "7": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_350",
        "straightlined_code": "d = {'a': 1, 'b': 2, 'c': 3}\nsize = len(d)\nv = [0] * size\nif size == 0:\n    answer = v\nfor i, e in enumerate(d.values()):\n    v[i] = e\nanswer = v"
    },
    {
        "code": "def f(x):\n    if x == []:\n        return -1\n    else:\n        cache = {}\n        for item in x:\n            if item in cache:\n                cache[item] += 1\n            else:\n                cache[item] = 1\n        return max(cache.values())",
        "input": "[1, 0, 2, 2, 0, 0, 0, 1]",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "4": 1,
            "5": 9,
            "6": 8,
            "9": 3,
            "7": 5,
            "10": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_353",
        "straightlined_code": "x = [1, 0, 2, 2, 0, 0, 0, 1]\nif x == []:\n    answer = -1\nelse:\n    cache = {}\n    for item in x:\n        if item in cache:\n            cache[item] += 1\n        else:\n            cache[item] = 1\n    answer = max(cache.values())"
    },
    {
        "code": "def f(text, value):\n    indexes = []\n    for i in range(len(text)):\n        if text[i] == value and (i == 0 or text[i-1] != value):\n            indexes.append(i) \n    if len(indexes) % 2 == 1:\n        return text\n    return text[indexes[0]+1:indexes[-1]]",
        "input": "'btrburger', 'b'",
        "output": "'tr'",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 2,
            "5": 1,
            "7": 1
        },
        "ast_size": 98,
        "error": null,
        "id": "sample_358",
        "straightlined_code": "text, value = 'btrburger', 'b'\nindexes = []\nfor i in range(len(text)):\n    if text[i] == value and (i == 0 or text[i-1] != value):\n        indexes.append(i) \nif len(indexes) % 2 == 1:\n    answer = text\nanswer = text[indexes[0]+1:indexes[-1]]"
    },
    {
        "code": "def f(text, chars):\n    chars = list(chars)\n    text = list(text)\n    new_text = text\n    while len(new_text) > 0 and text:\n        if new_text[0] in chars:\n            new_text = new_text[1:]\n        else:\n            break \n    return ''.join(new_text)",
        "input": "'asfdellos', 'Ta'",
        "output": "'sfdellos'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 2,
            "5": 2,
            "6": 1,
            "8": 1,
            "9": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_384",
        "straightlined_code": "text, chars = 'asfdellos', 'Ta'\nchars = list(chars)\ntext = list(text)\nnew_text = text\nwhile len(new_text) > 0 and text:\n    if new_text[0] in chars:\n        new_text = new_text[1:]\n    else:\n        break \nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(lst):\n    i = 0\n    new_list = []\n    while i < len(lst):\n        if lst[i] in lst[i+1:]:\n            new_list.append(lst[i])\n            if len(new_list) == 3:\n                return new_list\n        i += 1\n    return new_list",
        "input": "[0, 2, 1, 2, 6, 2, 6, 3, 0]",
        "output": "[0, 2, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 4,
            "5": 3,
            "6": 3,
            "8": 3,
            "7": 1
        },
        "ast_size": 74,
        "error": null,
        "id": "sample_385",
        "straightlined_code": "lst = [0, 2, 1, 2, 6, 2, 6, 3, 0]\ni = 0\nnew_list = []\nwhile i < len(lst):\n    if lst[i] in lst[i+1:]:\n        new_list.append(lst[i])\n        if len(new_list) == 3:\n            answer = new_list\n    i += 1\nanswer = new_list"
    },
    {
        "code": "def f(students):\n    seatlist = students\n    seatlist.reverse()\n    cnt = 0\n    for cnt in range(len(seatlist)):\n        cnt += 2\n        seatlist[cnt - 1:cnt] = ['+']\n    seatlist.append('+')\n    return seatlist",
        "input": "['r', '9']",
        "output": "['9', '+', '+', '+']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 3,
            "5": 2,
            "6": 2,
            "7": 1,
            "8": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "sample_391",
        "straightlined_code": "students = ['r', '9']\nseatlist = students\nseatlist.reverse()\ncnt = 0\nfor cnt in range(len(seatlist)):\n    cnt += 2\n    seatlist[cnt - 1:cnt] = ['+']\nseatlist.append('+')\nanswer = seatlist"
    },
    {
        "code": "def f(counts):\n    dict = {}\n    for k, v in counts.items():\n        count = counts[k]\n        if count not in dict:\n            dict[count] = []\n        dict[count].append(k)\n    counts.update(dict)\n    return counts",
        "input": "{'2': 2, '0': 1, '1': 2}",
        "output": "{'2': 2, '0': 1, '1': 2, 2: ['2', '1'], 1: ['0']}",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "5": 2,
            "6": 3,
            "7": 1,
            "8": 1
        },
        "ast_size": 68,
        "error": null,
        "id": "sample_398",
        "straightlined_code": "counts = {'2': 2, '0': 1, '1': 2}\ndict = {}\nfor k, v in counts.items():\n    count = counts[k]\n    if count not in dict:\n        dict[count] = []\n    dict[count].append(k)\ncounts.update(dict)\nanswer = counts"
    },
    {
        "code": "def f(full, part):\n    length = len(part)\n    index = full.find(part)\n    count = 0\n    while index >= 0:\n        full = full[index + length:]\n        index = full.find(part)\n        count += 1\n    return count",
        "input": "'hrsiajiajieihruejfhbrisvlmmy', 'hr'",
        "output": "2",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 3,
            "5": 2,
            "6": 2,
            "7": 2,
            "8": 1
        },
        "ast_size": 65,
        "error": null,
        "id": "sample_403",
        "straightlined_code": "full, part = 'hrsiajiajieihruejfhbrisvlmmy', 'hr'\nlength = len(part)\nindex = full.find(part)\ncount = 0\nwhile index >= 0:\n    full = full[index + length:]\n    index = full.find(part)\n    count += 1\nanswer = count"
    },
    {
        "code": "def f(selfie):\n    lo = len(selfie)\n    for i in range(lo-1, -1, -1):\n        if selfie[i] == selfie[0]:\n            selfie.remove(selfie[lo-1])\n    return selfie",
        "input": "[4, 2, 5, 1, 3, 2, 6]",
        "output": "[4, 2, 5, 1, 3, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 8,
            "3": 7,
            "4": 1,
            "5": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "sample_423",
        "straightlined_code": "selfie = [4, 2, 5, 1, 3, 2, 6]\nlo = len(selfie)\nfor i in range(lo-1, -1, -1):\n    if selfie[i] == selfie[0]:\n        selfie.remove(selfie[lo-1])\nanswer = selfie"
    },
    {
        "code": "def f(s):\n    count = len(s) - 1\n    reverse_s = s[::-1]\n    while count > 0 and reverse_s[::2].rfind('sea') == -1:\n        count -= 1\n        reverse_s = reverse_s[:count]\n    return reverse_s[count:]",
        "input": "'s a a b s d s a a s a a'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 23,
            "4": 22,
            "5": 22,
            "6": 1
        },
        "ast_size": 72,
        "error": null,
        "id": "sample_427",
        "straightlined_code": "s = 's a a b s d s a a s a a'\ncount = len(s) - 1\nreverse_s = s[::-1]\nwhile count > 0 and reverse_s[::2].rfind('sea') == -1:\n    count -= 1\n    reverse_s = reverse_s[:count]\nanswer = reverse_s[count:]"
    },
    {
        "code": "def f(lst):\n    res = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            res.append(lst[i])\n\n    return lst.copy()",
        "input": "[1, 2, 3, 4]",
        "output": "[1, 2, 3, 4]",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 2,
            "6": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "sample_442",
        "straightlined_code": "lst = [1, 2, 3, 4]\nres = []\nfor i in range(len(lst)):\n    if lst[i] % 2 == 0:\n        res.append(lst[i])\n\nanswer = lst.copy()"
    },
    {
        "code": "def f(text, tab_size):\n    res = ''\n    text = text.replace('\\t', ' '*(tab_size-1))\n    for i in range(len(text)):\n        if text[i] == ' ':\n            res += '|'\n        else:\n            res += text[i]\n    return res",
        "input": "\"\\ta\", 3",
        "output": "'||a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 2,
            "7": 1,
            "8": 1
        },
        "ast_size": 65,
        "error": null,
        "id": "sample_447",
        "straightlined_code": "text, tab_size = \"\\ta\", 3\nres = ''\ntext = text.replace('\\t', ' '*(tab_size-1))\nfor i in range(len(text)):\n    if text[i] == ' ':\n        res += '|'\n    else:\n        res += text[i]\nanswer = res"
    },
    {
        "code": "def f(nums):\n    count = list(range(len(nums)))\n    for i in range(len(nums)):\n        nums.pop()\n        if len(count) > 0:\n            count.pop(0)\n    return nums",
        "input": "[3, 1, 7, 5, 6]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 5,
            "5": 5,
            "6": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "sample_457",
        "straightlined_code": "nums = [3, 1, 7, 5, 6]\ncount = list(range(len(nums)))\nfor i in range(len(nums)):\n    nums.pop()\n    if len(count) > 0:\n        count.pop(0)\nanswer = nums"
    },
    {
        "code": "def f(a, b, n):\n    result = m = b\n    for _ in range(n):\n        if m:\n            a, m = a.replace(m, '', 1), None\n            result = m = b\n    return result.join(a.split(b))",
        "input": "'unrndqafi', 'c', 2",
        "output": "'unrndqafi'",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 2,
            "4": 2,
            "5": 2,
            "6": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_468",
        "straightlined_code": "a, b, n = 'unrndqafi', 'c', 2\nresult = m = b\nfor _ in range(n):\n    if m:\n        a, m = a.replace(m, '', 1), None\n        result = m = b\nanswer = result.join(a.split(b))"
    },
    {
        "code": "def f(number):\n    transl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\n    result = []\n    for key, value in transl.items():\n        if value % number == 0:\n            result.append(key)\n    return result",
        "input": "2",
        "output": "['B', 'D']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 6,
            "4": 5,
            "5": 2,
            "6": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "sample_470",
        "straightlined_code": "number = 2\ntransl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\nresult = []\nfor key, value in transl.items():\n    if value % number == 0:\n        result.append(key)\nanswer = result"
    },
    {
        "code": "def f(text):\n    d = {}\n    for char in text.replace('-', '').lower():\n        d[char] = d[char] + 1 if char in d else 1\n    d = sorted(d.items(), key=lambda x: x[1])\n    return [val for i, val in d]",
        "input": "\"x--y-z-5-C\"",
        "output": "[1, 1, 1, 1, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 5,
            "4": 6,
            "5": 6
        },
        "ast_size": 78,
        "error": null,
        "id": "sample_472",
        "straightlined_code": "text = \"x--y-z-5-C\"\nd = {}\nfor char in text.replace('-', '').lower():\n    d[char] = d[char] + 1 if char in d else 1\nd = sorted(d.items(), key=lambda x: x[1])\nanswer = [val for i, val in d]"
    },
    {
        "code": "def f(text, value):\n    indexes = list()\n    for i in range(len(text)):\n        if text[i] == value:\n            indexes.append(i)\n    new_text = list(text)\n    for i in indexes:\n        new_text.remove(value)\n    return ''.join(new_text)",
        "input": "'scedvtvotkwqfoqn', 'o'",
        "output": "'scedvtvtkwqfqn'",
        "line_execution_counts": {
            "1": 1,
            "2": 17,
            "3": 16,
            "4": 2,
            "5": 1,
            "6": 3,
            "7": 2,
            "8": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_473",
        "straightlined_code": "text, value = 'scedvtvotkwqfoqn', 'o'\nindexes = list()\nfor i in range(len(text)):\n    if text[i] == value:\n        indexes.append(i)\nnew_text = list(text)\nfor i in indexes:\n    new_text.remove(value)\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(arr):\n    result = []\n    for item in arr:\n        try:\n            if item.isnumeric():\n                result.append(int(item)*2)\n        except ValueError:\n            result.append(item[::-1])\n    return result",
        "input": "['91', '16', '6r', '5r', 'egr', '', 'f', 'q1f', '-2']",
        "output": "[182, 32]",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 9,
            "5": 2,
            "8": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_484",
        "straightlined_code": "arr = ['91', '16', '6r', '5r', 'egr', '', 'f', 'q1f', '-2']\nresult = []\nfor item in arr:\n    try:\n        if item.isnumeric():\n            result.append(int(item)*2)\n    except ValueError:\n        result.append(item[::-1])\nanswer = result"
    },
    {
        "code": "def f(text, char):\n    index = text.rindex(char)\n    result = list(text)\n    while index > 0:\n        result[index] = result[index-1]\n        result[index-1] = char\n        index -= 2\n    return ''.join(result)",
        "input": "'qpfi jzm', 'j'",
        "output": "'jqjfj zm'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 3,
            "6": 3,
            "7": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_501",
        "straightlined_code": "text, char = 'qpfi jzm', 'j'\nindex = text.rindex(char)\nresult = list(text)\nwhile index > 0:\n    result[index] = result[index-1]\n    result[index-1] = char\n    index -= 2\nanswer = ''.join(result)"
    },
    {
        "code": "def f(text):\n    text = list(text)\n    for i in range(len(text)-1, -1, -1):\n        if text[i].isspace():\n            text[i] = '&nbsp;'\n    return ''.join(text)",
        "input": "'   '",
        "output": "'&nbsp;&nbsp;&nbsp;'",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 3,
            "5": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "sample_523",
        "straightlined_code": "text = '   '\ntext = list(text)\nfor i in range(len(text)-1, -1, -1):\n    if text[i].isspace():\n        text[i] = '&nbsp;'\nanswer = ''.join(text)"
    },
    {
        "code": "def f(c, st, ed):\n    d = {}\n    a, b = 0, 0\n    for x, y in c.items():\n        d[y] = x\n        if y == st:\n            a = x\n        if y == ed:\n            b = x\n    w = d[st]\n    return (w, b) if a > b else (b, w)",
        "input": "{'TEXT': 7, 'CODE': 3}, 7, 3",
        "output": "('TEXT', 'CODE')",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "6": 1,
            "7": 2,
            "8": 1,
            "9": 1,
            "10": 1
        },
        "ast_size": 95,
        "error": null,
        "id": "sample_525",
        "straightlined_code": "c, st, ed = {'TEXT': 7, 'CODE': 3}, 7, 3\nd = {}\na, b = 0, 0\nfor x, y in c.items():\n    d[y] = x\n    if y == st:\n        a = x\n    if y == ed:\n        b = x\nw = d[st]\nanswer = (w, b) if a > b else (b, w)"
    },
    {
        "code": "def f(array):\n    prev = array[0]\n    newArray = array[:]\n    for i in range(1, len(array)):\n        if prev != array[i]:\n            newArray[i] = array[i]\n        else:\n            del newArray[i]\n        prev = array[i]\n    return newArray",
        "input": "[1, 2, 3]",
        "output": "[1, 2, 3]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "8": 2,
            "9": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_529",
        "straightlined_code": "array = [1, 2, 3]\nprev = array[0]\nnewArray = array[:]\nfor i in range(1, len(array)):\n    if prev != array[i]:\n        newArray[i] = array[i]\n    else:\n        del newArray[i]\n    prev = array[i]\nanswer = newArray"
    },
    {
        "code": "def f(sequence, value):\n    i = max(sequence.index(value) - len(sequence) // 3, 0)\n    result = ''\n    for j, v in enumerate(sequence[i:]):\n        if v == '+':\n            result += value\n        else:\n            result += sequence[i + j]\n    return result",
        "input": "'hosu', 'o'",
        "output": "'hosu'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 5,
            "4": 4,
            "7": 4,
            "8": 1
        },
        "ast_size": 79,
        "error": null,
        "id": "sample_534",
        "straightlined_code": "sequence, value = 'hosu', 'o'\ni = max(sequence.index(value) - len(sequence) // 3, 0)\nresult = ''\nfor j, v in enumerate(sequence[i:]):\n    if v == '+':\n        result += value\n    else:\n        result += sequence[i + j]\nanswer = result"
    },
    {
        "code": "def f(a):\n    b = a.copy()\n    for k in range(0, len(a) - 1, 2):\n        b.insert(k + 1, b[k])\n    b.append(b[0])\n    return b",
        "input": "[5, 5, 5, 6, 4, 9]",
        "output": "[5, 5, 5, 5, 5, 5, 6, 4, 9, 5]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1,
            "5": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "sample_540",
        "straightlined_code": "a = [5, 5, 5, 6, 4, 9]\nb = a.copy()\nfor k in range(0, len(a) - 1, 2):\n    b.insert(k + 1, b[k])\nb.append(b[0])\nanswer = b"
    },
    {
        "code": "def f(nums, mos):\n    for num in mos:\n        nums.pop(nums.index(num))\n    nums.sort()\n    for num in mos:\n        nums += [num]\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True",
        "input": "[3, 1, 2, 1, 4, 1], [1]",
        "output": "False",
        "line_execution_counts": {
            "1": 2,
            "2": 1,
            "3": 1,
            "4": 2,
            "5": 1,
            "6": 5,
            "7": 5,
            "8": 1
        },
        "ast_size": 78,
        "error": null,
        "id": "sample_558",
        "straightlined_code": "nums, mos = [3, 1, 2, 1, 4, 1], [1]\nfor num in mos:\n    nums.pop(nums.index(num))\nnums.sort()\nfor num in mos:\n    nums += [num]\nfor i in range(len(nums)-1):\n    if nums[i] > nums[i+1]:\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(num):\n    letter = 1\n    for i in '1234567890':\n        num = num.replace(i,'')\n        if len(num) == 0: break\n        num = num[letter:] + num[:letter]\n        letter += 1\n    return num",
        "input": "'bwmm7h'",
        "output": "'mhbwm'",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 10,
            "4": 10,
            "5": 10,
            "6": 10,
            "7": 1
        },
        "ast_size": 60,
        "error": null,
        "id": "sample_568",
        "straightlined_code": "num = 'bwmm7h'\nletter = 1\nfor i in '1234567890':\n    num = num.replace(i,'')\n    if len(num) == 0: break\n    num = num[letter:] + num[:letter]\n    letter += 1\nanswer = num"
    },
    {
        "code": "def f(array, const):\n    output = ['x']\n    for i in range(1, len(array) + 1):\n        if i % 2 != 0:\n            output.append(array[i - 1] * -2)\n        else:\n            output.append(const)\n    return output",
        "input": "[1, 2, 3], -1",
        "output": "['x', -2, -1, -6]",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 2,
            "6": 1,
            "7": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_576",
        "straightlined_code": "array, const = [1, 2, 3], -1\noutput = ['x']\nfor i in range(1, len(array) + 1):\n    if i % 2 != 0:\n        output.append(array[i - 1] * -2)\n    else:\n        output.append(const)\nanswer = output"
    },
    {
        "code": "def f(text, char):\n    new_text = text\n    a = []\n    while char in new_text:\n        a.append(new_text.index(char))\n        new_text = new_text.replace(char,\"\",1)\n    return a",
        "input": "'rvr', 'r'",
        "output": "[0, 1]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "6": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_580",
        "straightlined_code": "text, char = 'rvr', 'r'\nnew_text = text\na = []\nwhile char in new_text:\n    a.append(new_text.index(char))\n    new_text = new_text.replace(char,\"\",1)\nanswer = a"
    },
    {
        "code": "def f(text, sign):\n    length = len(text)\n    new_text = list(text)\n    sign = list(sign)\n    for i in range(len(sign)):\n        new_text.insert((i * length - 1) // 2 + (i + 1) // 2, sign[i])\n    return ''.join(new_text)",
        "input": "'akoon', 'sXo'",
        "output": "'akoXoosn'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 4,
            "5": 3,
            "6": 1
        },
        "ast_size": 81,
        "error": null,
        "id": "sample_581",
        "straightlined_code": "text, sign = 'akoon', 'sXo'\nlength = len(text)\nnew_text = list(text)\nsign = list(sign)\nfor i in range(len(sign)):\n    new_text.insert((i * length - 1) // 2 + (i + 1) // 2, sign[i])\nanswer = ''.join(new_text)"
    },
    {
        "code": "def f(text, ch):\n    result = []\n    for line in text.splitlines():\n        if len(line) > 0 and line[0] == ch:\n            result.append(line.lower())\n        else:\n            result.append(line.upper())\n    return \"\\n\".join(result)",
        "input": "\"t\\nza\\na\", \"t\"",
        "output": "'t\nZA\nA'",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 3,
            "4": 1,
            "6": 2,
            "7": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "sample_583",
        "straightlined_code": "text, ch = \"t\\nza\\na\", \"t\"\nresult = []\nfor line in text.splitlines():\n    if len(line) > 0 and line[0] == ch:\n        result.append(line.lower())\n    else:\n        result.append(line.upper())\nanswer = \"\\n\".join(result)"
    },
    {
        "code": "def f(arr): \n    counts = [0] * 9 \n    ans = [] \n    for ele in arr: counts[ele - 1] += 1 \n    for i in range(len(counts)): \n        while counts[i] > 0: \n            counts[i] -= 1 \n            ans.append(i + 1)\n    return counts, ans",
        "input": "[6, 3, 0, 7, 4, 8]",
        "output": "([0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 6, 7, 8, 9])",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 10,
            "5": 15,
            "6": 6,
            "7": 6,
            "8": 1
        },
        "ast_size": 83,
        "error": null,
        "id": "sample_591",
        "straightlined_code": "arr = [6, 3, 0, 7, 4, 8]\ncounts = [0] * 9 \nans = [] \nfor ele in arr: counts[ele - 1] += 1 \nfor i in range(len(counts)): \n    while counts[i] > 0: \n        counts[i] -= 1 \n        ans.append(i + 1)\nanswer = counts, ans"
    },
    {
        "code": "def f(a, b):\n    a = b.join(a)\n    lst = []\n    for i in range(1, len(a)+1, 2):\n        lst.append(a[i-1:][:i])\n        lst.append(a[i-1:][i:])\n    return lst",
        "input": "[\"a\", \"b\", \"c\"], \" \"",
        "output": "['a', ' b c', 'b c', '', 'c', '']",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 3,
            "6": 1
        },
        "ast_size": 81,
        "error": null,
        "id": "sample_599",
        "straightlined_code": "a, b = [\"a\", \"b\", \"c\"], \" \"\na = b.join(a)\nlst = []\nfor i in range(1, len(a)+1, 2):\n    lst.append(a[i-1:][:i])\n    lst.append(a[i-1:][i:])\nanswer = lst"
    },
    {
        "code": "def f(text):\n    t = 5\n    tab = []\n    for i in text:\n        if i.lower() in 'aeiouy':\n            tab.append(i.upper() * t)\n        else:\n            tab.append(i * t)\n    return ' '.join(tab)",
        "input": "'csharp'",
        "output": "'ccccc sssss hhhhh AAAAA rrrrr ppppp'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 6,
            "7": 5,
            "5": 1,
            "8": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "sample_601",
        "straightlined_code": "text = 'csharp'\nt = 5\ntab = []\nfor i in text:\n    if i.lower() in 'aeiouy':\n        tab.append(i.upper() * t)\n    else:\n        tab.append(i * t)\nanswer = ' '.join(tab)"
    },
    {
        "code": "def f(text):\n    result = ''\n    mid = (len(text) - 1) // 2\n    for i in range(mid):\n        result += text[i]\n    for i in range(mid, len(text)-1):\n        result += text[mid + len(text) - 1 - i]\n    return result.ljust(len(text), text[-1])",
        "input": "'eat!'",
        "output": "'e!t!'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 2,
            "4": 1,
            "5": 3,
            "6": 2,
            "7": 1
        },
        "ast_size": 98,
        "error": null,
        "id": "sample_613",
        "straightlined_code": "text = 'eat!'\nresult = ''\nmid = (len(text) - 1) // 2\nfor i in range(mid):\n    result += text[i]\nfor i in range(mid, len(text)-1):\n    result += text[mid + len(text) - 1 - i]\nanswer = result.ljust(len(text), text[-1])"
    },
    {
        "code": "def f(text, substr, occ):\n    n = 0\n    while True:\n        i = text.rfind(substr)\n        if i == -1:\n            break\n        elif n == occ:\n            return i\n        else:\n            n += 1\n            text = text[:i]\n    return -1",
        "input": "'zjegiymjc', 'j', 2",
        "output": "-1",
        "line_execution_counts": {
            "1": 1,
            "2": 3,
            "3": 3,
            "4": 3,
            "6": 2,
            "9": 2,
            "10": 2,
            "5": 1,
            "11": 1
        },
        "ast_size": 60,
        "error": null,
        "id": "sample_614",
        "straightlined_code": "text, substr, occ = 'zjegiymjc', 'j', 2\nn = 0\nwhile True:\n    i = text.rfind(substr)\n    if i == -1:\n        break\n    elif n == occ:\n        answer = i\n    else:\n        n += 1\n        text = text[:i]\nanswer = -1"
    },
    {
        "code": "def f(body):\n    ls = list(body)\n    dist = 0\n    for i in range(0, len(ls) - 1):\n        if ls[i - 2 if i - 2 >= 0 else 0] == '\\t':\n            dist += (1 + ls[i - 1].count('\\t')) * 3\n        ls[i] = '[' + ls[i] + ']'\n    return ''.join(ls).expandtabs(4 + dist)",
        "input": "'\\n\\ny\\n'",
        "output": "'[\n][\n][y]\n'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "6": 3,
            "7": 1
        },
        "ast_size": 111,
        "error": null,
        "id": "sample_616",
        "straightlined_code": "body = '\\n\\ny\\n'\nls = list(body)\ndist = 0\nfor i in range(0, len(ls) - 1):\n    if ls[i - 2 if i - 2 >= 0 else 0] == '\\t':\n        dist += (1 + ls[i - 1].count('\\t')) * 3\n    ls[i] = '[' + ls[i] + ']'\nanswer = ''.join(ls).expandtabs(4 + dist)"
    },
    {
        "code": "def f(text, rules):\n    for rule in rules:\n        if rule == '@':\n            text = text[::-1]\n        elif rule == '~':\n            text = text.upper()\n        elif text and text[len(text)-1] == rule:\n            text = text[0:len(text)-1]\n    return text",
        "input": "'hi~!', ['~', '`', '!', '&']",
        "output": "'HI~'",
        "line_execution_counts": {
            "1": 5,
            "2": 4,
            "4": 4,
            "5": 1,
            "6": 3,
            "7": 1,
            "8": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "sample_623",
        "straightlined_code": "text, rules = 'hi~!', ['~', '`', '!', '&']\nfor rule in rules:\n    if rule == '@':\n        text = text[::-1]\n    elif rule == '~':\n        text = text.upper()\n    elif text and text[len(text)-1] == rule:\n        text = text[0:len(text)-1]\nanswer = text"
    },
    {
        "code": "def f(list):\n    for i in range(len(list) - 1, 0, -1):\n        for j in range(i):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n                list.sort()\n    return list",
        "input": "[63, 0, 1, 5, 9, 87, 0, 7, 25, 4]",
        "output": "[0, 0, 1, 4, 5, 7, 9, 25, 63, 87]",
        "line_execution_counts": {
            "1": 10,
            "2": 54,
            "3": 45,
            "4": 1,
            "5": 1,
            "6": 1
        },
        "ast_size": 92,
        "error": null,
        "id": "sample_632",
        "straightlined_code": "list = [63, 0, 1, 5, 9, 87, 0, 7, 25, 4]\nfor i in range(len(list) - 1, 0, -1):\n    for j in range(i):\n        if list[j] > list[j + 1]:\n            list[j], list[j + 1] = list[j + 1], list[j]\n            list.sort()\nanswer = list"
    },
    {
        "code": "def f(text):\n    a = 0\n    if text[0] in text[1:]:\n        a += 1\n    for i in range(0, len(text)-1):\n        if text[i] in text[i+1:]:\n            a += 1\n    return a",
        "input": "\"3eeeeeeoopppppppw14film3oee3\"",
        "output": "18",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 28,
            "5": 27,
            "6": 17,
            "7": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_640",
        "straightlined_code": "text = \"3eeeeeeoopppppppw14film3oee3\"\na = 0\nif text[0] in text[1:]:\n    a += 1\nfor i in range(0, len(text)-1):\n    if text[i] in text[i+1:]:\n        a += 1\nanswer = a"
    },
    {
        "code": "def f(text, letter):\n    if letter.islower(): letter = letter.upper()\n    text = ''.join([letter if char == letter.lower() else char for char in text])\n    return text.capitalize()",
        "input": "'E wrestled evil until upperfeat', 'e'",
        "output": "'E wrestled evil until upperfeat'",
        "line_execution_counts": {
            "1": 1,
            "2": 32,
            "3": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_651",
        "straightlined_code": "text, letter = 'E wrestled evil until upperfeat', 'e'\nif letter.islower(): letter = letter.upper()\ntext = ''.join([letter if char == letter.lower() else char for char in text])\nanswer = text.capitalize()"
    },
    {
        "code": "def f(bots):\n    clean = []\n    for username in bots:\n        if not username.isupper():\n            clean.append(username[:2] + username[-3:])\n    return len(clean)",
        "input": "['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "2": 5,
            "3": 4,
            "4": 4,
            "5": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_659",
        "straightlined_code": "bots = ['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']\nclean = []\nfor username in bots:\n    if not username.isupper():\n        clean.append(username[:2] + username[-3:])\nanswer = len(clean)"
    },
    {
        "code": "def f(num):\n    initial = [1]\n    total = initial\n    for _ in range(num):\n        total = [1] + [x+y for x, y in zip(total, total[1:])]\n        initial.append(total[-1])\n    return sum(initial)",
        "input": "3",
        "output": "4",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 3,
            "6": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_660",
        "straightlined_code": "num = 3\ninitial = [1]\ntotal = initial\nfor _ in range(num):\n    total = [1] + [x+y for x, y in zip(total, total[1:])]\n    initial.append(total[-1])\nanswer = sum(initial)"
    },
    {
        "code": "def f(text, char1, char2):\n    t1a = []\n    t2a = []\n    for i in range(len(char1)):\n        t1a.append(char1[i])\n        t2a.append(char2[i])\n    t1 = text.maketrans(dict(zip(t1a, t2a)))\n    return text.translate(t1)",
        "input": "\"ewriyat emf rwto segya\", \"tey\", \"dgo\"",
        "output": "'gwrioad gmf rwdo sggoa'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 3,
            "5": 3,
            "6": 1,
            "7": 1
        },
        "ast_size": 77,
        "error": null,
        "id": "sample_671",
        "straightlined_code": "text, char1, char2 = \"ewriyat emf rwto segya\", \"tey\", \"dgo\"\nt1a = []\nt2a = []\nfor i in range(len(char1)):\n    t1a.append(char1[i])\n    t2a.append(char2[i])\nt1 = text.maketrans(dict(zip(t1a, t2a)))\nanswer = text.translate(t1)"
    },
    {
        "code": "def f(text):\n    if text == '':\n        return False\n    first_char = text[0]\n    if text[0].isdigit():\n        return False\n    for last_char in text:\n        if (last_char != '_') and not last_char.isidentifier():\n            return False\n    return True",
        "input": "'meet'",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "3": 1,
            "4": 1,
            "6": 5,
            "7": 4,
            "9": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "sample_679",
        "straightlined_code": "text = 'meet'\nif text == '':\n    answer = False\nfirst_char = text[0]\nif text[0].isdigit():\n    answer = False\nfor last_char in text:\n    if (last_char != '_') and not last_char.isidentifier():\n        answer = False\nanswer = True"
    },
    {
        "code": "def f(text):\n    t = list(text)\n    t.pop(len(t) // 2)\n    t.append(text.lower())\n    return ':'.join([c for c in t])",
        "input": "'Rjug nzufE'",
        "output": "'R:j:u:g: :z:u:f:E:rjug nzufe'",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 11
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_687",
        "straightlined_code": "text = 'Rjug nzufE'\nt = list(text)\nt.pop(len(t) // 2)\nt.append(text.lower())\nanswer = ':'.join([c for c in t])"
    },
    {
        "code": "def f(string):\n    l = list(string)\n    for i in reversed(range(len(l))):\n        if l[i] != ' ':\n            break\n        l.pop(i)\n    return ''.join(l)",
        "input": "'    jcmfxv     '",
        "output": "'    jcmfxv'",
        "line_execution_counts": {
            "1": 1,
            "2": 6,
            "3": 6,
            "5": 5,
            "4": 1,
            "6": 1
        },
        "ast_size": 52,
        "error": null,
        "id": "sample_708",
        "straightlined_code": "string = '    jcmfxv     '\nl = list(string)\nfor i in reversed(range(len(l))):\n    if l[i] != ' ':\n        break\n    l.pop(i)\nanswer = ''.join(l)"
    },
    {
        "code": "def f(text):\n    out = \"\"\n    for i in range(len(text)):\n        if text[i].isupper():\n            out += text[i].lower()\n        else:\n            out += text[i].upper()\n    return out",
        "input": "',wPzPppdl/'",
        "output": "',WpZpPPDL/'",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 10,
            "6": 8,
            "4": 2,
            "7": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_722",
        "straightlined_code": "text = ',wPzPppdl/'\nout = \"\"\nfor i in range(len(text)):\n    if text[i].isupper():\n        out += text[i].lower()\n    else:\n        out += text[i].upper()\nanswer = out"
    },
    {
        "code": "def f(text, function):\n    cites = [len(text[text.index(function) + len(function):])]\n    for char in text:\n        if char == function:\n            cites.append(len(text[text.index(function) + len(function):]))\n    return cites",
        "input": "\"010100\", \"010\"",
        "output": "[3]",
        "line_execution_counts": {
            "1": 1,
            "2": 7,
            "3": 6,
            "5": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "sample_724",
        "straightlined_code": "text, function = \"010100\", \"010\"\ncites = [len(text[text.index(function) + len(function):])]\nfor char in text:\n    if char == function:\n        cites.append(len(text[text.index(function) + len(function):]))\nanswer = cites"
    },
    {
        "code": "def f(s1,s2):\n    res = []\n    i = s1.rfind(s2)\n    while i != -1:\n        res.append(i+len(s2)-1)\n        i = s1.rfind(s2, 0, i)\n    return res",
        "input": "'abcdefghabc', 'abc'",
        "output": "[10, 2]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "6": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_729",
        "straightlined_code": "s1, s2 = 'abcdefghabc', 'abc'\nres = []\ni = s1.rfind(s2)\nwhile i != -1:\n    res.append(i+len(s2)-1)\n    i = s1.rfind(s2, 0, i)\nanswer = res"
    },
    {
        "code": "def f(text, width):\n    result = \"\"\n    lines = text.split('\\n')\n    for l in lines:\n        result += l.center(width)\n        result += '\\n'\n\n    # Remove the very last empty line\n    result = result[:-1]\n    return result",
        "input": "'l\\nl', 2",
        "output": "'l \nl '",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 3,
            "4": 2,
            "5": 2,
            "8": 1,
            "9": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_749",
        "straightlined_code": "text, width = 'l\\nl', 2\nresult = \"\"\nlines = text.split('\\n')\nfor l in lines:\n    result += l.center(width)\n    result += '\\n'\n\n# Remove the very last empty line\nresult = result[:-1]\nanswer = result"
    },
    {
        "code": "def f(bag):\n    values = list(bag.values())\n    tbl = {}\n    for v in range(100):\n        if v in values:\n            tbl[v] = values.count(v)\n    return tbl",
        "input": "{0: 0, 1: 0, 2: 0, 3: 0, 4: 0}",
        "output": "{0: 5}",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 101,
            "4": 100,
            "5": 1,
            "6": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_753",
        "straightlined_code": "bag = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\nvalues = list(bag.values())\ntbl = {}\nfor v in range(100):\n    if v in values:\n        tbl[v] = values.count(v)\nanswer = tbl"
    },
    {
        "code": "def f(items):\n    items = list(items)\n    odd_positioned = []\n    while len(items) > 0:\n        position = items.index(min(items))\n        items.pop(position)\n        item = items.pop(position)\n        odd_positioned.append(item)\n    return odd_positioned",
        "input": "(1, 2, 3, 4, 5, 6, 7, 8)",
        "output": "[2, 4, 6, 8]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 5,
            "4": 4,
            "5": 4,
            "6": 4,
            "7": 4,
            "8": 1
        },
        "ast_size": 68,
        "error": null,
        "id": "sample_771",
        "straightlined_code": "items = (1, 2, 3, 4, 5, 6, 7, 8)\nitems = list(items)\nodd_positioned = []\nwhile len(items) > 0:\n    position = items.index(min(items))\n    items.pop(position)\n    item = items.pop(position)\n    odd_positioned.append(item)\nanswer = odd_positioned"
    },
    {
        "code": "def f(ints):\n    counts = [0] * 301\n\n    for i in ints:\n        counts[i] += 1\n\n    r = []\n    for i in range(len(counts)):\n        if counts[i] >= 3:\n            r.append(str(i))\n    counts.clear()\n    return ' '.join(r)",
        "input": "[2, 3, 5, 2, 4, 5, 2, 89]",
        "output": "'2'",
        "line_execution_counts": {
            "1": 1,
            "3": 9,
            "4": 8,
            "6": 1,
            "7": 302,
            "8": 301,
            "9": 1,
            "10": 1,
            "11": 1
        },
        "ast_size": 77,
        "error": null,
        "id": "sample_780",
        "straightlined_code": "ints = [2, 3, 5, 2, 4, 5, 2, 89]\ncounts = [0] * 301\n\nfor i in ints:\n    counts[i] += 1\n\nr = []\nfor i in range(len(counts)):\n    if counts[i] >= 3:\n        r.append(str(i))\ncounts.clear()\nanswer = ' '.join(r)"
    },
    {
        "code": "def f(list, start, end):\n    count = 0\n    for i in range(start, end):\n        for j in range(i, end):\n            if list[i] != list[j]:\n                count += 1\n    return count",
        "input": "[1, 2, 4, 3, 2, 1], 0, 3",
        "output": "3",
        "line_execution_counts": {
            "1": 1,
            "2": 4,
            "3": 9,
            "4": 6,
            "5": 3,
            "6": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "sample_793",
        "straightlined_code": "list, start, end = [1, 2, 4, 3, 2, 1], 0, 3\ncount = 0\nfor i in range(start, end):\n    for j in range(i, end):\n        if list[i] != list[j]:\n            count += 1\nanswer = count"
    },
    {
        "code": "def f(numbers):\n    i = 0\n    n = len(numbers)\n    while i < n-1:\n        if numbers[i] > numbers[i+1]:\n            numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n            i = 0\n        else:\n            i += 1\n    return numbers",
        "input": "[3, 1, 4, 1, 5, 9]",
        "output": "[1, 1, 3, 4, 5, 9]",
        "line_execution_counts": {
            "1": 1,
            "2": 1,
            "3": 12,
            "4": 11,
            "5": 3,
            "6": 3,
            "8": 8,
            "9": 1
        },
        "ast_size": 91,
        "error": null,
        "id": "new_synth_810",
        "straightlined_code": "numbers = [3, 1, 4, 1, 5, 9]\ni = 0\nn = len(numbers)\nwhile i < n-1:\n    if numbers[i] > numbers[i+1]:\n        numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n        i = 0\n    else:\n        i += 1\nanswer = numbers"
    },
    {
        "code": "def f(arr):\n    a,b = 0, 1\n    while b < len(arr):\n        if arr[a] <= arr[b]:\n            a = b\n            b += 1\n        else:\n            arr[a], arr[b] = arr[b], arr[a]\n    return arr",
        "input": "[6, 4, 5, 8, 2, 7, 9]",
        "output": "[4, 5, 6, 2, 7, 8, 9]",
        "line_execution_counts": {
            "1": 1,
            "2": 11,
            "3": 10,
            "7": 4,
            "4": 6,
            "5": 6,
            "8": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "new_synth_811",
        "straightlined_code": "arr = [6, 4, 5, 8, 2, 7, 9]\na,b = 0, 1\nwhile b < len(arr):\n    if arr[a] <= arr[b]:\n        a = b\n        b += 1\n    else:\n        arr[a], arr[b] = arr[b], arr[a]\nanswer = arr"
    },
    {
        "code": "def f(s):\n    s = list(s)\n    for _ in range(len(s) - 1):\n        s[0], s[-1] = s[-1], s[0]\n        s = s[:-1]\n    return ''.join(s)",
        "input": "'1234567890'",
        "output": "'2'",
        "line_execution_counts": {
            "1": 1,
            "2": 10,
            "3": 9,
            "4": 9,
            "5": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "new_synth_818",
        "straightlined_code": "s = '1234567890'\ns = list(s)\nfor _ in range(len(s) - 1):\n    s[0], s[-1] = s[-1], s[0]\n    s = s[:-1]\nanswer = ''.join(s)"
    },
    {
        "code": "def f(a):\n    if a == 0:\n        return [0]\n    result = []\n    while a > 0:\n        result.append(a%10)\n        a = a//10\n    result.reverse()\n    return int(''.join(str(i) for i in result))",
        "input": "000",
        "output": "[0]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_22",
        "straightlined_code": "a = 000\nif a == 0:\n    answer = [0]\nresult = []\nwhile a > 0:\n    result.append(a%10)\n    a = a//10\nresult.reverse()\nanswer = int(''.join(str(i) for i in result))"
    },
    {
        "code": "def f(names):\n    if names == []:\n        return \"\"\n    smallest = names[0]\n    for name in names[1:]:\n        if name < smallest:\n            smallest = name\n    names.remove(smallest)\n    return names.join(smallest)",
        "input": "[]",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "sample_48",
        "straightlined_code": "names = []\nif names == []:\n    answer = \"\"\nsmallest = names[0]\nfor name in names[1:]:\n    if name < smallest:\n        smallest = name\nnames.remove(smallest)\nanswer = names.join(smallest)"
    },
    {
        "code": "def f(first, second):\n    if len(first) < 10 or len(second) < 10:\n        return 'no'\n    for i in range(5):\n        if first[i] != second[i]:\n            return 'no'\n    first.extend(second)\n    return first",
        "input": "[1, 2, 1], [1, 1, 2]",
        "output": "'no'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "sample_139",
        "straightlined_code": "first, second = [1, 2, 1], [1, 1, 2]\nif len(first) < 10 or len(second) < 10:\n    answer = 'no'\nfor i in range(5):\n    if first[i] != second[i]:\n        answer = 'no'\nfirst.extend(second)\nanswer = first"
    },
    {
        "code": "def f(out, mapping):\n    for key in mapping:\n        out.format_map(mapping)\n        if len(re.findall(r'{\\w}', out)) == 0:\n            break\n        mapping[key][1] = mapping[key][1][::-1]\n    return out",
        "input": "\"{{{{}}}}\", {}",
        "output": "'{{{{}}}}'",
        "line_execution_counts": {
            "1": 1,
            "6": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_189",
        "straightlined_code": "out, mapping = \"{{{{}}}}\", {}\nfor key in mapping:\n    out.format_map(mapping)\n    if len(re.findall(r'{\\w}', out)) == 0:\n        break\n    mapping[key][1] = mapping[key][1][::-1]\nanswer = out"
    },
    {
        "code": "def f(mess, char):\n    while mess.find(char, mess.rindex(char) + 1) != -1:\n        mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\n    return mess",
        "input": "'0aabbaa0b', 'a'",
        "output": "'0aabbaa0b'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "sample_222",
        "straightlined_code": "mess, char = '0aabbaa0b', 'a'\nwhile mess.find(char, mess.rindex(char) + 1) != -1:\n    mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\nanswer = mess"
    },
    {
        "code": "def f(base, delta):\n    for j in range(len(delta)):\n        for i in range(len(base)):\n            if base[i] == delta[j][0]:\n                assert delta[j][1] != base[i]\n                base[i] = delta[j][1]\n    return base",
        "input": "[\"gloss\", \"banana\", \"barn\", \"lawn\"], []",
        "output": "['gloss', 'banana', 'barn', 'lawn']",
        "line_execution_counts": {
            "1": 1,
            "6": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "sample_263",
        "straightlined_code": "base, delta = [\"gloss\", \"banana\", \"barn\", \"lawn\"], []\nfor j in range(len(delta)):\n    for i in range(len(base)):\n        if base[i] == delta[j][0]:\n            assert delta[j][1] != base[i]\n            base[i] = delta[j][1]\nanswer = base"
    },
    {
        "code": "def f(text, n):\n    if len(text) <= 2:\n        return text\n    leading_chars = text[0] * (n - len(text) + 1)\n    return leading_chars + text[1:-1] + text[-1]",
        "input": "'g', 15",
        "output": "'g'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "sample_360",
        "straightlined_code": "text, n = 'g', 15\nif len(text) <= 2:\n    answer = text\nleading_chars = text[0] * (n - len(text) + 1)\nanswer = leading_chars + text[1:-1] + text[-1]"
    },
    {
        "code": "def f(n, s):\n    if s.startswith(n):\n        pre, _ = s.split(n, 1)\n        return pre + n + s[len(n):]\n    return s",
        "input": "'xqc', 'mRcwVqXsRDRb'",
        "output": "'mRcwVqXsRDRb'",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "sample_365",
        "straightlined_code": "n, s = 'xqc', 'mRcwVqXsRDRb'\nif s.startswith(n):\n    pre, _ = s.split(n, 1)\n    answer = pre + n + s[len(n):]\nanswer = s"
    },
    {
        "code": "def f(s, c1, c2):\n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        if c1 in item:\n            ls[index] = item.replace(c1, c2, 1)\n    return c1.join(ls)",
        "input": "'', 'mi', 'siast'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "sample_480",
        "straightlined_code": "s, c1, c2 = '', 'mi', 'siast'\nif s == '':\n    answer = s\nls = s.split(c1)\nfor index, item in enumerate(ls):\n    if c1 in item:\n        ls[index] = item.replace(c1, c2, 1)\nanswer = c1.join(ls)"
    },
    {
        "code": "def f(container, cron):\n    if not cron in container:\n        return container\n    pref = container[:container.index(cron)].copy()\n    suff = container[container.index(cron) + 1:].copy()\n    return pref + suff",
        "input": "[], 2",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "sample_663",
        "straightlined_code": "container, cron = [], 2\nif not cron in container:\n    answer = container\npref = container[:container.index(cron)].copy()\nsuff = container[container.index(cron) + 1:].copy()\nanswer = pref + suff"
    },
    {
        "code": "def f(text, n):\n    if n < 0 or len(text) <= n:\n        return text\n    result = text[0 : n]\n    i = len(result) - 1\n    while i >= 0:\n        if result[i] != text[i]:\n            break\n        i -= 1\n    return text[0 : i + 1]",
        "input": "'bR', -1",
        "output": "'bR'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 86,
        "error": null,
        "id": "sample_789",
        "straightlined_code": "text, n = 'bR', -1\nif n < 0 or len(text) <= n:\n    answer = text\nresult = text[0 : n]\ni = len(result) - 1\nwhile i >= 0:\n    if result[i] != text[i]:\n        break\n    i -= 1\nanswer = text[0 : i + 1]"
    },
    {
        "code": "def f(n):\n    n *= 4\n    return (n % 2) + (n % 4) + (n % 8) + (n % 16) + (n % 32) + (n % 64) + (n % 128) + (n % 256) + (n % 512) + (n % 1024)",
        "input": "3",
        "output": "88",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 78,
        "error": null,
        "id": "new_synth_960",
        "straightlined_code": "n = 3\nn *= 4\nanswer = (n % 2) + (n % 4) + (n % 8) + (n % 16) + (n % 32) + (n % 64) + (n % 128) + (n % 256) + (n % 512) + (n % 1024)"
    },
    {
        "code": "def f(x):\n    return x[1:2:1] + x[1:3:1] + x[1:4:1] + x[1:5:1] + x[1:6:1]",
        "input": "'012345'",
        "output": "'112123123412345'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "new_synth_991",
        "straightlined_code": "x = '012345'\nanswer = x[1:2:1] + x[1:3:1] + x[1:4:1] + x[1:5:1] + x[1:6:1]"
    },
    {
        "code": "def f(s, sep):\n    if len(sep) == 1:\n        return s.replace(sep, '')\n    split_list = []\n    start_idx = 0\n    for i in range(len(s)):\n        if s[i] == sep[0]:\n            if len(split_list) == 0:\n                split_list.append(s[:i])\n                start_idx = i + 1\n            else:\n                split_list.append(s[start_idx:i])\n                start_idx = i + 1\n    if len(split_list) == 0:\n        return s\n    else:\n        return f(sep.join(split_list), sep[1:])",
        "input": "\"_x_xx_xx_x\", \"_\"",
        "output": "'xxxxxx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 139,
        "error": null,
        "id": "new_synth_1048",
        "straightlined_code": "s, sep = \"_x_xx_xx_x\", \"_\"\nif len(sep) == 1:\n    answer = s.replace(sep, '')\nsplit_list = []\nstart_idx = 0\nfor i in range(len(s)):\n    if s[i] == sep[0]:\n        if len(split_list) == 0:\n            split_list.append(s[:i])\n            start_idx = i + 1\n        else:\n            split_list.append(s[start_idx:i])\n            start_idx = i + 1\nif len(split_list) == 0:\n    answer = s\nelse:\n    answer = f(sep.join(split_list), sep[1:])"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0 and len(b) == 0:\n        return None\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 105,
        "error": null,
        "id": "new_synth_1050",
        "straightlined_code": "a, b = [], []\nif len(a) == 0 and len(b) == 0:\n    answer = None\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(n, b):\n    if len(n) <= 1:\n        return n\n    if b > len(n):\n        return f(n, b - len(n))\n    if b < 0:\n        return f(n, len(n) + b)\n    if b == 0:\n        return n\n    if b > 0:\n        return f(n[:-b], 0) + f(n[-b:], 0)\n    return f(n[:b], 0) + f(n[b:], 0)",
        "input": "[], 0",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 132,
        "error": null,
        "id": "new_synth_1051",
        "straightlined_code": "n, b = [], 0\nif len(n) <= 1:\n    answer = n\nif b > len(n):\n    answer = f(n, b - len(n))\nif b < 0:\n    answer = f(n, len(n) + b)\nif b == 0:\n    answer = n\nif b > 0:\n    answer = f(n[:-b], 0) + f(n[-b:], 0)\nanswer = f(n[:b], 0) + f(n[b:], 0)"
    },
    {
        "code": "def f(s):\n    if s == '':\n        return s\n    ls = s.split(' ')\n    for index, item in enumerate(ls):\n        ls[index] = item[:-1]\n    return ' '.join(ls)",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "new_synth_1053",
        "straightlined_code": "s = ''\nif s == '':\n    answer = s\nls = s.split(' ')\nfor index, item in enumerate(ls):\n    ls[index] = item[:-1]\nanswer = ' '.join(ls)"
    },
    {
        "code": "def f(s):\n    if s == '':\n        return s\n    if len(s) == 1:\n        if s.isdigit():\n            return s\n        else:\n            return s + '1'\n    if s[0].isdigit():\n        return s[0] + f(s[1:])\n    else:\n        return s[0] + '0' + f(s[1:])",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 83,
        "error": null,
        "id": "new_synth_1054",
        "straightlined_code": "s = ''\nif s == '':\n    answer = s\nif len(s) == 1:\n    if s.isdigit():\n        answer = s\n    else:\n        answer = s + '1'\nif s[0].isdigit():\n    answer = s[0] + f(s[1:])\nelse:\n    answer = s[0] + '0' + f(s[1:])"
    },
    {
        "code": "def f(x):\n    try:\n        return 0 if (x[2] + 2 * x[0] + x[1]) == x[0] + x[1] + x[2] else 1\n    except:\n        return -1",
        "input": "[3, 7, 3]",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "new_synth_1055",
        "straightlined_code": "x = [3, 7, 3]\ntry:\n    answer = 0 if (x[2] + 2 * x[0] + x[1]) == x[0] + x[1] + x[2] else 1\nexcept:\n    answer = -1"
    },
    {
        "code": "def f(p):\n    for i in range(len(p) - 1):\n        if p[i] == '*':\n            for j in range(i + 1, len(p)):\n                if p[j] == '*':\n                    p[j] = ' '\n    return p",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "6": 1
        },
        "ast_size": 65,
        "error": null,
        "id": "new_synth_1056",
        "straightlined_code": "p = []\nfor i in range(len(p) - 1):\n    if p[i] == '*':\n        for j in range(i + 1, len(p)):\n            if p[j] == '*':\n                p[j] = ' '\nanswer = p"
    },
    {
        "code": "def f(s):\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return False\n    if s[0] == s[1]:\n        return f(s[1:])\n    else:\n        return False",
        "input": "''",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "new_synth_1062",
        "straightlined_code": "s = ''\nif len(s) == 0:\n    answer = True\nif len(s) == 1:\n    answer = False\nif s[0] == s[1]:\n    answer = f(s[1:])\nelse:\n    answer = False"
    },
    {
        "code": "def f(s, t):\n    if not s.endswith(t):\n        return s + t\n    if len(s) % 2 == 0:\n        return f(s[:-len(t)], t) + t\n    return f(s[:-len(t)], t) + t + t",
        "input": "'', 'z'",
        "output": "'z'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 82,
        "error": null,
        "id": "new_synth_1068",
        "straightlined_code": "s, t = '', 'z'\nif not s.endswith(t):\n    answer = s + t\nif len(s) % 2 == 0:\n    answer = f(s[:-len(t)], t) + t\nanswer = f(s[:-len(t)], t) + t + t"
    },
    {
        "code": "def f(x):\n    if x == '':\n        return x\n    return f(x[:-1]) + '*' if x[-1].isdigit() else f(x[:-1]) + x[-1]",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 59,
        "error": null,
        "id": "new_synth_1070",
        "straightlined_code": "x = ''\nif x == '':\n    answer = x\nanswer = f(x[:-1]) + '*' if x[-1].isdigit() else f(x[:-1]) + x[-1]"
    },
    {
        "code": "def f(c):\n    if len(c) < 4:\n        return True\n    if len(c) == 4:\n        return False if len(set(c)) < 3 else True\n    if len(c) == 5:\n        return True\n    if len(c) == 6:\n        return False\n    return True if len(c) == 7 else False",
        "input": "[]",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "new_synth_1071",
        "straightlined_code": "c = []\nif len(c) < 4:\n    answer = True\nif len(c) == 4:\n    answer = False if len(set(c)) < 3 else True\nif len(c) == 5:\n    answer = True\nif len(c) == 6:\n    answer = False\nanswer = True if len(c) == 7 else False"
    },
    {
        "code": "def f(A, B):\n    if len(A) != len(B):\n        return A\n    for i in range(len(A)):\n        if A[i] != B[i]:\n            return A[i : i + 1]\n    return A",
        "input": "'ab', 'b'",
        "output": "'ab'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "new_synth_1072",
        "straightlined_code": "A, B = 'ab', 'b'\nif len(A) != len(B):\n    answer = A\nfor i in range(len(A)):\n    if A[i] != B[i]:\n        answer = A[i : i + 1]\nanswer = A"
    },
    {
        "code": "def f(n):\n    if len(n) == 0:\n        return True\n    if len(n) == 1:\n        return False\n    if len(n) == 2:\n        return True\n    if len(n) == 3:\n        return False\n    if n[0] < n[1]:\n        return f(n[1:])\n    else:\n        return False",
        "input": "''",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "new_synth_1075",
        "straightlined_code": "n = ''\nif len(n) == 0:\n    answer = True\nif len(n) == 1:\n    answer = False\nif len(n) == 2:\n    answer = True\nif len(n) == 3:\n    answer = False\nif n[0] < n[1]:\n    answer = f(n[1:])\nelse:\n    answer = False"
    },
    {
        "code": "def f(n, k):\n    if n % k == 0:\n        return (n//k - 1) * (n//k + 1) // 2\n    else:\n        return n // k * ((n//k) * k + 1) // 2",
        "input": "11, 2",
        "output": "27",
        "line_execution_counts": {
            "1": 1,
            "4": 1
        },
        "ast_size": 64,
        "error": null,
        "id": "new_synth_1077",
        "straightlined_code": "n, k = 11, 2\nif n % k == 0:\n    answer = (n//k - 1) * (n//k + 1) // 2\nelse:\n    answer = n // k * ((n//k) * k + 1) // 2"
    },
    {
        "code": "def f(s, sep):\n    if len(sep) == 1:\n        return s.replace(sep, '')\n    split_list = []\n    start_idx = 0\n    for i in range(len(s)):\n        if s[i] == sep[0]:\n            if len(split_list) == 0:\n                split_list.append(s[:i])\n                start_idx = i + 1\n            else:\n                split_list.append(s[start_idx:i])\n                start_idx = i + 1\n    if len(split_list) == 0:\n        return s\n    else:\n        return f(sep.join(split_list), sep[1:])",
        "input": "\"_x_xx_xx_x\", \"_\"",
        "output": "'xxxxxx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 139,
        "error": null,
        "id": "new_synth_1078",
        "straightlined_code": "s, sep = \"_x_xx_xx_x\", \"_\"\nif len(sep) == 1:\n    answer = s.replace(sep, '')\nsplit_list = []\nstart_idx = 0\nfor i in range(len(s)):\n    if s[i] == sep[0]:\n        if len(split_list) == 0:\n            split_list.append(s[:i])\n            start_idx = i + 1\n        else:\n            split_list.append(s[start_idx:i])\n            start_idx = i + 1\nif len(split_list) == 0:\n    answer = s\nelse:\n    answer = f(sep.join(split_list), sep[1:])"
    },
    {
        "code": "def f(s):\n    if len(s) <= 1:\n        return s\n    m = len(s) // 2\n    return f(s[:m]) + f(s[m:])",
        "input": "'a'",
        "output": "'a'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "new_synth_1080",
        "straightlined_code": "s = 'a'\nif len(s) <= 1:\n    answer = s\nm = len(s) // 2\nanswer = f(s[:m]) + f(s[m:])"
    },
    {
        "code": "def f(text, char):\n    while text.find(char, text.rindex(char) + 1) != -1:\n        text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\n    return text",
        "input": "'ababbaa', 'b'",
        "output": "'ababbaa'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1083",
        "straightlined_code": "text, char = 'ababbaa', 'b'\nwhile text.find(char, text.rindex(char) + 1) != -1:\n    text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\nanswer = text"
    },
    {
        "code": "def f(text, char):\n    while text.find(char, text.rindex(char) + 1) != -1:\n        text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\n    return text",
        "input": "'ababbaa', 'b'",
        "output": "'ababbaa'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1084",
        "straightlined_code": "text, char = 'ababbaa', 'b'\nwhile text.find(char, text.rindex(char) + 1) != -1:\n    text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\nanswer = text"
    },
    {
        "code": "def f(text, char):\n    while text.find(char, text.rindex(char) + 1) != -1:\n        text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\n    return text",
        "input": "'12313', '1'",
        "output": "'12313'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1085",
        "straightlined_code": "text, char = '12313', '1'\nwhile text.find(char, text.rindex(char) + 1) != -1:\n    text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\nanswer = text"
    },
    {
        "code": "def f(a, b, c):\n    if len(a) == 0:\n        return c\n    if len(b) == 0:\n        return c\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b, c)\n    else:\n        return [b[0]] + f(a, b[1:], c)",
        "input": "[], [], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 89,
        "error": null,
        "id": "new_synth_1087",
        "straightlined_code": "a, b, c = [], [], []\nif len(a) == 0:\n    answer = c\nif len(b) == 0:\n    answer = c\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b, c)\nelse:\n    answer = [b[0]] + f(a, b[1:], c)"
    },
    {
        "code": "def f(mess, char):\n    while mess.find(char, mess.rindex(char) + 1) != -1:\n        mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\n    return mess",
        "input": "'aabbaabbaaba', 'b'",
        "output": "'aabbaabbaaba'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1088",
        "straightlined_code": "mess, char = 'aabbaabbaaba', 'b'\nwhile mess.find(char, mess.rindex(char) + 1) != -1:\n    mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\nanswer = mess"
    },
    {
        "code": "def f(text, char):\n    while text.find(char, text.rindex(char) + 1) != -1:\n        text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\n    return text",
        "input": "'abcdefa', 'a'",
        "output": "'abcdefa'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1089",
        "straightlined_code": "text, char = 'abcdefa', 'a'\nwhile text.find(char, text.rindex(char) + 1) != -1:\n    text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\nanswer = text"
    },
    {
        "code": "def f(n, b):\n    if len(n) <= 1:\n        return n\n    if b > len(n):\n        return f(n, b - len(n))\n    if b < 0:\n        return f(n, len(n) + b)\n    if b == 0:\n        return n\n    if b > 0:\n        return f(n[:-b], 0) + f(n[-b:], 0)\n    return f(n[:b], 0) + f(n[b:], 0)",
        "input": "[], 0",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 132,
        "error": null,
        "id": "new_synth_1090",
        "straightlined_code": "n, b = [], 0\nif len(n) <= 1:\n    answer = n\nif b > len(n):\n    answer = f(n, b - len(n))\nif b < 0:\n    answer = f(n, len(n) + b)\nif b == 0:\n    answer = n\nif b > 0:\n    answer = f(n[:-b], 0) + f(n[-b:], 0)\nanswer = f(n[:b], 0) + f(n[b:], 0)"
    },
    {
        "code": "def f(s, c):\n    if s == '':\n        return False\n    return f(s[1:], c) if s[0] == c else f(s[1:], c) if s[0] != c else True",
        "input": "'', 'a'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "new_synth_1091",
        "straightlined_code": "s, c = '', 'a'\nif s == '':\n    answer = False\nanswer = f(s[1:], c) if s[0] == c else f(s[1:], c) if s[0] != c else True"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0 and len(b) == 0:\n        return None\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 105,
        "error": null,
        "id": "new_synth_1092",
        "straightlined_code": "a, b = [], []\nif len(a) == 0 and len(b) == 0:\n    answer = None\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0 and len(b) == 0:\n        return None\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 105,
        "error": null,
        "id": "new_synth_1093",
        "straightlined_code": "a, b = [], []\nif len(a) == 0 and len(b) == 0:\n    answer = None\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0:\n        return len(b)\n    elif len(b) == 0:\n        return len(a)\n    if a[0] == b[0]:\n        return f(a[1:], b[1:])\n    if a[0] < b[0]:\n        return 1 + f(a[1:], b)\n    else:\n        return 1 + f(a, b[1:])",
        "input": "[], []",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 107,
        "error": null,
        "id": "new_synth_1094",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = len(b)\nelif len(b) == 0:\n    answer = len(a)\nif a[0] == b[0]:\n    answer = f(a[1:], b[1:])\nif a[0] < b[0]:\n    answer = 1 + f(a[1:], b)\nelse:\n    answer = 1 + f(a, b[1:])"
    },
    {
        "code": "def f(s, c1, c2):\n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        if c2 in item:\n            ls[index] = item.replace(c2, '', 1)\n    return c1.join(ls)",
        "input": "'', 'y', 'l'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 68,
        "error": null,
        "id": "new_synth_1095",
        "straightlined_code": "s, c1, c2 = '', 'y', 'l'\nif s == '':\n    answer = s\nls = s.split(c1)\nfor index, item in enumerate(ls):\n    if c2 in item:\n        ls[index] = item.replace(c2, '', 1)\nanswer = c1.join(ls)"
    },
    {
        "code": "def f(s, c1, c2):\n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        ls[index] = item.replace(c1, c2, 1)\n    return c1.join(ls)",
        "input": "'', 'mi', 'siast'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "new_synth_1096",
        "straightlined_code": "s, c1, c2 = '', 'mi', 'siast'\nif s == '':\n    answer = s\nls = s.split(c1)\nfor index, item in enumerate(ls):\n    ls[index] = item.replace(c1, c2, 1)\nanswer = c1.join(ls)"
    },
    {
        "code": "def f(s, c1, c2):\n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        if c2 in item:\n            ls[index] = item.replace(c2, c1, 1)\n    return c1.join(ls)",
        "input": "'', 'mi', 'siast'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "new_synth_1097",
        "straightlined_code": "s, c1, c2 = '', 'mi', 'siast'\nif s == '':\n    answer = s\nls = s.split(c1)\nfor index, item in enumerate(ls):\n    if c2 in item:\n        ls[index] = item.replace(c2, c1, 1)\nanswer = c1.join(ls)"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 84,
        "error": null,
        "id": "new_synth_1098",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(s, sep):\n    if len(sep) == 1:\n        return s.replace(sep, '')\n    split_list = []\n    start_idx = 0\n    for i in range(len(s)):\n        if s[i] == sep[0]:\n            if len(split_list) == 0:\n                split_list.append(s[:i])\n                start_idx = i + 1\n            else:\n                split_list.append(s[start_idx:i])\n                start_idx = i + 1\n    if len(split_list) == 0:\n        return s\n    else:\n        return f(sep.join(split_list), sep[1:])",
        "input": "\"_x_xx_xx_x\", \"_\"",
        "output": "'xxxxxx'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 139,
        "error": null,
        "id": "new_synth_1099",
        "straightlined_code": "s, sep = \"_x_xx_xx_x\", \"_\"\nif len(sep) == 1:\n    answer = s.replace(sep, '')\nsplit_list = []\nstart_idx = 0\nfor i in range(len(s)):\n    if s[i] == sep[0]:\n        if len(split_list) == 0:\n            split_list.append(s[:i])\n            start_idx = i + 1\n        else:\n            split_list.append(s[start_idx:i])\n            start_idx = i + 1\nif len(split_list) == 0:\n    answer = s\nelse:\n    answer = f(sep.join(split_list), sep[1:])"
    },
    {
        "code": "def f(s, p):\n    if len(s) == 0:\n        return len(p) == 0\n    if len(p) == 0:\n        return len(s) == 0\n    if p[0] == '*':\n        return f(s, p[1:]) or f(s[1:], p) or f(s[1:], p[1:])\n    else:\n        if len(s) == 0:\n            return False\n        return s[0] == p[0] and f(s[1:], p[1:])",
        "input": "'', ''",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 131,
        "error": null,
        "id": "new_synth_1100",
        "straightlined_code": "s, p = '', ''\nif len(s) == 0:\n    answer = len(p) == 0\nif len(p) == 0:\n    answer = len(s) == 0\nif p[0] == '*':\n    answer = f(s, p[1:]) or f(s[1:], p) or f(s[1:], p[1:])\nelse:\n    if len(s) == 0:\n        answer = False\n    answer = s[0] == p[0] and f(s[1:], p[1:])"
    },
    {
        "code": "def f(l):\n    if len(l) < 2:\n        return l\n    if l[0] < l[1]:\n        return [l[0]] + f(l[1:])\n    else:\n        return f([l[0]] + l[2:])",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "new_synth_1101",
        "straightlined_code": "l = []\nif len(l) < 2:\n    answer = l\nif l[0] < l[1]:\n    answer = [l[0]] + f(l[1:])\nelse:\n    answer = f([l[0]] + l[2:])"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0:\n        return b\n    elif len(b) == 0:\n        return a\n    else:\n        if a[0] > b[0]:\n            return [a[0]] + f(a[1:], b)\n        else:\n            return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 84,
        "error": null,
        "id": "new_synth_1102",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = b\nelif len(b) == 0:\n    answer = a\nelse:\n    if a[0] > b[0]:\n        answer = [a[0]] + f(a[1:], b)\n    else:\n        answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(s):\n    if len(s) == 0 or len(s) == 1:\n        return s\n    else:\n        for i in range(1, len(s), 2):\n            if s[i] == '*' and s[i-1] == '*':\n                s[i] = ' '\n        return f(s[:-1]) + s[-1:]",
        "input": "\"\"",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 93,
        "error": null,
        "id": "new_synth_1103",
        "straightlined_code": "s = \"\"\nif len(s) == 0 or len(s) == 1:\n    answer = s\nelse:\n    for i in range(1, len(s), 2):\n        if s[i] == '*' and s[i-1] == '*':\n            s[i] = ' '\n    answer = f(s[:-1]) + s[-1:]"
    },
    {
        "code": "def f(ls):\n    if ls == []:\n        return ''\n    sml = ls[0]\n    for i in range(len(ls)):\n        if ls[i] < sml:\n            sml = ls[i]\n    return f(ls[1:]) + sml",
        "input": "[]",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1104",
        "straightlined_code": "ls = []\nif ls == []:\n    answer = ''\nsml = ls[0]\nfor i in range(len(ls)):\n    if ls[i] < sml:\n        sml = ls[i]\nanswer = f(ls[1:]) + sml"
    },
    {
        "code": "def f(seq):\n    if seq == '':\n        return seq\n    elif seq[0] == seq[1]:\n        return f(seq[2:])\n    else:\n        return seq[0] + f(seq[1:])",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "new_synth_1105",
        "straightlined_code": "seq = ''\nif seq == '':\n    answer = seq\nelif seq[0] == seq[1]:\n    answer = f(seq[2:])\nelse:\n    answer = seq[0] + f(seq[1:])"
    },
    {
        "code": "def f(x, y):\n    return x[y-1:y+1:1] + x[y-1:y+1:1] + x[y-1:y+1:1] + x[y-1:y+1:1]",
        "input": "'12345', 4",
        "output": "'45454545'",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 76,
        "error": null,
        "id": "new_synth_1106",
        "straightlined_code": "x, y = '12345', 4\nanswer = x[y-1:y+1:1] + x[y-1:y+1:1] + x[y-1:y+1:1] + x[y-1:y+1:1]"
    },
    {
        "code": "def f(a, n):\n    if n < 0 or len(a) <= n:\n        return a\n    else:\n        return f(a[:n], n // 2) + a[n] + f(a[n + 1:], n // 2)",
        "input": "[], 0",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "new_synth_1107",
        "straightlined_code": "a, n = [], 0\nif n < 0 or len(a) <= n:\n    answer = a\nelse:\n    answer = f(a[:n], n // 2) + a[n] + f(a[n + 1:], n // 2)"
    },
    {
        "code": "def f(mess, char):\n    while mess.find(char, mess.rindex(char) + 1) != -1:\n        mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\n    return mess",
        "input": "'aabbaabbaaba', 'b'",
        "output": "'aabbaabbaaba'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1108",
        "straightlined_code": "mess, char = 'aabbaabbaaba', 'b'\nwhile mess.find(char, mess.rindex(char) + 1) != -1:\n    mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\nanswer = mess"
    },
    {
        "code": "def f(text, char):\n    while text.find(char, text.rindex(char) + 1) != -1:\n        text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\n    return text",
        "input": "'ababbaa', 'b'",
        "output": "'ababbaa'",
        "line_execution_counts": {
            "1": 1,
            "3": 1
        },
        "ast_size": 66,
        "error": null,
        "id": "new_synth_1109",
        "straightlined_code": "text, char = 'ababbaa', 'b'\nwhile text.find(char, text.rindex(char) + 1) != -1:\n    text = text[:text.rindex(char) + 1] + text[text.rindex(char) + 2:]\nanswer = text"
    },
    {
        "code": "def f(n, b):\n    if len(n) <= 1:\n        return n\n    if b > len(n):\n        return f(n, b - len(n))\n    if b < 0:\n        return f(n, len(n) + b)\n    if b == 0:\n        return n\n    if b > 0:\n        return f(n[:-b], 0) + f(n[-b:], 0)\n    return f(n[:b], 0) + f(n[b:], 0)",
        "input": "[], 0",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 132,
        "error": null,
        "id": "new_synth_1110",
        "straightlined_code": "n, b = [], 0\nif len(n) <= 1:\n    answer = n\nif b > len(n):\n    answer = f(n, b - len(n))\nif b < 0:\n    answer = f(n, len(n) + b)\nif b == 0:\n    answer = n\nif b > 0:\n    answer = f(n[:-b], 0) + f(n[-b:], 0)\nanswer = f(n[:b], 0) + f(n[b:], 0)"
    },
    {
        "code": "def f(x, y):\n    if len(x) <= 0 or len(y) <= 0:\n        return False\n    return x[0] == y[0] and f(x[1:], y[1:])",
        "input": "'', ''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "new_synth_1111",
        "straightlined_code": "x, y = '', ''\nif len(x) <= 0 or len(y) <= 0:\n    answer = False\nanswer = x[0] == y[0] and f(x[1:], y[1:])"
    },
    {
        "code": "def f(L, k):\n    if L == []:\n        return []\n    else:\n        if L[0] <= k:\n            return [L[0]] + f(L[1:], k)\n        else:\n            return f(L[1:], k)",
        "input": "[], 3",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 58,
        "error": null,
        "id": "new_synth_1112",
        "straightlined_code": "L, k = [], 3\nif L == []:\n    answer = []\nelse:\n    if L[0] <= k:\n        answer = [L[0]] + f(L[1:], k)\n    else:\n        answer = f(L[1:], k)"
    },
    {
        "code": "def f(first, second):\n    if len(first) < 10 or len(second) < 10:\n        return 'no'\n    for i in range(5):\n        if first[i] != second[i]:\n            return 'no'\n    first.extend(second)\n    return first",
        "input": "[1, 2, 1], [1, 1, 2]",
        "output": "'no'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "new_synth_1113",
        "straightlined_code": "first, second = [1, 2, 1], [1, 1, 2]\nif len(first) < 10 or len(second) < 10:\n    answer = 'no'\nfor i in range(5):\n    if first[i] != second[i]:\n        answer = 'no'\nfirst.extend(second)\nanswer = first"
    },
    {
        "code": "def f(n):\n    if n == 0:\n        return 'z'\n    else:\n        s = f(n - 1)\n        return s[0] + ''.join(s[:n - 1] + s[n - 1 + 1:])",
        "input": "0",
        "output": "'z'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 60,
        "error": null,
        "id": "new_synth_1114",
        "straightlined_code": "n = 0\nif n == 0:\n    answer = 'z'\nelse:\n    s = f(n - 1)\n    answer = s[0] + ''.join(s[:n - 1] + s[n - 1 + 1:])"
    },
    {
        "code": "def f(s):\n    if s == '':\n        return '()'\n    elif s.isdigit():\n        return s\n    else:\n        return f(s[1:]) + '(' + s[0] + f(s[1:]) + ')'",
        "input": "''",
        "output": "'()'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 55,
        "error": null,
        "id": "new_synth_1115",
        "straightlined_code": "s = ''\nif s == '':\n    answer = '()'\nelif s.isdigit():\n    answer = s\nelse:\n    answer = f(s[1:]) + '(' + s[0] + f(s[1:]) + ')'"
    },
    {
        "code": "def f(A):\n    if len(A) <= 1:\n        return A\n    A = A[:]\n    for i in range(len(A)):\n        if i % 2 == 0:\n            A[i] = A[i].upper()\n        else:\n            A[i] = A[i].lower()\n    return A",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 79,
        "error": null,
        "id": "new_synth_1116",
        "straightlined_code": "A = ''\nif len(A) <= 1:\n    answer = A\nA = A[:]\nfor i in range(len(A)):\n    if i % 2 == 0:\n        A[i] = A[i].upper()\n    else:\n        A[i] = A[i].lower()\nanswer = A"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0 and len(b) == 0:\n        return None\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 105,
        "error": null,
        "id": "new_synth_1117",
        "straightlined_code": "a, b = [], []\nif len(a) == 0 and len(b) == 0:\n    answer = None\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(t):\n    if len(t) < 2:\n        return []\n    else:\n        if t[0] < t[1]:\n            return [t[0]] + f(t[1:])\n        else:\n            return [t[1]] + f(t[:1] + t[2:])",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 75,
        "error": null,
        "id": "new_synth_1118",
        "straightlined_code": "t = []\nif len(t) < 2:\n    answer = []\nelse:\n    if t[0] < t[1]:\n        answer = [t[0]] + f(t[1:])\n    else:\n        answer = [t[1]] + f(t[:1] + t[2:])"
    },
    {
        "code": "def f(x, y):\n    if len(x) <= 0 or len(y) <= 0:\n        return False\n    return x[0] == y[0] and f(x[1:], y[1:])",
        "input": "'', ''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 56,
        "error": null,
        "id": "new_synth_1119",
        "straightlined_code": "x, y = '', ''\nif len(x) <= 0 or len(y) <= 0:\n    answer = False\nanswer = x[0] == y[0] and f(x[1:], y[1:])"
    },
    {
        "code": "def f(x, y):\n    if len(x) <= 0 or len(y) <= 0:\n        return False\n    elif x[0] == y[0]:\n        return f(x[1:], y[1:])\n    else:\n        return False",
        "input": "'', ''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "new_synth_1120",
        "straightlined_code": "x, y = '', ''\nif len(x) <= 0 or len(y) <= 0:\n    answer = False\nelif x[0] == y[0]:\n    answer = f(x[1:], y[1:])\nelse:\n    answer = False"
    },
    {
        "code": "def f(s, c):\n    if len(s) == 0:\n        return False\n    return f(s[1:], c) if s[0] == c else f(s[1:], c) if s[0] != c else True",
        "input": "'', 'a'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 60,
        "error": null,
        "id": "new_synth_1121",
        "straightlined_code": "s, c = '', 'a'\nif len(s) == 0:\n    answer = False\nanswer = f(s[1:], c) if s[0] == c else f(s[1:], c) if s[0] != c else True"
    },
    {
        "code": "def f(l):\n    if len(l) <= 1:\n        return l\n    if l[0] <= l[1]:\n        return [l[0]] + f(l[1:])\n    else:\n        return f([l[1]] + l[2:])",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 67,
        "error": null,
        "id": "new_synth_1122",
        "straightlined_code": "l = []\nif len(l) <= 1:\n    answer = l\nif l[0] <= l[1]:\n    answer = [l[0]] + f(l[1:])\nelse:\n    answer = f([l[1]] + l[2:])"
    },
    {
        "code": "def f(x):\n    if len(x) <= 1:\n        return x\n    elif len(x) > 2 and x[0] == x[2]:\n        return f(x[1:-1]) + x[0]\n    else:\n        return f(x[1:]) + x[0]",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 76,
        "error": null,
        "id": "new_synth_1123",
        "straightlined_code": "x = []\nif len(x) <= 1:\n    answer = x\nelif len(x) > 2 and x[0] == x[2]:\n    answer = f(x[1:-1]) + x[0]\nelse:\n    answer = f(x[1:]) + x[0]"
    },
    {
        "code": "def f(s):\n    if len(s) == 0:\n        return 1\n    if len(s) == 1:\n        return 2\n    return f(s[1:]) + f(s[:len(s) - 1])",
        "input": "''",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 54,
        "error": null,
        "id": "new_synth_1124",
        "straightlined_code": "s = ''\nif len(s) == 0:\n    answer = 1\nif len(s) == 1:\n    answer = 2\nanswer = f(s[1:]) + f(s[:len(s) - 1])"
    },
    {
        "code": "def f(a, n):\n    if a == '':\n        return a\n    else:\n        if n == 0:\n            return a[0]\n        elif n == 1:\n            return a[-1]\n        else:\n            return a[len(a) // 2]",
        "input": "'', 0",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 53,
        "error": null,
        "id": "new_synth_1125",
        "straightlined_code": "a, n = '', 0\nif a == '':\n    answer = a\nelse:\n    if n == 0:\n        answer = a[0]\n    elif n == 1:\n        answer = a[-1]\n    else:\n        answer = a[len(a) // 2]"
    },
    {
        "code": "def f(s, c1, c2):\n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        ls[index] = item.replace(c1, c2, 1)\n    return c1.join(ls)",
        "input": "'', 'mi', 'siast'",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "new_synth_1126",
        "straightlined_code": "s, c1, c2 = '', 'mi', 'siast'\nif s == '':\n    answer = s\nls = s.split(c1)\nfor index, item in enumerate(ls):\n    ls[index] = item.replace(c1, c2, 1)\nanswer = c1.join(ls)"
    },
    {
        "code": "def f(seq):\n    if len(seq) <= 2:\n        return seq\n    else:\n        lh = seq[:len(seq) // 2]\n        rh = seq[len(seq) // 2:]\n        return f(lh) + f(rh)",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "new_synth_1127",
        "straightlined_code": "seq = ''\nif len(seq) <= 2:\n    answer = seq\nelse:\n    lh = seq[:len(seq) // 2]\n    rh = seq[len(seq) // 2:]\n    answer = f(lh) + f(rh)"
    },
    {
        "code": "def f(n):\n    if len(n) == 0:\n        return True\n    if len(n) == 1:\n        return False\n    if len(n) == 2:\n        return True\n    if len(n) == 3:\n        return False\n    if n[0] < n[1]:\n        return f(n[1:])\n    else:\n        return False",
        "input": "''",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 73,
        "error": null,
        "id": "new_synth_1128",
        "straightlined_code": "n = ''\nif len(n) == 0:\n    answer = True\nif len(n) == 1:\n    answer = False\nif len(n) == 2:\n    answer = True\nif len(n) == 3:\n    answer = False\nif n[0] < n[1]:\n    answer = f(n[1:])\nelse:\n    answer = False"
    },
    {
        "code": "def f(x, y):\n    if len(x) <= 0 or len(y) <= 0:\n        return False\n    elif x[0] == y[0]:\n        return f(x[1:], y[1:])\n    else:\n        return False",
        "input": "'', ''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "new_synth_1129",
        "straightlined_code": "x, y = '', ''\nif len(x) <= 0 or len(y) <= 0:\n    answer = False\nelif x[0] == y[0]:\n    answer = f(x[1:], y[1:])\nelse:\n    answer = False"
    },
    {
        "code": "def f(a,b):\n    if len(a) == 0:\n        return b\n    elif len(b) == 0:\n        return a\n    else:\n        return f(a[1:], b[1:]) + [a[0]] + [b[0]]",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "new_synth_1130",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = b\nelif len(b) == 0:\n    answer = a\nelse:\n    answer = f(a[1:], b[1:]) + [a[0]] + [b[0]]"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 84,
        "error": null,
        "id": "new_synth_1131",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0 and len(b) == 0:\n        return None\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 105,
        "error": null,
        "id": "new_synth_1132",
        "straightlined_code": "a, b = [], []\nif len(a) == 0 and len(b) == 0:\n    answer = None\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(a, b):\n    return None if len(a) == 0 and len(b) == 0 else (a if a[0] < b[0] else b) + f(a[1:], b[1:])",
        "input": "[], []",
        "output": "None",
        "line_execution_counts": {
            "1": 1
        },
        "ast_size": 60,
        "error": null,
        "id": "new_synth_1133",
        "straightlined_code": "a, b = [], []\nanswer = None if len(a) == 0 and len(b) == 0 else (a if a[0] < b[0] else b) + f(a[1:], b[1:])"
    },
    {
        "code": "def f(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        half = len(arr) // 2\n        left = f(arr[:half])\n        right = f(arr[half:])\n        return merge(left, right)",
        "input": "[]",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 61,
        "error": null,
        "id": "new_synth_1134",
        "straightlined_code": "arr = []\nif len(arr) <= 1:\n    answer = arr\nelse:\n    half = len(arr) // 2\n    left = f(arr[:half])\n    right = f(arr[half:])\n    answer = merge(left, right)"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0:\n        return True\n    if len(b) == 0:\n        return True\n    if len(b) == 1:\n        return False\n    return f(a, b[1:])",
        "input": "'', ''",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 50,
        "error": null,
        "id": "new_synth_1135",
        "straightlined_code": "a, b = '', ''\nif len(a) == 0:\n    answer = True\nif len(b) == 0:\n    answer = True\nif len(b) == 1:\n    answer = False\nanswer = f(a, b[1:])"
    },
    {
        "code": "def f(s, i):\n    if i == len(s) - 1:\n        return s[i] in 'aeiou'\n    if s[i] in 'aeiou':\n        return True\n    return f(s, i + 1)",
        "input": "'a', 0",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 51,
        "error": null,
        "id": "new_synth_1136",
        "straightlined_code": "s, i = 'a', 0\nif i == len(s) - 1:\n    answer = s[i] in 'aeiou'\nif s[i] in 'aeiou':\n    answer = True\nanswer = f(s, i + 1)"
    },
    {
        "code": "def f(x, y):\n    if len(x) <= 0 and len(y) <= 0:\n        return True\n    elif len(x) == 0:\n        return False\n    elif len(y) == 0:\n        return False\n    elif x[0] == y[0]:\n        return f(x[1:], y[1:])\n    else:\n        return False",
        "input": "'', ''",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 79,
        "error": null,
        "id": "new_synth_1137",
        "straightlined_code": "x, y = '', ''\nif len(x) <= 0 and len(y) <= 0:\n    answer = True\nelif len(x) == 0:\n    answer = False\nelif len(y) == 0:\n    answer = False\nelif x[0] == y[0]:\n    answer = f(x[1:], y[1:])\nelse:\n    answer = False"
    },
    {
        "code": "def f(a):\n    if len(a) <= 0:\n        return False\n    elif len(a[1:]) <= 0 or len(a[1:]) < a[0]:\n        return False\n    elif len(a[1:][a[0]:]) <= 0 or len(a[1:][a[0]:]) < a[0]:\n        return False\n    elif a[0] != len(a[1:][a[0]:][:a[0]]) + 1:\n        return False\n    elif a[0] != len(a[1:][:a[0]]) + 1:\n        return False\n    else:\n        return True",
        "input": "''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 167,
        "error": null,
        "id": "new_synth_1138",
        "straightlined_code": "a = ''\nif len(a) <= 0:\n    answer = False\nelif len(a[1:]) <= 0 or len(a[1:]) < a[0]:\n    answer = False\nelif len(a[1:][a[0]:]) <= 0 or len(a[1:][a[0]:]) < a[0]:\n    answer = False\nelif a[0] != len(a[1:][a[0]:][:a[0]]) + 1:\n    answer = False\nelif a[0] != len(a[1:][:a[0]]) + 1:\n    answer = False\nelse:\n    answer = True"
    },
    {
        "code": "def f(a):\n    if len(a) == 0:\n        return False\n    if a[0] != '(':\n        return False\n    if len(a) == 1:\n        return True\n    elif len(a) == 2:\n        return False\n    if a[1] == ')':\n        return f(a[2:])\n    else:\n        return False",
        "input": "''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 69,
        "error": null,
        "id": "new_synth_1139",
        "straightlined_code": "a = ''\nif len(a) == 0:\n    answer = False\nif a[0] != '(':\n    answer = False\nif len(a) == 1:\n    answer = True\nelif len(a) == 2:\n    answer = False\nif a[1] == ')':\n    answer = f(a[2:])\nelse:\n    answer = False"
    },
    {
        "code": "def f(a, b):\n    if a == '':\n        return 0\n    if b == '':\n        return 0\n    if a[0] < b[0]:\n        return 1 + f(a[1:], b[1:])\n    else:\n        return 1 + f(a[1:], b[:-1])",
        "input": "'', ''",
        "output": "0",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 74,
        "error": null,
        "id": "new_synth_1140",
        "straightlined_code": "a, b = '', ''\nif a == '':\n    answer = 0\nif b == '':\n    answer = 0\nif a[0] < b[0]:\n    answer = 1 + f(a[1:], b[1:])\nelse:\n    answer = 1 + f(a[1:], b[:-1])"
    },
    {
        "code": "def f(x, i):\n    if i == len(x):\n        return x\n    if i == 0:\n        return [x[i]] + f(x[i + 1:], i + 1)\n    return [x[i]] + f(x[:i] + x[i + 1:], i + 1)",
        "input": "[], 0",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 91,
        "error": null,
        "id": "new_synth_1141",
        "straightlined_code": "x, i = [], 0\nif i == len(x):\n    answer = x\nif i == 0:\n    answer = [x[i]] + f(x[i + 1:], i + 1)\nanswer = [x[i]] + f(x[:i] + x[i + 1:], i + 1)"
    },
    {
        "code": "def f(s, c):\n    if s == '':\n        return True\n    return f(s[1:], c) if s[0] == c else f(s[1:], c) if s[0] != c else False",
        "input": "'', 'a'",
        "output": "True",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "new_synth_1142",
        "straightlined_code": "s, c = '', 'a'\nif s == '':\n    answer = True\nanswer = f(s[1:], c) if s[0] == c else f(s[1:], c) if s[0] != c else False"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0 and len(b) == 0:\n        return None\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] < b[0]:\n        return [a[0]] + f(a[1:], b)\n    else:\n        return [b[0]] + f(a, b[1:])",
        "input": "[], []",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 105,
        "error": null,
        "id": "new_synth_1143",
        "straightlined_code": "a, b = [], []\nif len(a) == 0 and len(b) == 0:\n    answer = None\nif len(a) == 0:\n    answer = b\nif len(b) == 0:\n    answer = a\nif a[0] < b[0]:\n    answer = [a[0]] + f(a[1:], b)\nelse:\n    answer = [b[0]] + f(a, b[1:])"
    },
    {
        "code": "def f(a):\n    if len(a) == 0:\n        return False\n    if len(a) == 1:\n        return True\n    if a[0] == a[1]:\n        return f(a[1:])\n    elif a[0] > a[1]:\n        return False\n    else:\n        return f(a[1:])",
        "input": "''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 74,
        "error": null,
        "id": "new_synth_1144",
        "straightlined_code": "a = ''\nif len(a) == 0:\n    answer = False\nif len(a) == 1:\n    answer = True\nif a[0] == a[1]:\n    answer = f(a[1:])\nelif a[0] > a[1]:\n    answer = False\nelse:\n    answer = f(a[1:])"
    },
    {
        "code": "def f(a, c):\n    if len(a) == 0:\n        return False\n    if len(a) == 1 and a[0] == c:\n        return True\n    if a[0] == c:\n        return True\n    return f(a[1:], c)",
        "input": "'', 'a'",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 62,
        "error": null,
        "id": "new_synth_1145",
        "straightlined_code": "a, c = '', 'a'\nif len(a) == 0:\n    answer = False\nif len(a) == 1 and a[0] == c:\n    answer = True\nif a[0] == c:\n    answer = True\nanswer = f(a[1:], c)"
    },
    {
        "code": "def f(c, n):\n    if c == 'i':\n        return 1\n    if c == 'o':\n        return 0\n    if c == 'd':\n        return n * 2\n    if c == 'p':\n        return n + 1\n    if c == 'm':\n        return n - 1",
        "input": "'i', 1",
        "output": "1",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 57,
        "error": null,
        "id": "new_synth_1146",
        "straightlined_code": "c, n = 'i', 1\nif c == 'i':\n    answer = 1\nif c == 'o':\n    answer = 0\nif c == 'd':\n    answer = n * 2\nif c == 'p':\n    answer = n + 1\nif c == 'm':\n    answer = n - 1"
    },
    {
        "code": "def f(text):\n    if text == \"\":\n        return \"\"\n    elif text.find(' ') == -1:\n        return text[::-1]\n    else:\n        return f(text[text.find(' ')+1:]) + ' ' + f(text[:text.find(' ')])",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 70,
        "error": null,
        "id": "new_synth_1147",
        "straightlined_code": "text = ''\nif text == \"\":\n    answer = \"\"\nelif text.find(' ') == -1:\n    answer = text[::-1]\nelse:\n    answer = f(text[text.find(' ')+1:]) + ' ' + f(text[:text.find(' ')])"
    },
    {
        "code": "def f(a,b):\n    if len(a) == 0:\n        return b\n    elif len(b) == 0:\n        return a\n    else:\n        return f(a[1:], b[1:]) + [a[0]] + [b[0]]",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "new_synth_1148",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = b\nelif len(b) == 0:\n    answer = a\nelse:\n    answer = f(a[1:], b[1:]) + [a[0]] + [b[0]]"
    },
    {
        "code": "def f(a,b):\n    if len(a) == 0:\n        return b\n    elif len(b) == 0:\n        return a\n    else:\n        return f(a[1:], b[1:]) + [a[0]] + [b[0]]",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 63,
        "error": null,
        "id": "new_synth_1149",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = b\nelif len(b) == 0:\n    answer = a\nelse:\n    answer = f(a[1:], b[1:]) + [a[0]] + [b[0]]"
    },
    {
        "code": "def f(s):\n    if s == '':\n        return False\n    if s[0] == ' ':\n        return f(s[1:])\n    if s[0] == 'a':\n        return True\n    if s[0] == 'e':\n        return True\n    if s[0] == 'i':\n        return True\n    if s[0] == 'o':\n        return True\n    if s[0] == 'u':\n        return True\n    return False",
        "input": "''",
        "output": "False",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 88,
        "error": null,
        "id": "new_synth_1150",
        "straightlined_code": "s = ''\nif s == '':\n    answer = False\nif s[0] == ' ':\n    answer = f(s[1:])\nif s[0] == 'a':\n    answer = True\nif s[0] == 'e':\n    answer = True\nif s[0] == 'i':\n    answer = True\nif s[0] == 'o':\n    answer = True\nif s[0] == 'u':\n    answer = True\nanswer = False"
    },
    {
        "code": "def f(a, b):\n    if len(a) == 0:\n        return a\n    if len(b) == 0:\n        return a\n    if len(a) < len(b):\n        return f(a + [0], b)\n    if len(b) < len(a):\n        return f(a, b + [0])\n    return f(a[:-1], b[:-1]) + [a[-1] + b[-1]]",
        "input": "[], []",
        "output": "[]",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 121,
        "error": null,
        "id": "new_synth_1151",
        "straightlined_code": "a, b = [], []\nif len(a) == 0:\n    answer = a\nif len(b) == 0:\n    answer = a\nif len(a) < len(b):\n    answer = f(a + [0], b)\nif len(b) < len(a):\n    answer = f(a, b + [0])\nanswer = f(a[:-1], b[:-1]) + [a[-1] + b[-1]]"
    },
    {
        "code": "def f(s, i, sep):\n    if len(s) == 0:\n        return None\n    if i == len(s) - 1:\n        if s[i] == sep:\n            return [s[i]]\n        return None\n    if s[i] == sep:\n        return [s[i]] + f(s, i + 1, sep)\n    return None",
        "input": "\"\", 0, ' '",
        "output": "None",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 88,
        "error": null,
        "id": "new_synth_1152",
        "straightlined_code": "s, i, sep = \"\", 0, ' '\nif len(s) == 0:\n    answer = None\nif i == len(s) - 1:\n    if s[i] == sep:\n        answer = [s[i]]\n    answer = None\nif s[i] == sep:\n    answer = [s[i]] + f(s, i + 1, sep)\nanswer = None"
    },
    {
        "code": "def f(x):\n    if len(x) == 0:\n        return x\n    if x[0] == '*':\n        return f(x[1:])\n    if len(x[0]) == 1:\n        return f(x[0] + f(x[1:]))\n    return x[0] + f(x[1:])",
        "input": "''",
        "output": "''",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 84,
        "error": null,
        "id": "new_synth_1153",
        "straightlined_code": "x = ''\nif len(x) == 0:\n    answer = x\nif x[0] == '*':\n    answer = f(x[1:])\nif len(x[0]) == 1:\n    answer = f(x[0] + f(x[1:]))\nanswer = x[0] + f(x[1:])"
    },
    {
        "code": "def f(l):\n    if len(l) == 0:\n        return '0'\n    s = '0'\n    for i in range(len(l)):\n        if l[i] > s:\n            s = l[i]\n    return s + f(l[1:])",
        "input": "''",
        "output": "'0'",
        "line_execution_counts": {
            "1": 1,
            "2": 1
        },
        "ast_size": 64,
        "error": null,
        "id": "new_synth_1154",
        "straightlined_code": "l = ''\nif len(l) == 0:\n    answer = '0'\ns = '0'\nfor i in range(len(l)):\n    if l[i] > s:\n        s = l[i]\nanswer = s + f(l[1:])"
    }
]